// $ANTLR 3.0 org/python/antlr/Python.g 2007-07-18 23:42:10
 
package org.python.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** Beginning of Python 2.5 Grammar, Jim Baker, based on
 *
 *  Python 2.3.3 Grammar
 *
 *  Terence Parr and Loring Craymer
 *  February 2004
 *
 *  Converted to ANTLR v3 November 2005 by Terence Parr.
 *
 *  This grammar was derived automatically from the Python 2.3.3
 *  parser grammar to get a syntactically correct ANTLR grammar
 *  for Python.  Then Terence hand tweaked it to be semantically
 *  correct; i.e., removed lookahead issues etc...  It is LL(1)
 *  except for the (sometimes optional) trailing commas and semi-colons.
 *  It needs two symbols of lookahead in this case.
 *
 *  Starting with Loring's preliminary lexer for Python, I modified it
 *  to do my version of the whole nasty INDENT/DEDENT issue just so I
 *  could understand the problem better.  This grammar requires
 *  PythonTokenStream.java to work.  Also I used some rules from the
 *  semi-formal grammar on the web for Python (automatically
 *  translated to ANTLR format by an ANTLR grammar, naturally <grin>).
 *  The lexical rules for python are particularly nasty and it took me
 *  a long time to get it 'right'; i.e., think about it in the proper
 *  way.  Resist changing the lexer unless you've used ANTLR a lot. ;)
 *
 *  I (Terence) tested this by running it on the jython-2.1/Lib
 *  directory of 40k lines of Python.
 *
 *  REQUIRES ANTLR v3
 */
public class PythonParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "INDENT", "DEDENT", "Module", "Body", "Import", "Names", "Name", "Alias", "AsName", "Decorators", "Decorator", "ClassDef", "Bases", "FunctionDef", "Func", "Params", "Param", "Args", "StarArgs", "KWArgs", "Keywords", "Attribute", "Attr", "Keyword", "Arg", "Vararg", "Arguments", "Assign", "Targets", "Id", "Ctx", "Store", "Load", "Expr", "Call", "Subscript", "Slice", "Tuple", "List", "Dict", "Set", "Elts", "Keys", "Values", "Value", "If", "Test", "OrElse", "Elif", "With", "Context", "Try", "Except", "Finally", "ListComp", "For", "Target", "Iter", "Gen", "GenTarget", "GenIf", "While", "Pass", "Print", "Return", "Yield", "Comparison", "None", "BoolOp", "BinOp", "UnaryOp", "Left", "Right", "Op", "Mult", "Div", "Add", "Sub", "LONG_INTEGER", "Num", "N", "Str", "S", "Defaults", "NEWLINE", "NAME", "COLON", "ATSIGN", "LPAREN", "RPAREN", "COMMA", "STAR", "DOUBLESTAR", "ASSIGN", "SEMI", "PLUSEQUAL", "MINUSEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASHEQUAL", "RIGHTSHIFT", "DOT", "LESS", "GREATER", "EQUAL", "GREATEREQUAL", "LESSEQUAL", "ALT_NOTEQUAL", "NOTEQUAL", "VBAR", "CIRCUMFLEX", "AMPER", "LEFTSHIFT", "PLUS", "MINUS", "SLASH", "PERCENT", "DOUBLESLASH", "TILDE", "LBRACK", "RBRACK", "LCURLY", "RCURLY", "BACKQUOTE", "INT", "LONGINT", "FLOAT", "COMPLEX", "STRING", "DIGITS", "Exponent", "ESC", "CONTINUED_LINE", "WS", "LEADING_WS", "COMMENT", "'def'", "'print'", "'del'", "'pass'", "'break'", "'continue'", "'return'", "'yield'", "'raise'", "'import'", "'from'", "'as'", "'global'", "'exec'", "'in'", "'assert'", "'for'", "'else'", "'while'", "'if'", "'elif'", "'with'", "'try'", "'finally'", "'except'", "'or'", "'and'", "'not'", "'is'", "'lambda'", "'class'"
    };
    public static final int Arg=28;
    public static final int BACKQUOTE=134;
    public static final int SLASHEQUAL=102;
    public static final int STAR=95;
    public static final int CIRCUMFLEXEQUAL=106;
    public static final int Vararg=29;
    public static final int FunctionDef=17;
    public static final int Module=6;
    public static final int Comparison=70;
    public static final int Elif=52;
    public static final int GREATEREQUAL=116;
    public static final int StarArgs=22;
    public static final int Test=50;
    public static final int COMPLEX=138;
    public static final int Attribute=25;
    public static final int EOF=-1;
    public static final int Except=56;
    public static final int LONG_INTEGER=82;
    public static final int Finally=57;
    public static final int Keywords=24;
    public static final int LEADING_WS=145;
    public static final int NOTEQUAL=119;
    public static final int Iter=61;
    public static final int Values=47;
    public static final int VBAR=120;
    public static final int MINUSEQUAL=100;
    public static final int RPAREN=93;
    public static final int NAME=89;
    public static final int GREATER=114;
    public static final int Num=83;
    public static final int Bases=16;
    public static final int DOUBLESTAREQUAL=109;
    public static final int Left=75;
    public static final int Defaults=87;
    public static final int LESS=113;
    public static final int ATSIGN=91;
    public static final int Decorators=13;
    public static final int COMMENT=146;
    public static final int RBRACK=131;
    public static final int Decorator=14;
    public static final int N=84;
    public static final int GenTarget=63;
    public static final int LCURLY=132;
    public static final int Target=60;
    public static final int INT=135;
    public static final int S=86;
    public static final int RIGHTSHIFT=111;
    public static final int None=71;
    public static final int GenIf=64;
    public static final int With=53;
    public static final int Targets=32;
    public static final int Right=76;
    public static final int DOUBLESLASHEQUAL=110;
    public static final int WS=144;
    public static final int BoolOp=72;
    public static final int ClassDef=15;
    public static final int VBAREQUAL=105;
    public static final int Keys=46;
    public static final int Slice=40;
    public static final int LONGINT=136;
    public static final int KWArgs=23;
    public static final int Params=19;
    public static final int BinOp=73;
    public static final int LESSEQUAL=117;
    public static final int PERCENTEQUAL=103;
    public static final int AsName=12;
    public static final int Pass=66;
    public static final int Gen=62;
    public static final int DOUBLESLASH=128;
    public static final int UnaryOp=74;
    public static final int CONTINUED_LINE=143;
    public static final int LBRACK=130;
    public static final int Try=55;
    public static final int Load=36;
    public static final int Attr=26;
    public static final int DOUBLESTAR=96;
    public static final int ESC=142;
    public static final int DIGITS=140;
    public static final int Tuple=41;
    public static final int Exponent=141;
    public static final int FLOAT=137;
    public static final int DEDENT=5;
    public static final int Context=54;
    public static final int While=65;
    public static final int RIGHTSHIFTEQUAL=108;
    public static final int Func=18;
    public static final int Add=80;
    public static final int Set=44;
    public static final int LPAREN=92;
    public static final int Expr=37;
    public static final int INDENT=4;
    public static final int PLUSEQUAL=99;
    public static final int Ctx=34;
    public static final int Body=7;
    public static final int Value=48;
    public static final int Arguments=30;
    public static final int Param=20;
    public static final int SLASH=126;
    public static final int Assign=31;
    public static final int Call=38;
    public static final int COMMA=94;
    public static final int Elts=45;
    public static final int AMPER=122;
    public static final int EQUAL=115;
    public static final int Names=9;
    public static final int Print=67;
    public static final int TILDE=129;
    public static final int LEFTSHIFTEQUAL=107;
    public static final int PLUS=124;
    public static final int LEFTSHIFT=123;
    public static final int Op=77;
    public static final int DOT=112;
    public static final int Return=68;
    public static final int Id=33;
    public static final int If=49;
    public static final int Div=79;
    public static final int Keyword=27;
    public static final int Import=8;
    public static final int Store=35;
    public static final int PERCENT=127;
    public static final int Args=21;
    public static final int Yield=69;
    public static final int MINUS=125;
    public static final int OrElse=51;
    public static final int SEMI=98;
    public static final int For=59;
    public static final int Sub=81;
    public static final int List=42;
    public static final int COLON=90;
    public static final int Mult=78;
    public static final int Subscript=39;
    public static final int AMPEREQUAL=104;
    public static final int NEWLINE=88;
    public static final int Str=85;
    public static final int RCURLY=133;
    public static final int ASSIGN=97;
    public static final int Name=10;
    public static final int ListComp=58;
    public static final int Alias=11;
    public static final int Dict=43;
    public static final int STAREQUAL=101;
    public static final int CIRCUMFLEX=121;
    public static final int STRING=139;
    public static final int ALT_NOTEQUAL=118;

        public PythonParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[245+1];
         }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "org/python/antlr/Python.g"; }


    public static class module_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start module
    // org/python/antlr/Python.g:173:1: module : file_input -> ^( Module ^( Body file_input ) ) ;
    public final module_return module() throws RecognitionException {
        module_return retval = new module_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        file_input_return file_input1 = null;


        RewriteRuleSubtreeStream stream_file_input=new RewriteRuleSubtreeStream(adaptor,"rule file_input");
        try {
            // org/python/antlr/Python.g:174:7: ( file_input -> ^( Module ^( Body file_input ) ) )
            // org/python/antlr/Python.g:174:7: file_input
            {
            pushFollow(FOLLOW_file_input_in_module505);
            file_input1=file_input();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_file_input.add(file_input1.getTree());

            // AST REWRITE
            // elements: file_input
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 174:18: -> ^( Module ^( Body file_input ) )
            {
                // org/python/antlr/Python.g:174:21: ^( Module ^( Body file_input ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Module, "Module"), root_1);

                // org/python/antlr/Python.g:174:30: ^( Body file_input )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_file_input.next());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end module

    public static class single_input_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start single_input
    // org/python/antlr/Python.g:177:1: single_input : ( NEWLINE | simple_stmt | compound_stmt NEWLINE );
    public final single_input_return single_input() throws RecognitionException {
        single_input_return retval = new single_input_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NEWLINE2=null;
        Token NEWLINE5=null;
        simple_stmt_return simple_stmt3 = null;

        compound_stmt_return compound_stmt4 = null;


        CommonTree NEWLINE2_tree=null;
        CommonTree NEWLINE5_tree=null;

        try {
            // org/python/antlr/Python.g:178:7: ( NEWLINE | simple_stmt | compound_stmt NEWLINE )
            int alt1=3;
            switch ( input.LA(1) ) {
            case NEWLINE:
                {
                alt1=1;
                }
                break;
            case NAME:
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
            case 160:
            case 162:
                {
                alt1=2;
                }
                break;
            case ATSIGN:
            case 147:
            case 163:
            case 165:
            case 166:
            case 168:
            case 169:
            case 177:
                {
                alt1=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("177:1: single_input : ( NEWLINE | simple_stmt | compound_stmt NEWLINE );", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // org/python/antlr/Python.g:178:7: NEWLINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NEWLINE2=(Token)input.LT(1);
                    match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input534); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NEWLINE2_tree = (CommonTree)adaptor.create(NEWLINE2);
                    adaptor.addChild(root_0, NEWLINE2_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:179:4: simple_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_single_input539);
                    simple_stmt3=simple_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, simple_stmt3.getTree());

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:180:4: compound_stmt NEWLINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_stmt_in_single_input544);
                    compound_stmt4=compound_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compound_stmt4.getTree());
                    NEWLINE5=(Token)input.LT(1);
                    match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input546); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NEWLINE5_tree = (CommonTree)adaptor.create(NEWLINE5);
                    adaptor.addChild(root_0, NEWLINE5_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end single_input

    public static class file_input_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start file_input
    // org/python/antlr/Python.g:183:1: file_input : ( NEWLINE | stmt )* -> ( stmt )* ;
    public final file_input_return file_input() throws RecognitionException {
        file_input_return retval = new file_input_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NEWLINE6=null;
        stmt_return stmt7 = null;


        CommonTree NEWLINE6_tree=null;
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            // org/python/antlr/Python.g:184:9: ( ( NEWLINE | stmt )* -> ( stmt )* )
            // org/python/antlr/Python.g:184:9: ( NEWLINE | stmt )*
            {
            // org/python/antlr/Python.g:184:9: ( NEWLINE | stmt )*
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==NEWLINE) ) {
                    alt2=1;
                }
                else if ( (LA2_0==NAME||(LA2_0>=ATSIGN && LA2_0<=LPAREN)||(LA2_0>=PLUS && LA2_0<=MINUS)||(LA2_0>=TILDE && LA2_0<=LBRACK)||LA2_0==LCURLY||(LA2_0>=BACKQUOTE && LA2_0<=STRING)||(LA2_0>=147 && LA2_0<=157)||(LA2_0>=159 && LA2_0<=160)||(LA2_0>=162 && LA2_0<=163)||(LA2_0>=165 && LA2_0<=166)||(LA2_0>=168 && LA2_0<=169)||LA2_0==177) ) {
                    alt2=2;
                }


                switch (alt2) {
            	case 1 :
            	    // org/python/antlr/Python.g:184:10: NEWLINE
            	    {
            	    NEWLINE6=(Token)input.LT(1);
            	    match(input,NEWLINE,FOLLOW_NEWLINE_in_file_input563); if (failed) return retval;
            	    if ( backtracking==0 ) stream_NEWLINE.add(NEWLINE6);


            	    }
            	    break;
            	case 2 :
            	    // org/python/antlr/Python.g:184:20: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_file_input567);
            	    stmt7=stmt();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_stmt.add(stmt7.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            // AST REWRITE
            // elements: stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 184:27: -> ( stmt )*
            {
                // org/python/antlr/Python.g:184:30: ( stmt )*
                while ( stream_stmt.hasNext() ) {
                    adaptor.addChild(root_0, stream_stmt.next());

                }
                stream_stmt.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end file_input

    public static class eval_input_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start eval_input
    // org/python/antlr/Python.g:187:1: eval_input : ( NEWLINE )* testlist ( NEWLINE )* ;
    public final eval_input_return eval_input() throws RecognitionException {
        eval_input_return retval = new eval_input_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NEWLINE8=null;
        Token NEWLINE10=null;
        testlist_return testlist9 = null;


        CommonTree NEWLINE8_tree=null;
        CommonTree NEWLINE10_tree=null;

        try {
            // org/python/antlr/Python.g:188:9: ( ( NEWLINE )* testlist ( NEWLINE )* )
            // org/python/antlr/Python.g:188:9: ( NEWLINE )* testlist ( NEWLINE )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // org/python/antlr/Python.g:188:9: ( NEWLINE )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==NEWLINE) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // org/python/antlr/Python.g:188:10: NEWLINE
            	    {
            	    NEWLINE8=(Token)input.LT(1);
            	    match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input591); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NEWLINE8_tree = (CommonTree)adaptor.create(NEWLINE8);
            	    adaptor.addChild(root_0, NEWLINE8_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            pushFollow(FOLLOW_testlist_in_eval_input595);
            testlist9=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, testlist9.getTree());
            // org/python/antlr/Python.g:188:29: ( NEWLINE )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==NEWLINE) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // org/python/antlr/Python.g:188:30: NEWLINE
            	    {
            	    NEWLINE10=(Token)input.LT(1);
            	    match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input598); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NEWLINE10_tree = (CommonTree)adaptor.create(NEWLINE10);
            	    adaptor.addChild(root_0, NEWLINE10_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end eval_input

    public static class funcdef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start funcdef
    // org/python/antlr/Python.g:191:1: funcdef : decorators 'def' NAME parameters COLON suite -> ^( FunctionDef ^( Name NAME ) ^( Args parameters ) ^( Body suite ) decorators ) ;
    public final funcdef_return funcdef() throws RecognitionException {
        funcdef_return retval = new funcdef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal12=null;
        Token NAME13=null;
        Token COLON15=null;
        decorators_return decorators11 = null;

        parameters_return parameters14 = null;

        suite_return suite16 = null;


        CommonTree string_literal12_tree=null;
        CommonTree NAME13_tree=null;
        CommonTree COLON15_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_decorators=new RewriteRuleSubtreeStream(adaptor,"rule decorators");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // org/python/antlr/Python.g:192:8: ( decorators 'def' NAME parameters COLON suite -> ^( FunctionDef ^( Name NAME ) ^( Args parameters ) ^( Body suite ) decorators ) )
            // org/python/antlr/Python.g:192:8: decorators 'def' NAME parameters COLON suite
            {
            pushFollow(FOLLOW_decorators_in_funcdef615);
            decorators11=decorators();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_decorators.add(decorators11.getTree());
            string_literal12=(Token)input.LT(1);
            match(input,147,FOLLOW_147_in_funcdef617); if (failed) return retval;
            if ( backtracking==0 ) stream_147.add(string_literal12);

            NAME13=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_funcdef619); if (failed) return retval;
            if ( backtracking==0 ) stream_NAME.add(NAME13);

            pushFollow(FOLLOW_parameters_in_funcdef621);
            parameters14=parameters();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_parameters.add(parameters14.getTree());
            COLON15=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_funcdef623); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON15);

            pushFollow(FOLLOW_suite_in_funcdef625);
            suite16=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(suite16.getTree());

            // AST REWRITE
            // elements: decorators, NAME, parameters, suite
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 193:5: -> ^( FunctionDef ^( Name NAME ) ^( Args parameters ) ^( Body suite ) decorators )
            {
                // org/python/antlr/Python.g:193:8: ^( FunctionDef ^( Name NAME ) ^( Args parameters ) ^( Body suite ) decorators )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(FunctionDef, "FunctionDef"), root_1);

                // org/python/antlr/Python.g:193:22: ^( Name NAME )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                adaptor.addChild(root_2, stream_NAME.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:193:35: ^( Args parameters )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Args, "Args"), root_2);

                adaptor.addChild(root_2, stream_parameters.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:193:54: ^( Body suite )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_suite.next());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_decorators.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end funcdef

    public static class decorators_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start decorators
    // org/python/antlr/Python.g:203:1: decorators : ( ATSIGN NAME ( parameters )* NEWLINE )* -> ^( Decorators ( ^( Name ^( Id NAME ) ^( Ctx ^( Load ) ) ) )* ) ;
    public final decorators_return decorators() throws RecognitionException {
        decorators_return retval = new decorators_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ATSIGN17=null;
        Token NAME18=null;
        Token NEWLINE20=null;
        parameters_return parameters19 = null;


        CommonTree ATSIGN17_tree=null;
        CommonTree NAME18_tree=null;
        CommonTree NEWLINE20_tree=null;
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_ATSIGN=new RewriteRuleTokenStream(adaptor,"token ATSIGN");
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleSubtreeStream stream_parameters=new RewriteRuleSubtreeStream(adaptor,"rule parameters");
        try {
            // org/python/antlr/Python.g:204:9: ( ( ATSIGN NAME ( parameters )* NEWLINE )* -> ^( Decorators ( ^( Name ^( Id NAME ) ^( Ctx ^( Load ) ) ) )* ) )
            // org/python/antlr/Python.g:204:9: ( ATSIGN NAME ( parameters )* NEWLINE )*
            {
            // org/python/antlr/Python.g:204:9: ( ATSIGN NAME ( parameters )* NEWLINE )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ATSIGN) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // org/python/antlr/Python.g:204:10: ATSIGN NAME ( parameters )* NEWLINE
            	    {
            	    ATSIGN17=(Token)input.LT(1);
            	    match(input,ATSIGN,FOLLOW_ATSIGN_in_decorators676); if (failed) return retval;
            	    if ( backtracking==0 ) stream_ATSIGN.add(ATSIGN17);

            	    NAME18=(Token)input.LT(1);
            	    match(input,NAME,FOLLOW_NAME_in_decorators678); if (failed) return retval;
            	    if ( backtracking==0 ) stream_NAME.add(NAME18);

            	    // org/python/antlr/Python.g:204:22: ( parameters )*
            	    loop5:
            	    do {
            	        int alt5=2;
            	        int LA5_0 = input.LA(1);

            	        if ( (LA5_0==LPAREN) ) {
            	            alt5=1;
            	        }


            	        switch (alt5) {
            	    	case 1 :
            	    	    // org/python/antlr/Python.g:0:0: parameters
            	    	    {
            	    	    pushFollow(FOLLOW_parameters_in_decorators680);
            	    	    parameters19=parameters();
            	    	    _fsp--;
            	    	    if (failed) return retval;
            	    	    if ( backtracking==0 ) stream_parameters.add(parameters19.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop5;
            	        }
            	    } while (true);

            	    NEWLINE20=(Token)input.LT(1);
            	    match(input,NEWLINE,FOLLOW_NEWLINE_in_decorators683); if (failed) return retval;
            	    if ( backtracking==0 ) stream_NEWLINE.add(NEWLINE20);


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            // AST REWRITE
            // elements: NAME
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 205:5: -> ^( Decorators ( ^( Name ^( Id NAME ) ^( Ctx ^( Load ) ) ) )* )
            {
                // org/python/antlr/Python.g:205:8: ^( Decorators ( ^( Name ^( Id NAME ) ^( Ctx ^( Load ) ) ) )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Decorators, "Decorators"), root_1);

                // org/python/antlr/Python.g:205:21: ( ^( Name ^( Id NAME ) ^( Ctx ^( Load ) ) ) )*
                while ( stream_NAME.hasNext() ) {
                    // org/python/antlr/Python.g:205:21: ^( Name ^( Id NAME ) ^( Ctx ^( Load ) ) )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                    // org/python/antlr/Python.g:205:28: ^( Id NAME )
                    {
                    CommonTree root_3 = (CommonTree)adaptor.nil();
                    root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(Id, "Id"), root_3);

                    adaptor.addChild(root_3, stream_NAME.next());

                    adaptor.addChild(root_2, root_3);
                    }
                    // org/python/antlr/Python.g:205:39: ^( Ctx ^( Load ) )
                    {
                    CommonTree root_3 = (CommonTree)adaptor.nil();
                    root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(Ctx, "Ctx"), root_3);

                    // org/python/antlr/Python.g:205:45: ^( Load )
                    {
                    CommonTree root_4 = (CommonTree)adaptor.nil();
                    root_4 = (CommonTree)adaptor.becomeRoot(adaptor.create(Load, "Load"), root_4);

                    adaptor.addChild(root_3, root_4);
                    }

                    adaptor.addChild(root_2, root_3);
                    }

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_NAME.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end decorators

    public static class parameters_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start parameters
    // org/python/antlr/Python.g:208:1: parameters : LPAREN ( varargslist )? RPAREN -> ( varargslist )? ;
    public final parameters_return parameters() throws RecognitionException {
        parameters_return retval = new parameters_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN21=null;
        Token RPAREN23=null;
        varargslist_return varargslist22 = null;


        CommonTree LPAREN21_tree=null;
        CommonTree RPAREN23_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_varargslist=new RewriteRuleSubtreeStream(adaptor,"rule varargslist");
        try {
            // org/python/antlr/Python.g:209:9: ( LPAREN ( varargslist )? RPAREN -> ( varargslist )? )
            // org/python/antlr/Python.g:209:9: LPAREN ( varargslist )? RPAREN
            {
            LPAREN21=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_parameters734); if (failed) return retval;
            if ( backtracking==0 ) stream_LPAREN.add(LPAREN21);

            // org/python/antlr/Python.g:209:16: ( varargslist )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==NAME||LA7_0==LPAREN||(LA7_0>=STAR && LA7_0<=DOUBLESTAR)) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // org/python/antlr/Python.g:209:17: varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_parameters737);
                    varargslist22=varargslist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varargslist.add(varargslist22.getTree());

                    }
                    break;

            }

            RPAREN23=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_parameters741); if (failed) return retval;
            if ( backtracking==0 ) stream_RPAREN.add(RPAREN23);


            // AST REWRITE
            // elements: varargslist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 210:5: -> ( varargslist )?
            {
                // org/python/antlr/Python.g:210:9: ( varargslist )?
                if ( stream_varargslist.hasNext() ) {
                    adaptor.addChild(root_0, stream_varargslist.next());

                }
                stream_varargslist.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end parameters

    public static class varargslist_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varargslist
    // org/python/antlr/Python.g:218:1: varargslist : ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )? -> ^( Arguments ( defparameter )* ) ^( Vararg ) ( ^( StarArgs $starargs) )? ^( KWArgs ( $kwargs)? ) ^( Defaults ) | STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= NAME -> ^( KWArgs $kwargs) );
    public final varargslist_return varargslist() throws RecognitionException {
        varargslist_return retval = new varargslist_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token starargs=null;
        Token kwargs=null;
        Token COMMA25=null;
        Token COMMA27=null;
        Token STAR28=null;
        Token COMMA29=null;
        Token DOUBLESTAR30=null;
        Token DOUBLESTAR31=null;
        Token STAR32=null;
        Token COMMA33=null;
        Token DOUBLESTAR34=null;
        Token DOUBLESTAR35=null;
        defparameter_return defparameter24 = null;

        defparameter_return defparameter26 = null;


        CommonTree starargs_tree=null;
        CommonTree kwargs_tree=null;
        CommonTree COMMA25_tree=null;
        CommonTree COMMA27_tree=null;
        CommonTree STAR28_tree=null;
        CommonTree COMMA29_tree=null;
        CommonTree DOUBLESTAR30_tree=null;
        CommonTree DOUBLESTAR31_tree=null;
        CommonTree STAR32_tree=null;
        CommonTree COMMA33_tree=null;
        CommonTree DOUBLESTAR34_tree=null;
        CommonTree DOUBLESTAR35_tree=null;
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOUBLESTAR=new RewriteRuleTokenStream(adaptor,"token DOUBLESTAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_defparameter=new RewriteRuleSubtreeStream(adaptor,"rule defparameter");
        try {
            // org/python/antlr/Python.g:219:9: ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )? -> ^( Arguments ( defparameter )* ) ^( Vararg ) ( ^( StarArgs $starargs) )? ^( KWArgs ( $kwargs)? ) ^( Defaults ) | STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= NAME -> ^( KWArgs $kwargs) )
            int alt13=3;
            switch ( input.LA(1) ) {
            case NAME:
            case LPAREN:
                {
                alt13=1;
                }
                break;
            case STAR:
                {
                alt13=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt13=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("218:1: varargslist : ( defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )? -> ^( Arguments ( defparameter )* ) ^( Vararg ) ( ^( StarArgs $starargs) )? ^( KWArgs ( $kwargs)? ) ^( Defaults ) | STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )? | DOUBLESTAR kwargs= NAME -> ^( KWArgs $kwargs) );", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // org/python/antlr/Python.g:219:9: defparameter ( options {greedy=true; } : COMMA defparameter )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )?
                    {
                    pushFollow(FOLLOW_defparameter_in_varargslist772);
                    defparameter24=defparameter();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_defparameter.add(defparameter24.getTree());
                    // org/python/antlr/Python.g:219:22: ( options {greedy=true; } : COMMA defparameter )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==COMMA) ) {
                            int LA8_1 = input.LA(2);

                            if ( (LA8_1==NAME||LA8_1==LPAREN) ) {
                                alt8=1;
                            }


                        }


                        switch (alt8) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:219:46: COMMA defparameter
                    	    {
                    	    COMMA25=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_varargslist782); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA25);

                    	    pushFollow(FOLLOW_defparameter_in_varargslist784);
                    	    defparameter26=defparameter();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_defparameter.add(defparameter26.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);

                    // org/python/antlr/Python.g:220:9: ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==COMMA) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // org/python/antlr/Python.g:220:10: COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )?
                            {
                            COMMA27=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_varargslist797); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA27);

                            // org/python/antlr/Python.g:221:13: ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )?
                            int alt10=3;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==STAR) ) {
                                alt10=1;
                            }
                            else if ( (LA10_0==DOUBLESTAR) ) {
                                alt10=2;
                            }
                            switch (alt10) {
                                case 1 :
                                    // org/python/antlr/Python.g:221:15: STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )?
                                    {
                                    STAR28=(Token)input.LT(1);
                                    match(input,STAR,FOLLOW_STAR_in_varargslist813); if (failed) return retval;
                                    if ( backtracking==0 ) stream_STAR.add(STAR28);

                                    starargs=(Token)input.LT(1);
                                    match(input,NAME,FOLLOW_NAME_in_varargslist817); if (failed) return retval;
                                    if ( backtracking==0 ) stream_NAME.add(starargs);

                                    // org/python/antlr/Python.g:221:34: ( COMMA DOUBLESTAR kwargs= NAME )?
                                    int alt9=2;
                                    int LA9_0 = input.LA(1);

                                    if ( (LA9_0==COMMA) ) {
                                        alt9=1;
                                    }
                                    switch (alt9) {
                                        case 1 :
                                            // org/python/antlr/Python.g:221:35: COMMA DOUBLESTAR kwargs= NAME
                                            {
                                            COMMA29=(Token)input.LT(1);
                                            match(input,COMMA,FOLLOW_COMMA_in_varargslist820); if (failed) return retval;
                                            if ( backtracking==0 ) stream_COMMA.add(COMMA29);

                                            DOUBLESTAR30=(Token)input.LT(1);
                                            match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist822); if (failed) return retval;
                                            if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR30);

                                            kwargs=(Token)input.LT(1);
                                            match(input,NAME,FOLLOW_NAME_in_varargslist826); if (failed) return retval;
                                            if ( backtracking==0 ) stream_NAME.add(kwargs);


                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // org/python/antlr/Python.g:222:15: DOUBLESTAR kwargs= NAME
                                    {
                                    DOUBLESTAR31=(Token)input.LT(1);
                                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist844); if (failed) return retval;
                                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR31);

                                    kwargs=(Token)input.LT(1);
                                    match(input,NAME,FOLLOW_NAME_in_varargslist848); if (failed) return retval;
                                    if ( backtracking==0 ) stream_NAME.add(kwargs);


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: kwargs, starargs, defparameter
                    // token labels: kwargs, starargs
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_kwargs=new RewriteRuleTokenStream(adaptor,"token kwargs",kwargs);
                    RewriteRuleTokenStream stream_starargs=new RewriteRuleTokenStream(adaptor,"token starargs",starargs);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 224:12: -> ^( Arguments ( defparameter )* ) ^( Vararg ) ( ^( StarArgs $starargs) )? ^( KWArgs ( $kwargs)? ) ^( Defaults )
                    {
                        // org/python/antlr/Python.g:224:15: ^( Arguments ( defparameter )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Arguments, "Arguments"), root_1);

                        // org/python/antlr/Python.g:224:27: ( defparameter )*
                        while ( stream_defparameter.hasNext() ) {
                            adaptor.addChild(root_1, stream_defparameter.next());

                        }
                        stream_defparameter.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:224:42: ^( Vararg )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Vararg, "Vararg"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:224:52: ( ^( StarArgs $starargs) )?
                        if ( stream_starargs.hasNext() ) {
                            // org/python/antlr/Python.g:224:52: ^( StarArgs $starargs)
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                            adaptor.addChild(root_1, stream_starargs.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_starargs.reset();
                        // org/python/antlr/Python.g:224:75: ^( KWArgs ( $kwargs)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                        // org/python/antlr/Python.g:224:84: ( $kwargs)?
                        if ( stream_kwargs.hasNext() ) {
                            adaptor.addChild(root_1, stream_kwargs.next());

                        }
                        stream_kwargs.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:224:94: ^( Defaults )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Defaults, "Defaults"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:225:9: STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )?
                    {
                    STAR32=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_varargslist917); if (failed) return retval;
                    if ( backtracking==0 ) stream_STAR.add(STAR32);

                    starargs=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_varargslist921); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(starargs);

                    // org/python/antlr/Python.g:225:28: ( COMMA DOUBLESTAR kwargs= NAME )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==COMMA) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // org/python/antlr/Python.g:225:29: COMMA DOUBLESTAR kwargs= NAME
                            {
                            COMMA33=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_varargslist924); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA33);

                            DOUBLESTAR34=(Token)input.LT(1);
                            match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist926); if (failed) return retval;
                            if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR34);

                            kwargs=(Token)input.LT(1);
                            match(input,NAME,FOLLOW_NAME_in_varargslist930); if (failed) return retval;
                            if ( backtracking==0 ) stream_NAME.add(kwargs);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: kwargs, starargs
                    // token labels: kwargs, starargs
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_kwargs=new RewriteRuleTokenStream(adaptor,"token kwargs",kwargs);
                    RewriteRuleTokenStream stream_starargs=new RewriteRuleTokenStream(adaptor,"token starargs",starargs);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 225:60: -> ^( StarArgs $starargs) ( ^( KWArgs $kwargs) )?
                    {
                        // org/python/antlr/Python.g:225:63: ^( StarArgs $starargs)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                        adaptor.addChild(root_1, stream_starargs.next());

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:225:85: ( ^( KWArgs $kwargs) )?
                        if ( stream_kwargs.hasNext() ) {
                            // org/python/antlr/Python.g:225:85: ^( KWArgs $kwargs)
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                            adaptor.addChild(root_1, stream_kwargs.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_kwargs.reset();

                    }

                    }

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:226:9: DOUBLESTAR kwargs= NAME
                    {
                    DOUBLESTAR35=(Token)input.LT(1);
                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist959); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR35);

                    kwargs=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_varargslist963); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(kwargs);


                    // AST REWRITE
                    // elements: kwargs
                    // token labels: kwargs
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_kwargs=new RewriteRuleTokenStream(adaptor,"token kwargs",kwargs);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 226:32: -> ^( KWArgs $kwargs)
                    {
                        // org/python/antlr/Python.g:226:35: ^( KWArgs $kwargs)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                        adaptor.addChild(root_1, stream_kwargs.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end varargslist

    public static class defparameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defparameter
    // org/python/antlr/Python.g:231:1: defparameter : fpdef ( ASSIGN expr )? -> ^( Args fpdef ) ;
    public final defparameter_return defparameter() throws RecognitionException {
        defparameter_return retval = new defparameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSIGN37=null;
        fpdef_return fpdef36 = null;

        expr_return expr38 = null;


        CommonTree ASSIGN37_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_fpdef=new RewriteRuleSubtreeStream(adaptor,"rule fpdef");
        try {
            // org/python/antlr/Python.g:232:9: ( fpdef ( ASSIGN expr )? -> ^( Args fpdef ) )
            // org/python/antlr/Python.g:232:9: fpdef ( ASSIGN expr )?
            {
            pushFollow(FOLLOW_fpdef_in_defparameter994);
            fpdef36=fpdef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_fpdef.add(fpdef36.getTree());
            // org/python/antlr/Python.g:232:15: ( ASSIGN expr )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==ASSIGN) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // org/python/antlr/Python.g:232:16: ASSIGN expr
                    {
                    ASSIGN37=(Token)input.LT(1);
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_defparameter997); if (failed) return retval;
                    if ( backtracking==0 ) stream_ASSIGN.add(ASSIGN37);

                    pushFollow(FOLLOW_expr_in_defparameter999);
                    expr38=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr38.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: fpdef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 232:30: -> ^( Args fpdef )
            {
                // org/python/antlr/Python.g:232:33: ^( Args fpdef )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Args, "Args"), root_1);

                adaptor.addChild(root_1, stream_fpdef.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end defparameter

    public static class fpdef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fpdef
    // org/python/antlr/Python.g:235:1: fpdef : ( NAME -> ^( Name ^( Id NAME ) ^( Ctx ^( Param ) ) ) | LPAREN fplist RPAREN -> fplist );
    public final fpdef_return fpdef() throws RecognitionException {
        fpdef_return retval = new fpdef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NAME39=null;
        Token LPAREN40=null;
        Token RPAREN42=null;
        fplist_return fplist41 = null;


        CommonTree NAME39_tree=null;
        CommonTree LPAREN40_tree=null;
        CommonTree RPAREN42_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_fplist=new RewriteRuleSubtreeStream(adaptor,"rule fplist");
        try {
            // org/python/antlr/Python.g:236:9: ( NAME -> ^( Name ^( Id NAME ) ^( Ctx ^( Param ) ) ) | LPAREN fplist RPAREN -> fplist )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==NAME) ) {
                alt15=1;
            }
            else if ( (LA15_0==LPAREN) ) {
                alt15=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("235:1: fpdef : ( NAME -> ^( Name ^( Id NAME ) ^( Ctx ^( Param ) ) ) | LPAREN fplist RPAREN -> fplist );", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // org/python/antlr/Python.g:236:9: NAME
                    {
                    NAME39=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_fpdef1028); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(NAME39);


                    // AST REWRITE
                    // elements: NAME
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 236:14: -> ^( Name ^( Id NAME ) ^( Ctx ^( Param ) ) )
                    {
                        // org/python/antlr/Python.g:236:17: ^( Name ^( Id NAME ) ^( Ctx ^( Param ) ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_1);

                        // org/python/antlr/Python.g:236:24: ^( Id NAME )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Id, "Id"), root_2);

                        adaptor.addChild(root_2, stream_NAME.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        // org/python/antlr/Python.g:236:35: ^( Ctx ^( Param ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Ctx, "Ctx"), root_2);

                        // org/python/antlr/Python.g:236:41: ^( Param )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(Param, "Param"), root_3);

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:237:6: LPAREN fplist RPAREN
                    {
                    LPAREN40=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_fpdef1056); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN40);

                    pushFollow(FOLLOW_fplist_in_fpdef1058);
                    fplist41=fplist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_fplist.add(fplist41.getTree());
                    RPAREN42=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_fpdef1060); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN42);


                    // AST REWRITE
                    // elements: fplist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 237:27: -> fplist
                    {
                        adaptor.addChild(root_0, stream_fplist.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fpdef

    public static class fplist_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fplist
    // org/python/antlr/Python.g:242:1: fplist : fpdef ( options {greedy=true; } : COMMA fpdef )* ( COMMA )? -> ^( Tuple ( fpdef )* ) ;
    public final fplist_return fplist() throws RecognitionException {
        fplist_return retval = new fplist_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA44=null;
        Token COMMA46=null;
        fpdef_return fpdef43 = null;

        fpdef_return fpdef45 = null;


        CommonTree COMMA44_tree=null;
        CommonTree COMMA46_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_fpdef=new RewriteRuleSubtreeStream(adaptor,"rule fpdef");
        try {
            // org/python/antlr/Python.g:243:9: ( fpdef ( options {greedy=true; } : COMMA fpdef )* ( COMMA )? -> ^( Tuple ( fpdef )* ) )
            // org/python/antlr/Python.g:243:9: fpdef ( options {greedy=true; } : COMMA fpdef )* ( COMMA )?
            {
            pushFollow(FOLLOW_fpdef_in_fplist1083);
            fpdef43=fpdef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_fpdef.add(fpdef43.getTree());
            // org/python/antlr/Python.g:243:15: ( options {greedy=true; } : COMMA fpdef )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==COMMA) ) {
                    int LA16_1 = input.LA(2);

                    if ( (LA16_1==NAME||LA16_1==LPAREN) ) {
                        alt16=1;
                    }


                }


                switch (alt16) {
            	case 1 :
            	    // org/python/antlr/Python.g:243:39: COMMA fpdef
            	    {
            	    COMMA44=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_fplist1093); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA44);

            	    pushFollow(FOLLOW_fpdef_in_fplist1095);
            	    fpdef45=fpdef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_fpdef.add(fpdef45.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // org/python/antlr/Python.g:243:53: ( COMMA )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==COMMA) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // org/python/antlr/Python.g:243:54: COMMA
                    {
                    COMMA46=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_fplist1100); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA46);


                    }
                    break;

            }


            // AST REWRITE
            // elements: fpdef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 244:5: -> ^( Tuple ( fpdef )* )
            {
                // org/python/antlr/Python.g:244:8: ^( Tuple ( fpdef )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Tuple, "Tuple"), root_1);

                // org/python/antlr/Python.g:244:16: ( fpdef )*
                while ( stream_fpdef.hasNext() ) {
                    adaptor.addChild(root_1, stream_fpdef.next());

                }
                stream_fpdef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fplist

    public static class stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start stmt
    // org/python/antlr/Python.g:247:1: stmt : ( simple_stmt | compound_stmt );
    public final stmt_return stmt() throws RecognitionException {
        stmt_return retval = new stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        simple_stmt_return simple_stmt47 = null;

        compound_stmt_return compound_stmt48 = null;



        try {
            // org/python/antlr/Python.g:247:7: ( simple_stmt | compound_stmt )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==NAME||LA18_0==LPAREN||(LA18_0>=PLUS && LA18_0<=MINUS)||(LA18_0>=TILDE && LA18_0<=LBRACK)||LA18_0==LCURLY||(LA18_0>=BACKQUOTE && LA18_0<=STRING)||(LA18_0>=148 && LA18_0<=157)||(LA18_0>=159 && LA18_0<=160)||LA18_0==162) ) {
                alt18=1;
            }
            else if ( (LA18_0==ATSIGN||LA18_0==147||LA18_0==163||(LA18_0>=165 && LA18_0<=166)||(LA18_0>=168 && LA18_0<=169)||LA18_0==177) ) {
                alt18=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("247:1: stmt : ( simple_stmt | compound_stmt );", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // org/python/antlr/Python.g:247:7: simple_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_stmt1124);
                    simple_stmt47=simple_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, simple_stmt47.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:248:4: compound_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_stmt_in_stmt1129);
                    compound_stmt48=compound_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compound_stmt48.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end stmt

    public static class simple_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start simple_stmt
    // org/python/antlr/Python.g:251:1: simple_stmt : small_stmt ( options {greedy=true; } : SEMI small_stmt )* ( SEMI )? NEWLINE -> ( small_stmt )* ;
    public final simple_stmt_return simple_stmt() throws RecognitionException {
        simple_stmt_return retval = new simple_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEMI50=null;
        Token SEMI52=null;
        Token NEWLINE53=null;
        small_stmt_return small_stmt49 = null;

        small_stmt_return small_stmt51 = null;


        CommonTree SEMI50_tree=null;
        CommonTree SEMI52_tree=null;
        CommonTree NEWLINE53_tree=null;
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_small_stmt=new RewriteRuleSubtreeStream(adaptor,"rule small_stmt");
        try {
            // org/python/antlr/Python.g:252:9: ( small_stmt ( options {greedy=true; } : SEMI small_stmt )* ( SEMI )? NEWLINE -> ( small_stmt )* )
            // org/python/antlr/Python.g:252:9: small_stmt ( options {greedy=true; } : SEMI small_stmt )* ( SEMI )? NEWLINE
            {
            pushFollow(FOLLOW_small_stmt_in_simple_stmt1145);
            small_stmt49=small_stmt();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_small_stmt.add(small_stmt49.getTree());
            // org/python/antlr/Python.g:252:20: ( options {greedy=true; } : SEMI small_stmt )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==SEMI) ) {
                    int LA19_1 = input.LA(2);

                    if ( (LA19_1==NAME||LA19_1==LPAREN||(LA19_1>=PLUS && LA19_1<=MINUS)||(LA19_1>=TILDE && LA19_1<=LBRACK)||LA19_1==LCURLY||(LA19_1>=BACKQUOTE && LA19_1<=STRING)||(LA19_1>=148 && LA19_1<=157)||(LA19_1>=159 && LA19_1<=160)||LA19_1==162) ) {
                        alt19=1;
                    }


                }


                switch (alt19) {
            	case 1 :
            	    // org/python/antlr/Python.g:252:44: SEMI small_stmt
            	    {
            	    SEMI50=(Token)input.LT(1);
            	    match(input,SEMI,FOLLOW_SEMI_in_simple_stmt1155); if (failed) return retval;
            	    if ( backtracking==0 ) stream_SEMI.add(SEMI50);

            	    pushFollow(FOLLOW_small_stmt_in_simple_stmt1157);
            	    small_stmt51=small_stmt();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_small_stmt.add(small_stmt51.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);

            // org/python/antlr/Python.g:252:62: ( SEMI )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==SEMI) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // org/python/antlr/Python.g:252:63: SEMI
                    {
                    SEMI52=(Token)input.LT(1);
                    match(input,SEMI,FOLLOW_SEMI_in_simple_stmt1162); if (failed) return retval;
                    if ( backtracking==0 ) stream_SEMI.add(SEMI52);


                    }
                    break;

            }

            NEWLINE53=(Token)input.LT(1);
            match(input,NEWLINE,FOLLOW_NEWLINE_in_simple_stmt1166); if (failed) return retval;
            if ( backtracking==0 ) stream_NEWLINE.add(NEWLINE53);


            // AST REWRITE
            // elements: small_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 253:5: -> ( small_stmt )*
            {
                // org/python/antlr/Python.g:253:8: ( small_stmt )*
                while ( stream_small_stmt.hasNext() ) {
                    adaptor.addChild(root_0, stream_small_stmt.next());

                }
                stream_small_stmt.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end simple_stmt

    public static class small_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start small_stmt
    // org/python/antlr/Python.g:256:1: small_stmt : ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt );
    public final small_stmt_return small_stmt() throws RecognitionException {
        small_stmt_return retval = new small_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expr_stmt_return expr_stmt54 = null;

        print_stmt_return print_stmt55 = null;

        del_stmt_return del_stmt56 = null;

        pass_stmt_return pass_stmt57 = null;

        flow_stmt_return flow_stmt58 = null;

        import_stmt_return import_stmt59 = null;

        global_stmt_return global_stmt60 = null;

        exec_stmt_return exec_stmt61 = null;

        assert_stmt_return assert_stmt62 = null;



        try {
            // org/python/antlr/Python.g:256:13: ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt )
            int alt21=9;
            switch ( input.LA(1) ) {
            case NAME:
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
                {
                alt21=1;
                }
                break;
            case 148:
                {
                alt21=2;
                }
                break;
            case 149:
                {
                alt21=3;
                }
                break;
            case 150:
                {
                alt21=4;
                }
                break;
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
                {
                alt21=5;
                }
                break;
            case 156:
            case 157:
                {
                alt21=6;
                }
                break;
            case 159:
                {
                alt21=7;
                }
                break;
            case 160:
                {
                alt21=8;
                }
                break;
            case 162:
                {
                alt21=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("256:1: small_stmt : ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt );", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // org/python/antlr/Python.g:256:13: expr_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_stmt_in_small_stmt1184);
                    expr_stmt54=expr_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr_stmt54.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:257:4: print_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_print_stmt_in_small_stmt1189);
                    print_stmt55=print_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, print_stmt55.getTree());

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:258:4: del_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_del_stmt_in_small_stmt1194);
                    del_stmt56=del_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, del_stmt56.getTree());

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:259:4: pass_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pass_stmt_in_small_stmt1199);
                    pass_stmt57=pass_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, pass_stmt57.getTree());

                    }
                    break;
                case 5 :
                    // org/python/antlr/Python.g:260:4: flow_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_flow_stmt_in_small_stmt1204);
                    flow_stmt58=flow_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, flow_stmt58.getTree());

                    }
                    break;
                case 6 :
                    // org/python/antlr/Python.g:261:4: import_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_import_stmt_in_small_stmt1209);
                    import_stmt59=import_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, import_stmt59.getTree());

                    }
                    break;
                case 7 :
                    // org/python/antlr/Python.g:262:4: global_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_global_stmt_in_small_stmt1214);
                    global_stmt60=global_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, global_stmt60.getTree());

                    }
                    break;
                case 8 :
                    // org/python/antlr/Python.g:263:4: exec_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_exec_stmt_in_small_stmt1219);
                    exec_stmt61=exec_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, exec_stmt61.getTree());

                    }
                    break;
                case 9 :
                    // org/python/antlr/Python.g:264:4: assert_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_assert_stmt_in_small_stmt1224);
                    assert_stmt62=assert_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, assert_stmt62.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end small_stmt

    public static class expr_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expr_stmt
    // org/python/antlr/Python.g:282:1: expr_stmt : lhs= exprlist ( augassign rhs= exprlist -> ^( augassign ^( Targets ^( ^( Ctx ^( Store ) ) ) ) ^( Value $rhs) ) | -> ^( Expr ^( Value $lhs) ) ) ;
    public final expr_stmt_return expr_stmt() throws RecognitionException {
        expr_stmt_return retval = new expr_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        exprlist_return lhs = null;

        exprlist_return rhs = null;

        augassign_return augassign63 = null;


        RewriteRuleSubtreeStream stream_augassign=new RewriteRuleSubtreeStream(adaptor,"rule augassign");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        try {
            // org/python/antlr/Python.g:283:7: (lhs= exprlist ( augassign rhs= exprlist -> ^( augassign ^( Targets ^( ^( Ctx ^( Store ) ) ) ) ^( Value $rhs) ) | -> ^( Expr ^( Value $lhs) ) ) )
            // org/python/antlr/Python.g:283:7: lhs= exprlist ( augassign rhs= exprlist -> ^( augassign ^( Targets ^( ^( Ctx ^( Store ) ) ) ) ^( Value $rhs) ) | -> ^( Expr ^( Value $lhs) ) )
            {
            pushFollow(FOLLOW_exprlist_in_expr_stmt1245);
            lhs=exprlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprlist.add(lhs.getTree());
            // org/python/antlr/Python.g:284:9: ( augassign rhs= exprlist -> ^( augassign ^( Targets ^( ^( Ctx ^( Store ) ) ) ) ^( Value $rhs) ) | -> ^( Expr ^( Value $lhs) ) )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==ASSIGN||(LA22_0>=PLUSEQUAL && LA22_0<=DOUBLESLASHEQUAL)) ) {
                alt22=1;
            }
            else if ( (LA22_0==EOF||LA22_0==NEWLINE||LA22_0==SEMI) ) {
                alt22=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("284:9: ( augassign rhs= exprlist -> ^( augassign ^( Targets ^( ^( Ctx ^( Store ) ) ) ) ^( Value $rhs) ) | -> ^( Expr ^( Value $lhs) ) )", 22, 0, input);

                throw nvae;
            }
            switch (alt22) {
                case 1 :
                    // org/python/antlr/Python.g:284:10: augassign rhs= exprlist
                    {
                    pushFollow(FOLLOW_augassign_in_expr_stmt1256);
                    augassign63=augassign();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_augassign.add(augassign63.getTree());
                    pushFollow(FOLLOW_exprlist_in_expr_stmt1260);
                    rhs=exprlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_exprlist.add(rhs.getTree());

                    // AST REWRITE
                    // elements: augassign, rhs
                    // token labels: 
                    // rule labels: retval, rhs
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"token rhs",rhs!=null?rhs.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 284:33: -> ^( augassign ^( Targets ^( ^( Ctx ^( Store ) ) ) ) ^( Value $rhs) )
                    {
                        // org/python/antlr/Python.g:284:36: ^( augassign ^( Targets ^( ^( Ctx ^( Store ) ) ) ) ^( Value $rhs) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_augassign.nextNode(), root_1);

                        // org/python/antlr/Python.g:284:48: ^( Targets ^( ^( Ctx ^( Store ) ) ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Targets, "Targets"), root_2);

                        // org/python/antlr/Python.g:284:58: ^( ^( Ctx ^( Store ) ) )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot(((CommonTree)lhs.tree), root_3);

                        // org/python/antlr/Python.g:284:72: ^( Ctx ^( Store ) )
                        {
                        CommonTree root_4 = (CommonTree)adaptor.nil();
                        root_4 = (CommonTree)adaptor.becomeRoot(adaptor.create(Ctx, "Ctx"), root_4);

                        // org/python/antlr/Python.g:284:78: ^( Store )
                        {
                        CommonTree root_5 = (CommonTree)adaptor.nil();
                        root_5 = (CommonTree)adaptor.becomeRoot(adaptor.create(Store, "Store"), root_5);

                        adaptor.addChild(root_4, root_5);
                        }

                        adaptor.addChild(root_3, root_4);
                        }

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        // org/python/antlr/Python.g:284:92: ^( Value $rhs)
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Value, "Value"), root_2);

                        adaptor.addChild(root_2, stream_rhs.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:285:33: 
                    {

                    // AST REWRITE
                    // elements: lhs
                    // token labels: 
                    // rule labels: retval, lhs
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"token lhs",lhs!=null?lhs.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 285:33: -> ^( Expr ^( Value $lhs) )
                    {
                        // org/python/antlr/Python.g:285:36: ^( Expr ^( Value $lhs) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Expr, "Expr"), root_1);

                        // org/python/antlr/Python.g:285:43: ^( Value $lhs)
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Value, "Value"), root_2);

                        adaptor.addChild(root_2, stream_lhs.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr_stmt

    public static class augassign_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start augassign
    // org/python/antlr/Python.g:289:1: augassign : ( PLUSEQUAL | MINUSEQUAL | STAREQUAL | SLASHEQUAL | PERCENTEQUAL | AMPEREQUAL | VBAREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL | ASSIGN -> ^( Assign ) );
    public final augassign_return augassign() throws RecognitionException {
        augassign_return retval = new augassign_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUSEQUAL64=null;
        Token MINUSEQUAL65=null;
        Token STAREQUAL66=null;
        Token SLASHEQUAL67=null;
        Token PERCENTEQUAL68=null;
        Token AMPEREQUAL69=null;
        Token VBAREQUAL70=null;
        Token CIRCUMFLEXEQUAL71=null;
        Token LEFTSHIFTEQUAL72=null;
        Token RIGHTSHIFTEQUAL73=null;
        Token DOUBLESTAREQUAL74=null;
        Token DOUBLESLASHEQUAL75=null;
        Token ASSIGN76=null;

        CommonTree PLUSEQUAL64_tree=null;
        CommonTree MINUSEQUAL65_tree=null;
        CommonTree STAREQUAL66_tree=null;
        CommonTree SLASHEQUAL67_tree=null;
        CommonTree PERCENTEQUAL68_tree=null;
        CommonTree AMPEREQUAL69_tree=null;
        CommonTree VBAREQUAL70_tree=null;
        CommonTree CIRCUMFLEXEQUAL71_tree=null;
        CommonTree LEFTSHIFTEQUAL72_tree=null;
        CommonTree RIGHTSHIFTEQUAL73_tree=null;
        CommonTree DOUBLESTAREQUAL74_tree=null;
        CommonTree DOUBLESLASHEQUAL75_tree=null;
        CommonTree ASSIGN76_tree=null;
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");

        try {
            // org/python/antlr/Python.g:290:10: ( PLUSEQUAL | MINUSEQUAL | STAREQUAL | SLASHEQUAL | PERCENTEQUAL | AMPEREQUAL | VBAREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL | ASSIGN -> ^( Assign ) )
            int alt23=13;
            switch ( input.LA(1) ) {
            case PLUSEQUAL:
                {
                alt23=1;
                }
                break;
            case MINUSEQUAL:
                {
                alt23=2;
                }
                break;
            case STAREQUAL:
                {
                alt23=3;
                }
                break;
            case SLASHEQUAL:
                {
                alt23=4;
                }
                break;
            case PERCENTEQUAL:
                {
                alt23=5;
                }
                break;
            case AMPEREQUAL:
                {
                alt23=6;
                }
                break;
            case VBAREQUAL:
                {
                alt23=7;
                }
                break;
            case CIRCUMFLEXEQUAL:
                {
                alt23=8;
                }
                break;
            case LEFTSHIFTEQUAL:
                {
                alt23=9;
                }
                break;
            case RIGHTSHIFTEQUAL:
                {
                alt23=10;
                }
                break;
            case DOUBLESTAREQUAL:
                {
                alt23=11;
                }
                break;
            case DOUBLESLASHEQUAL:
                {
                alt23=12;
                }
                break;
            case ASSIGN:
                {
                alt23=13;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("289:1: augassign : ( PLUSEQUAL | MINUSEQUAL | STAREQUAL | SLASHEQUAL | PERCENTEQUAL | AMPEREQUAL | VBAREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL | ASSIGN -> ^( Assign ) );", 23, 0, input);

                throw nvae;
            }

            switch (alt23) {
                case 1 :
                    // org/python/antlr/Python.g:290:10: PLUSEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PLUSEQUAL64=(Token)input.LT(1);
                    match(input,PLUSEQUAL,FOLLOW_PLUSEQUAL_in_augassign1369); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PLUSEQUAL64_tree = (CommonTree)adaptor.create(PLUSEQUAL64);
                    adaptor.addChild(root_0, PLUSEQUAL64_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:291:4: MINUSEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MINUSEQUAL65=(Token)input.LT(1);
                    match(input,MINUSEQUAL,FOLLOW_MINUSEQUAL_in_augassign1374); if (failed) return retval;
                    if ( backtracking==0 ) {
                    MINUSEQUAL65_tree = (CommonTree)adaptor.create(MINUSEQUAL65);
                    adaptor.addChild(root_0, MINUSEQUAL65_tree);
                    }

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:292:4: STAREQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STAREQUAL66=(Token)input.LT(1);
                    match(input,STAREQUAL,FOLLOW_STAREQUAL_in_augassign1379); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STAREQUAL66_tree = (CommonTree)adaptor.create(STAREQUAL66);
                    adaptor.addChild(root_0, STAREQUAL66_tree);
                    }

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:293:4: SLASHEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SLASHEQUAL67=(Token)input.LT(1);
                    match(input,SLASHEQUAL,FOLLOW_SLASHEQUAL_in_augassign1384); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SLASHEQUAL67_tree = (CommonTree)adaptor.create(SLASHEQUAL67);
                    adaptor.addChild(root_0, SLASHEQUAL67_tree);
                    }

                    }
                    break;
                case 5 :
                    // org/python/antlr/Python.g:294:4: PERCENTEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PERCENTEQUAL68=(Token)input.LT(1);
                    match(input,PERCENTEQUAL,FOLLOW_PERCENTEQUAL_in_augassign1389); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PERCENTEQUAL68_tree = (CommonTree)adaptor.create(PERCENTEQUAL68);
                    adaptor.addChild(root_0, PERCENTEQUAL68_tree);
                    }

                    }
                    break;
                case 6 :
                    // org/python/antlr/Python.g:295:4: AMPEREQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AMPEREQUAL69=(Token)input.LT(1);
                    match(input,AMPEREQUAL,FOLLOW_AMPEREQUAL_in_augassign1394); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AMPEREQUAL69_tree = (CommonTree)adaptor.create(AMPEREQUAL69);
                    adaptor.addChild(root_0, AMPEREQUAL69_tree);
                    }

                    }
                    break;
                case 7 :
                    // org/python/antlr/Python.g:296:4: VBAREQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VBAREQUAL70=(Token)input.LT(1);
                    match(input,VBAREQUAL,FOLLOW_VBAREQUAL_in_augassign1399); if (failed) return retval;
                    if ( backtracking==0 ) {
                    VBAREQUAL70_tree = (CommonTree)adaptor.create(VBAREQUAL70);
                    adaptor.addChild(root_0, VBAREQUAL70_tree);
                    }

                    }
                    break;
                case 8 :
                    // org/python/antlr/Python.g:297:4: CIRCUMFLEXEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CIRCUMFLEXEQUAL71=(Token)input.LT(1);
                    match(input,CIRCUMFLEXEQUAL,FOLLOW_CIRCUMFLEXEQUAL_in_augassign1404); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CIRCUMFLEXEQUAL71_tree = (CommonTree)adaptor.create(CIRCUMFLEXEQUAL71);
                    adaptor.addChild(root_0, CIRCUMFLEXEQUAL71_tree);
                    }

                    }
                    break;
                case 9 :
                    // org/python/antlr/Python.g:298:4: LEFTSHIFTEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFTSHIFTEQUAL72=(Token)input.LT(1);
                    match(input,LEFTSHIFTEQUAL,FOLLOW_LEFTSHIFTEQUAL_in_augassign1409); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LEFTSHIFTEQUAL72_tree = (CommonTree)adaptor.create(LEFTSHIFTEQUAL72);
                    adaptor.addChild(root_0, LEFTSHIFTEQUAL72_tree);
                    }

                    }
                    break;
                case 10 :
                    // org/python/antlr/Python.g:299:4: RIGHTSHIFTEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHTSHIFTEQUAL73=(Token)input.LT(1);
                    match(input,RIGHTSHIFTEQUAL,FOLLOW_RIGHTSHIFTEQUAL_in_augassign1414); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RIGHTSHIFTEQUAL73_tree = (CommonTree)adaptor.create(RIGHTSHIFTEQUAL73);
                    adaptor.addChild(root_0, RIGHTSHIFTEQUAL73_tree);
                    }

                    }
                    break;
                case 11 :
                    // org/python/antlr/Python.g:300:4: DOUBLESTAREQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DOUBLESTAREQUAL74=(Token)input.LT(1);
                    match(input,DOUBLESTAREQUAL,FOLLOW_DOUBLESTAREQUAL_in_augassign1419); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DOUBLESTAREQUAL74_tree = (CommonTree)adaptor.create(DOUBLESTAREQUAL74);
                    adaptor.addChild(root_0, DOUBLESTAREQUAL74_tree);
                    }

                    }
                    break;
                case 12 :
                    // org/python/antlr/Python.g:301:4: DOUBLESLASHEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DOUBLESLASHEQUAL75=(Token)input.LT(1);
                    match(input,DOUBLESLASHEQUAL,FOLLOW_DOUBLESLASHEQUAL_in_augassign1424); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DOUBLESLASHEQUAL75_tree = (CommonTree)adaptor.create(DOUBLESLASHEQUAL75);
                    adaptor.addChild(root_0, DOUBLESLASHEQUAL75_tree);
                    }

                    }
                    break;
                case 13 :
                    // org/python/antlr/Python.g:302:8: ASSIGN
                    {
                    ASSIGN76=(Token)input.LT(1);
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_augassign1433); if (failed) return retval;
                    if ( backtracking==0 ) stream_ASSIGN.add(ASSIGN76);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 302:15: -> ^( Assign )
                    {
                        // org/python/antlr/Python.g:302:18: ^( Assign )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Assign, "Assign"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end augassign

    public static class print_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start print_stmt
    // org/python/antlr/Python.g:307:1: print_stmt : 'print' ( testlist | RIGHTSHIFT testlist )? -> ^( Print testlist ) ;
    public final print_stmt_return print_stmt() throws RecognitionException {
        print_stmt_return retval = new print_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal77=null;
        Token RIGHTSHIFT79=null;
        testlist_return testlist78 = null;

        testlist_return testlist80 = null;


        CommonTree string_literal77_tree=null;
        CommonTree RIGHTSHIFT79_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_RIGHTSHIFT=new RewriteRuleTokenStream(adaptor,"token RIGHTSHIFT");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // org/python/antlr/Python.g:308:9: ( 'print' ( testlist | RIGHTSHIFT testlist )? -> ^( Print testlist ) )
            // org/python/antlr/Python.g:308:9: 'print' ( testlist | RIGHTSHIFT testlist )?
            {
            string_literal77=(Token)input.LT(1);
            match(input,148,FOLLOW_148_in_print_stmt1458); if (failed) return retval;
            if ( backtracking==0 ) stream_148.add(string_literal77);

            // org/python/antlr/Python.g:309:5: ( testlist | RIGHTSHIFT testlist )?
            int alt24=3;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==NAME||LA24_0==LPAREN||(LA24_0>=PLUS && LA24_0<=MINUS)||(LA24_0>=TILDE && LA24_0<=LBRACK)||LA24_0==LCURLY||(LA24_0>=BACKQUOTE && LA24_0<=STRING)||LA24_0==174||LA24_0==176) ) {
                alt24=1;
            }
            else if ( (LA24_0==RIGHTSHIFT) ) {
                alt24=2;
            }
            switch (alt24) {
                case 1 :
                    // org/python/antlr/Python.g:309:9: testlist
                    {
                    pushFollow(FOLLOW_testlist_in_print_stmt1468);
                    testlist78=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_testlist.add(testlist78.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:310:9: RIGHTSHIFT testlist
                    {
                    RIGHTSHIFT79=(Token)input.LT(1);
                    match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_print_stmt1478); if (failed) return retval;
                    if ( backtracking==0 ) stream_RIGHTSHIFT.add(RIGHTSHIFT79);

                    pushFollow(FOLLOW_testlist_in_print_stmt1480);
                    testlist80=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_testlist.add(testlist80.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 312:3: -> ^( Print testlist )
            {
                // org/python/antlr/Python.g:312:6: ^( Print testlist )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Print, "Print"), root_1);

                adaptor.addChild(root_1, stream_testlist.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end print_stmt

    public static class del_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start del_stmt
    // org/python/antlr/Python.g:315:1: del_stmt : 'del' exprlist ;
    public final del_stmt_return del_stmt() throws RecognitionException {
        del_stmt_return retval = new del_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal81=null;
        exprlist_return exprlist82 = null;


        CommonTree string_literal81_tree=null;

        try {
            // org/python/antlr/Python.g:315:11: ( 'del' exprlist )
            // org/python/antlr/Python.g:315:11: 'del' exprlist
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal81=(Token)input.LT(1);
            match(input,149,FOLLOW_149_in_del_stmt1510); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal81_tree = (CommonTree)adaptor.create(string_literal81);
            adaptor.addChild(root_0, string_literal81_tree);
            }
            pushFollow(FOLLOW_exprlist_in_del_stmt1512);
            exprlist82=exprlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprlist82.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end del_stmt

    public static class pass_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pass_stmt
    // org/python/antlr/Python.g:318:1: pass_stmt : 'pass' -> ^( Pass ) ;
    public final pass_stmt_return pass_stmt() throws RecognitionException {
        pass_stmt_return retval = new pass_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal83=null;

        CommonTree string_literal83_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");

        try {
            // org/python/antlr/Python.g:318:12: ( 'pass' -> ^( Pass ) )
            // org/python/antlr/Python.g:318:12: 'pass'
            {
            string_literal83=(Token)input.LT(1);
            match(input,150,FOLLOW_150_in_pass_stmt1521); if (failed) return retval;
            if ( backtracking==0 ) stream_150.add(string_literal83);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 318:19: -> ^( Pass )
            {
                // org/python/antlr/Python.g:318:22: ^( Pass )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Pass, "Pass"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end pass_stmt

    public static class flow_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start flow_stmt
    // org/python/antlr/Python.g:321:1: flow_stmt : ( break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt );
    public final flow_stmt_return flow_stmt() throws RecognitionException {
        flow_stmt_return retval = new flow_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        break_stmt_return break_stmt84 = null;

        continue_stmt_return continue_stmt85 = null;

        return_stmt_return return_stmt86 = null;

        raise_stmt_return raise_stmt87 = null;

        yield_stmt_return yield_stmt88 = null;



        try {
            // org/python/antlr/Python.g:321:12: ( break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt )
            int alt25=5;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt25=1;
                }
                break;
            case 152:
                {
                alt25=2;
                }
                break;
            case 153:
                {
                alt25=3;
                }
                break;
            case 155:
                {
                alt25=4;
                }
                break;
            case 154:
                {
                alt25=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("321:1: flow_stmt : ( break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt );", 25, 0, input);

                throw nvae;
            }

            switch (alt25) {
                case 1 :
                    // org/python/antlr/Python.g:321:12: break_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_break_stmt_in_flow_stmt1536);
                    break_stmt84=break_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, break_stmt84.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:322:4: continue_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_continue_stmt_in_flow_stmt1541);
                    continue_stmt85=continue_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, continue_stmt85.getTree());

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:323:4: return_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_return_stmt_in_flow_stmt1546);
                    return_stmt86=return_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, return_stmt86.getTree());

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:324:4: raise_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_raise_stmt_in_flow_stmt1551);
                    raise_stmt87=raise_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, raise_stmt87.getTree());

                    }
                    break;
                case 5 :
                    // org/python/antlr/Python.g:325:4: yield_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_yield_stmt_in_flow_stmt1556);
                    yield_stmt88=yield_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, yield_stmt88.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end flow_stmt

    public static class break_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start break_stmt
    // org/python/antlr/Python.g:328:1: break_stmt : 'break' ;
    public final break_stmt_return break_stmt() throws RecognitionException {
        break_stmt_return retval = new break_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal89=null;

        CommonTree string_literal89_tree=null;

        try {
            // org/python/antlr/Python.g:328:13: ( 'break' )
            // org/python/antlr/Python.g:328:13: 'break'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal89=(Token)input.LT(1);
            match(input,151,FOLLOW_151_in_break_stmt1565); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal89_tree = (CommonTree)adaptor.create(string_literal89);
            adaptor.addChild(root_0, string_literal89_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end break_stmt

    public static class continue_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start continue_stmt
    // org/python/antlr/Python.g:331:1: continue_stmt : 'continue' ;
    public final continue_stmt_return continue_stmt() throws RecognitionException {
        continue_stmt_return retval = new continue_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal90=null;

        CommonTree string_literal90_tree=null;

        try {
            // org/python/antlr/Python.g:331:16: ( 'continue' )
            // org/python/antlr/Python.g:331:16: 'continue'
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal90=(Token)input.LT(1);
            match(input,152,FOLLOW_152_in_continue_stmt1574); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal90_tree = (CommonTree)adaptor.create(string_literal90);
            adaptor.addChild(root_0, string_literal90_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end continue_stmt

    public static class return_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start return_stmt
    // org/python/antlr/Python.g:334:1: return_stmt : 'return' ( testlist )? -> ^( Return ( testlist )? ) ;
    public final return_stmt_return return_stmt() throws RecognitionException {
        return_stmt_return retval = new return_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal91=null;
        testlist_return testlist92 = null;


        CommonTree string_literal91_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // org/python/antlr/Python.g:334:14: ( 'return' ( testlist )? -> ^( Return ( testlist )? ) )
            // org/python/antlr/Python.g:334:14: 'return' ( testlist )?
            {
            string_literal91=(Token)input.LT(1);
            match(input,153,FOLLOW_153_in_return_stmt1583); if (failed) return retval;
            if ( backtracking==0 ) stream_153.add(string_literal91);

            // org/python/antlr/Python.g:334:23: ( testlist )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==NAME||LA26_0==LPAREN||(LA26_0>=PLUS && LA26_0<=MINUS)||(LA26_0>=TILDE && LA26_0<=LBRACK)||LA26_0==LCURLY||(LA26_0>=BACKQUOTE && LA26_0<=STRING)||LA26_0==174||LA26_0==176) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // org/python/antlr/Python.g:334:24: testlist
                    {
                    pushFollow(FOLLOW_testlist_in_return_stmt1586);
                    testlist92=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_testlist.add(testlist92.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 335:5: -> ^( Return ( testlist )? )
            {
                // org/python/antlr/Python.g:335:8: ^( Return ( testlist )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Return, "Return"), root_1);

                // org/python/antlr/Python.g:335:17: ( testlist )?
                if ( stream_testlist.hasNext() ) {
                    adaptor.addChild(root_1, stream_testlist.next());

                }
                stream_testlist.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end return_stmt

    public static class yield_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start yield_stmt
    // org/python/antlr/Python.g:338:1: yield_stmt : 'yield' testlist -> ^( Yield testlist ) ;
    public final yield_stmt_return yield_stmt() throws RecognitionException {
        yield_stmt_return retval = new yield_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal93=null;
        testlist_return testlist94 = null;


        CommonTree string_literal93_tree=null;
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // org/python/antlr/Python.g:338:13: ( 'yield' testlist -> ^( Yield testlist ) )
            // org/python/antlr/Python.g:338:13: 'yield' testlist
            {
            string_literal93=(Token)input.LT(1);
            match(input,154,FOLLOW_154_in_yield_stmt1611); if (failed) return retval;
            if ( backtracking==0 ) stream_154.add(string_literal93);

            pushFollow(FOLLOW_testlist_in_yield_stmt1613);
            testlist94=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_testlist.add(testlist94.getTree());

            // AST REWRITE
            // elements: testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 339:5: -> ^( Yield testlist )
            {
                // org/python/antlr/Python.g:339:8: ^( Yield testlist )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Yield, "Yield"), root_1);

                adaptor.addChild(root_1, stream_testlist.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end yield_stmt

    public static class raise_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start raise_stmt
    // org/python/antlr/Python.g:342:1: raise_stmt : 'raise' ( test ( COMMA test ( COMMA test )? )? )? ;
    public final raise_stmt_return raise_stmt() throws RecognitionException {
        raise_stmt_return retval = new raise_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal95=null;
        Token COMMA97=null;
        Token COMMA99=null;
        test_return test96 = null;

        test_return test98 = null;

        test_return test100 = null;


        CommonTree string_literal95_tree=null;
        CommonTree COMMA97_tree=null;
        CommonTree COMMA99_tree=null;

        try {
            // org/python/antlr/Python.g:342:13: ( 'raise' ( test ( COMMA test ( COMMA test )? )? )? )
            // org/python/antlr/Python.g:342:13: 'raise' ( test ( COMMA test ( COMMA test )? )? )?
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal95=(Token)input.LT(1);
            match(input,155,FOLLOW_155_in_raise_stmt1634); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal95_tree = (CommonTree)adaptor.create(string_literal95);
            adaptor.addChild(root_0, string_literal95_tree);
            }
            // org/python/antlr/Python.g:342:21: ( test ( COMMA test ( COMMA test )? )? )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==NAME||LA29_0==LPAREN||(LA29_0>=PLUS && LA29_0<=MINUS)||(LA29_0>=TILDE && LA29_0<=LBRACK)||LA29_0==LCURLY||(LA29_0>=BACKQUOTE && LA29_0<=STRING)||LA29_0==174||LA29_0==176) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // org/python/antlr/Python.g:342:22: test ( COMMA test ( COMMA test )? )?
                    {
                    pushFollow(FOLLOW_test_in_raise_stmt1637);
                    test96=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, test96.getTree());
                    // org/python/antlr/Python.g:342:27: ( COMMA test ( COMMA test )? )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==COMMA) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // org/python/antlr/Python.g:342:28: COMMA test ( COMMA test )?
                            {
                            COMMA97=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_raise_stmt1640); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMA97_tree = (CommonTree)adaptor.create(COMMA97);
                            adaptor.addChild(root_0, COMMA97_tree);
                            }
                            pushFollow(FOLLOW_test_in_raise_stmt1642);
                            test98=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, test98.getTree());
                            // org/python/antlr/Python.g:342:39: ( COMMA test )?
                            int alt27=2;
                            int LA27_0 = input.LA(1);

                            if ( (LA27_0==COMMA) ) {
                                alt27=1;
                            }
                            switch (alt27) {
                                case 1 :
                                    // org/python/antlr/Python.g:342:40: COMMA test
                                    {
                                    COMMA99=(Token)input.LT(1);
                                    match(input,COMMA,FOLLOW_COMMA_in_raise_stmt1645); if (failed) return retval;
                                    if ( backtracking==0 ) {
                                    COMMA99_tree = (CommonTree)adaptor.create(COMMA99);
                                    adaptor.addChild(root_0, COMMA99_tree);
                                    }
                                    pushFollow(FOLLOW_test_in_raise_stmt1647);
                                    test100=test();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) adaptor.addChild(root_0, test100.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end raise_stmt

    public static class import_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start import_stmt
    // org/python/antlr/Python.g:357:1: import_stmt : ( 'import' import_as_name ( COMMA import_as_name )* -> ^( Import ^( Names import_as_name ) ) | 'from' dotted_name 'import' ( STAR | import_as_name ( COMMA import_as_name )* ) );
    public final import_stmt_return import_stmt() throws RecognitionException {
        import_stmt_return retval = new import_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal101=null;
        Token COMMA103=null;
        Token string_literal105=null;
        Token string_literal107=null;
        Token STAR108=null;
        Token COMMA110=null;
        import_as_name_return import_as_name102 = null;

        import_as_name_return import_as_name104 = null;

        dotted_name_return dotted_name106 = null;

        import_as_name_return import_as_name109 = null;

        import_as_name_return import_as_name111 = null;


        CommonTree string_literal101_tree=null;
        CommonTree COMMA103_tree=null;
        CommonTree string_literal105_tree=null;
        CommonTree string_literal107_tree=null;
        CommonTree STAR108_tree=null;
        CommonTree COMMA110_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleSubtreeStream stream_import_as_name=new RewriteRuleSubtreeStream(adaptor,"rule import_as_name");
        try {
            // org/python/antlr/Python.g:358:9: ( 'import' import_as_name ( COMMA import_as_name )* -> ^( Import ^( Names import_as_name ) ) | 'from' dotted_name 'import' ( STAR | import_as_name ( COMMA import_as_name )* ) )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==156) ) {
                alt33=1;
            }
            else if ( (LA33_0==157) ) {
                alt33=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("357:1: import_stmt : ( 'import' import_as_name ( COMMA import_as_name )* -> ^( Import ^( Names import_as_name ) ) | 'from' dotted_name 'import' ( STAR | import_as_name ( COMMA import_as_name )* ) );", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // org/python/antlr/Python.g:358:9: 'import' import_as_name ( COMMA import_as_name )*
                    {
                    string_literal101=(Token)input.LT(1);
                    match(input,156,FOLLOW_156_in_import_stmt1671); if (failed) return retval;
                    if ( backtracking==0 ) stream_156.add(string_literal101);

                    pushFollow(FOLLOW_import_as_name_in_import_stmt1673);
                    import_as_name102=import_as_name();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_import_as_name.add(import_as_name102.getTree());
                    // org/python/antlr/Python.g:358:33: ( COMMA import_as_name )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==COMMA) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:358:34: COMMA import_as_name
                    	    {
                    	    COMMA103=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_import_stmt1676); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA103);

                    	    pushFollow(FOLLOW_import_as_name_in_import_stmt1678);
                    	    import_as_name104=import_as_name();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_import_as_name.add(import_as_name104.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: import_as_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 359:5: -> ^( Import ^( Names import_as_name ) )
                    {
                        // org/python/antlr/Python.g:359:8: ^( Import ^( Names import_as_name ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Import, "Import"), root_1);

                        // org/python/antlr/Python.g:359:17: ^( Names import_as_name )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Names, "Names"), root_2);

                        adaptor.addChild(root_2, stream_import_as_name.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:361:6: 'from' dotted_name 'import' ( STAR | import_as_name ( COMMA import_as_name )* )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal105=(Token)input.LT(1);
                    match(input,157,FOLLOW_157_in_import_stmt1704); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal105_tree = (CommonTree)adaptor.create(string_literal105);
                    adaptor.addChild(root_0, string_literal105_tree);
                    }
                    pushFollow(FOLLOW_dotted_name_in_import_stmt1706);
                    dotted_name106=dotted_name();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dotted_name106.getTree());
                    string_literal107=(Token)input.LT(1);
                    match(input,156,FOLLOW_156_in_import_stmt1708); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal107_tree = (CommonTree)adaptor.create(string_literal107);
                    adaptor.addChild(root_0, string_literal107_tree);
                    }
                    // org/python/antlr/Python.g:362:9: ( STAR | import_as_name ( COMMA import_as_name )* )
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==STAR) ) {
                        alt32=1;
                    }
                    else if ( (LA32_0==NAME) ) {
                        alt32=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("362:9: ( STAR | import_as_name ( COMMA import_as_name )* )", 32, 0, input);

                        throw nvae;
                    }
                    switch (alt32) {
                        case 1 :
                            // org/python/antlr/Python.g:362:10: STAR
                            {
                            STAR108=(Token)input.LT(1);
                            match(input,STAR,FOLLOW_STAR_in_import_stmt1719); if (failed) return retval;
                            if ( backtracking==0 ) {
                            STAR108_tree = (CommonTree)adaptor.create(STAR108);
                            adaptor.addChild(root_0, STAR108_tree);
                            }

                            }
                            break;
                        case 2 :
                            // org/python/antlr/Python.g:362:17: import_as_name ( COMMA import_as_name )*
                            {
                            pushFollow(FOLLOW_import_as_name_in_import_stmt1723);
                            import_as_name109=import_as_name();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, import_as_name109.getTree());
                            // org/python/antlr/Python.g:362:32: ( COMMA import_as_name )*
                            loop31:
                            do {
                                int alt31=2;
                                int LA31_0 = input.LA(1);

                                if ( (LA31_0==COMMA) ) {
                                    alt31=1;
                                }


                                switch (alt31) {
                            	case 1 :
                            	    // org/python/antlr/Python.g:362:33: COMMA import_as_name
                            	    {
                            	    COMMA110=(Token)input.LT(1);
                            	    match(input,COMMA,FOLLOW_COMMA_in_import_stmt1726); if (failed) return retval;
                            	    if ( backtracking==0 ) {
                            	    COMMA110_tree = (CommonTree)adaptor.create(COMMA110);
                            	    adaptor.addChild(root_0, COMMA110_tree);
                            	    }
                            	    pushFollow(FOLLOW_import_as_name_in_import_stmt1728);
                            	    import_as_name111=import_as_name();
                            	    _fsp--;
                            	    if (failed) return retval;
                            	    if ( backtracking==0 ) adaptor.addChild(root_0, import_as_name111.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop31;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end import_stmt

    public static class import_as_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start import_as_name
    // org/python/antlr/Python.g:365:1: import_as_name : alias= dotted_name ( 'as' asname= NAME )? -> ^( Alias $alias) ^( AsName ( $asname)? ) ;
    public final import_as_name_return import_as_name() throws RecognitionException {
        import_as_name_return retval = new import_as_name_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token asname=null;
        Token string_literal112=null;
        dotted_name_return alias = null;


        CommonTree asname_tree=null;
        CommonTree string_literal112_tree=null;
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_dotted_name=new RewriteRuleSubtreeStream(adaptor,"rule dotted_name");
        try {
            // org/python/antlr/Python.g:366:9: (alias= dotted_name ( 'as' asname= NAME )? -> ^( Alias $alias) ^( AsName ( $asname)? ) )
            // org/python/antlr/Python.g:366:9: alias= dotted_name ( 'as' asname= NAME )?
            {
            pushFollow(FOLLOW_dotted_name_in_import_as_name1749);
            alias=dotted_name();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_dotted_name.add(alias.getTree());
            // org/python/antlr/Python.g:366:27: ( 'as' asname= NAME )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==158) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // org/python/antlr/Python.g:366:28: 'as' asname= NAME
                    {
                    string_literal112=(Token)input.LT(1);
                    match(input,158,FOLLOW_158_in_import_as_name1752); if (failed) return retval;
                    if ( backtracking==0 ) stream_158.add(string_literal112);

                    asname=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_import_as_name1756); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(asname);


                    }
                    break;

            }


            // AST REWRITE
            // elements: alias, asname
            // token labels: asname
            // rule labels: retval, alias
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_asname=new RewriteRuleTokenStream(adaptor,"token asname",asname);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_alias=new RewriteRuleSubtreeStream(adaptor,"token alias",alias!=null?alias.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 367:5: -> ^( Alias $alias) ^( AsName ( $asname)? )
            {
                // org/python/antlr/Python.g:367:8: ^( Alias $alias)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Alias, "Alias"), root_1);

                adaptor.addChild(root_1, stream_alias.next());

                adaptor.addChild(root_0, root_1);
                }
                // org/python/antlr/Python.g:367:24: ^( AsName ( $asname)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AsName, "AsName"), root_1);

                // org/python/antlr/Python.g:367:33: ( $asname)?
                if ( stream_asname.hasNext() ) {
                    adaptor.addChild(root_1, stream_asname.next());

                }
                stream_asname.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end import_as_name

    public static class dotted_as_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dotted_as_name
    // org/python/antlr/Python.g:370:1: dotted_as_name : dotted_name ( NAME NAME )? ;
    public final dotted_as_name_return dotted_as_name() throws RecognitionException {
        dotted_as_name_return retval = new dotted_as_name_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NAME114=null;
        Token NAME115=null;
        dotted_name_return dotted_name113 = null;


        CommonTree NAME114_tree=null;
        CommonTree NAME115_tree=null;

        try {
            // org/python/antlr/Python.g:370:17: ( dotted_name ( NAME NAME )? )
            // org/python/antlr/Python.g:370:17: dotted_name ( NAME NAME )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_dotted_name_in_dotted_as_name1788);
            dotted_name113=dotted_name();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, dotted_name113.getTree());
            // org/python/antlr/Python.g:370:29: ( NAME NAME )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==NAME) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // org/python/antlr/Python.g:370:30: NAME NAME
                    {
                    NAME114=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_dotted_as_name1791); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAME114_tree = (CommonTree)adaptor.create(NAME114);
                    adaptor.addChild(root_0, NAME114_tree);
                    }
                    NAME115=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_dotted_as_name1793); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAME115_tree = (CommonTree)adaptor.create(NAME115);
                    adaptor.addChild(root_0, NAME115_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dotted_as_name

    public static class dotted_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dotted_name
    // org/python/antlr/Python.g:373:1: dotted_name : NAME ( DOT NAME )* -> ^( Name ( NAME )* ) ;
    public final dotted_name_return dotted_name() throws RecognitionException {
        dotted_name_return retval = new dotted_name_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NAME116=null;
        Token DOT117=null;
        Token NAME118=null;

        CommonTree NAME116_tree=null;
        CommonTree DOT117_tree=null;
        CommonTree NAME118_tree=null;
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // org/python/antlr/Python.g:373:14: ( NAME ( DOT NAME )* -> ^( Name ( NAME )* ) )
            // org/python/antlr/Python.g:373:14: NAME ( DOT NAME )*
            {
            NAME116=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_dotted_name1804); if (failed) return retval;
            if ( backtracking==0 ) stream_NAME.add(NAME116);

            // org/python/antlr/Python.g:373:19: ( DOT NAME )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==DOT) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // org/python/antlr/Python.g:373:20: DOT NAME
            	    {
            	    DOT117=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_dotted_name1807); if (failed) return retval;
            	    if ( backtracking==0 ) stream_DOT.add(DOT117);

            	    NAME118=(Token)input.LT(1);
            	    match(input,NAME,FOLLOW_NAME_in_dotted_name1809); if (failed) return retval;
            	    if ( backtracking==0 ) stream_NAME.add(NAME118);


            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // AST REWRITE
            // elements: NAME
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 374:5: -> ^( Name ( NAME )* )
            {
                // org/python/antlr/Python.g:374:8: ^( Name ( NAME )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_1);

                // org/python/antlr/Python.g:374:15: ( NAME )*
                while ( stream_NAME.hasNext() ) {
                    adaptor.addChild(root_1, stream_NAME.next());

                }
                stream_NAME.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dotted_name

    public static class global_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start global_stmt
    // org/python/antlr/Python.g:377:1: global_stmt : 'global' NAME ( COMMA NAME )* ;
    public final global_stmt_return global_stmt() throws RecognitionException {
        global_stmt_return retval = new global_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal119=null;
        Token NAME120=null;
        Token COMMA121=null;
        Token NAME122=null;

        CommonTree string_literal119_tree=null;
        CommonTree NAME120_tree=null;
        CommonTree COMMA121_tree=null;
        CommonTree NAME122_tree=null;

        try {
            // org/python/antlr/Python.g:377:14: ( 'global' NAME ( COMMA NAME )* )
            // org/python/antlr/Python.g:377:14: 'global' NAME ( COMMA NAME )*
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal119=(Token)input.LT(1);
            match(input,159,FOLLOW_159_in_global_stmt1833); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal119_tree = (CommonTree)adaptor.create(string_literal119);
            adaptor.addChild(root_0, string_literal119_tree);
            }
            NAME120=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_global_stmt1835); if (failed) return retval;
            if ( backtracking==0 ) {
            NAME120_tree = (CommonTree)adaptor.create(NAME120);
            adaptor.addChild(root_0, NAME120_tree);
            }
            // org/python/antlr/Python.g:377:28: ( COMMA NAME )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==COMMA) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // org/python/antlr/Python.g:377:29: COMMA NAME
            	    {
            	    COMMA121=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_global_stmt1838); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMA121_tree = (CommonTree)adaptor.create(COMMA121);
            	    adaptor.addChild(root_0, COMMA121_tree);
            	    }
            	    NAME122=(Token)input.LT(1);
            	    match(input,NAME,FOLLOW_NAME_in_global_stmt1840); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NAME122_tree = (CommonTree)adaptor.create(NAME122);
            	    adaptor.addChild(root_0, NAME122_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end global_stmt

    public static class exec_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exec_stmt
    // org/python/antlr/Python.g:380:1: exec_stmt : 'exec' expr ( 'in' test ( COMMA test )? )? ;
    public final exec_stmt_return exec_stmt() throws RecognitionException {
        exec_stmt_return retval = new exec_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal123=null;
        Token string_literal125=null;
        Token COMMA127=null;
        expr_return expr124 = null;

        test_return test126 = null;

        test_return test128 = null;


        CommonTree string_literal123_tree=null;
        CommonTree string_literal125_tree=null;
        CommonTree COMMA127_tree=null;

        try {
            // org/python/antlr/Python.g:380:12: ( 'exec' expr ( 'in' test ( COMMA test )? )? )
            // org/python/antlr/Python.g:380:12: 'exec' expr ( 'in' test ( COMMA test )? )?
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal123=(Token)input.LT(1);
            match(input,160,FOLLOW_160_in_exec_stmt1851); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal123_tree = (CommonTree)adaptor.create(string_literal123);
            adaptor.addChild(root_0, string_literal123_tree);
            }
            pushFollow(FOLLOW_expr_in_exec_stmt1853);
            expr124=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr124.getTree());
            // org/python/antlr/Python.g:380:24: ( 'in' test ( COMMA test )? )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==161) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // org/python/antlr/Python.g:380:25: 'in' test ( COMMA test )?
                    {
                    string_literal125=(Token)input.LT(1);
                    match(input,161,FOLLOW_161_in_exec_stmt1856); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal125_tree = (CommonTree)adaptor.create(string_literal125);
                    adaptor.addChild(root_0, string_literal125_tree);
                    }
                    pushFollow(FOLLOW_test_in_exec_stmt1858);
                    test126=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, test126.getTree());
                    // org/python/antlr/Python.g:380:35: ( COMMA test )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==COMMA) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // org/python/antlr/Python.g:380:36: COMMA test
                            {
                            COMMA127=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_exec_stmt1861); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMA127_tree = (CommonTree)adaptor.create(COMMA127);
                            adaptor.addChild(root_0, COMMA127_tree);
                            }
                            pushFollow(FOLLOW_test_in_exec_stmt1863);
                            test128=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, test128.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exec_stmt

    public static class assert_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start assert_stmt
    // org/python/antlr/Python.g:383:1: assert_stmt : 'assert' test ( COMMA test )? ;
    public final assert_stmt_return assert_stmt() throws RecognitionException {
        assert_stmt_return retval = new assert_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal129=null;
        Token COMMA131=null;
        test_return test130 = null;

        test_return test132 = null;


        CommonTree string_literal129_tree=null;
        CommonTree COMMA131_tree=null;

        try {
            // org/python/antlr/Python.g:383:14: ( 'assert' test ( COMMA test )? )
            // org/python/antlr/Python.g:383:14: 'assert' test ( COMMA test )?
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal129=(Token)input.LT(1);
            match(input,162,FOLLOW_162_in_assert_stmt1876); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal129_tree = (CommonTree)adaptor.create(string_literal129);
            adaptor.addChild(root_0, string_literal129_tree);
            }
            pushFollow(FOLLOW_test_in_assert_stmt1878);
            test130=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, test130.getTree());
            // org/python/antlr/Python.g:383:28: ( COMMA test )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==COMMA) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // org/python/antlr/Python.g:383:29: COMMA test
                    {
                    COMMA131=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_assert_stmt1881); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COMMA131_tree = (CommonTree)adaptor.create(COMMA131);
                    adaptor.addChild(root_0, COMMA131_tree);
                    }
                    pushFollow(FOLLOW_test_in_assert_stmt1883);
                    test132=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, test132.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end assert_stmt

    public static class compound_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compound_stmt
    // org/python/antlr/Python.g:387:1: compound_stmt : ( if_stmt | while_stmt | for_stmt | with_stmt | try_stmt | funcdef | classdef );
    public final compound_stmt_return compound_stmt() throws RecognitionException {
        compound_stmt_return retval = new compound_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        if_stmt_return if_stmt133 = null;

        while_stmt_return while_stmt134 = null;

        for_stmt_return for_stmt135 = null;

        with_stmt_return with_stmt136 = null;

        try_stmt_return try_stmt137 = null;

        funcdef_return funcdef138 = null;

        classdef_return classdef139 = null;



        try {
            // org/python/antlr/Python.g:387:19: ( if_stmt | while_stmt | for_stmt | with_stmt | try_stmt | funcdef | classdef )
            int alt41=7;
            switch ( input.LA(1) ) {
            case 166:
                {
                alt41=1;
                }
                break;
            case 165:
                {
                alt41=2;
                }
                break;
            case 163:
                {
                alt41=3;
                }
                break;
            case 168:
                {
                alt41=4;
                }
                break;
            case 169:
                {
                alt41=5;
                }
                break;
            case ATSIGN:
            case 147:
                {
                alt41=6;
                }
                break;
            case 177:
                {
                alt41=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("387:1: compound_stmt : ( if_stmt | while_stmt | for_stmt | with_stmt | try_stmt | funcdef | classdef );", 41, 0, input);

                throw nvae;
            }

            switch (alt41) {
                case 1 :
                    // org/python/antlr/Python.g:387:19: if_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_stmt_in_compound_stmt1898);
                    if_stmt133=if_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, if_stmt133.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:388:5: while_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_stmt_in_compound_stmt1904);
                    while_stmt134=while_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, while_stmt134.getTree());

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:389:5: for_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_stmt_in_compound_stmt1910);
                    for_stmt135=for_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, for_stmt135.getTree());

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:390:9: with_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_stmt_in_compound_stmt1920);
                    with_stmt136=with_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, with_stmt136.getTree());

                    }
                    break;
                case 5 :
                    // org/python/antlr/Python.g:391:5: try_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_stmt_in_compound_stmt1926);
                    try_stmt137=try_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, try_stmt137.getTree());

                    }
                    break;
                case 6 :
                    // org/python/antlr/Python.g:392:5: funcdef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_funcdef_in_compound_stmt1932);
                    funcdef138=funcdef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, funcdef138.getTree());

                    }
                    break;
                case 7 :
                    // org/python/antlr/Python.g:393:5: classdef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classdef_in_compound_stmt1938);
                    classdef139=classdef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, classdef139.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end compound_stmt

    public static class for_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start for_stmt
    // org/python/antlr/Python.g:399:1: for_stmt : 'for' exprlist 'in' testlist COLON body= suite ( 'else' COLON else_suite= suite )? -> ^( For ^( Target exprlist ) ^( Iter testlist ) ^( Body $body) ( ^( OrElse $else_suite) )? ) ;
    public final for_stmt_return for_stmt() throws RecognitionException {
        for_stmt_return retval = new for_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal140=null;
        Token string_literal142=null;
        Token COLON144=null;
        Token string_literal145=null;
        Token COLON146=null;
        suite_return body = null;

        suite_return else_suite = null;

        exprlist_return exprlist141 = null;

        testlist_return testlist143 = null;


        CommonTree string_literal140_tree=null;
        CommonTree string_literal142_tree=null;
        CommonTree COLON144_tree=null;
        CommonTree string_literal145_tree=null;
        CommonTree COLON146_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // org/python/antlr/Python.g:399:11: ( 'for' exprlist 'in' testlist COLON body= suite ( 'else' COLON else_suite= suite )? -> ^( For ^( Target exprlist ) ^( Iter testlist ) ^( Body $body) ( ^( OrElse $else_suite) )? ) )
            // org/python/antlr/Python.g:399:11: 'for' exprlist 'in' testlist COLON body= suite ( 'else' COLON else_suite= suite )?
            {
            string_literal140=(Token)input.LT(1);
            match(input,163,FOLLOW_163_in_for_stmt1950); if (failed) return retval;
            if ( backtracking==0 ) stream_163.add(string_literal140);

            pushFollow(FOLLOW_exprlist_in_for_stmt1952);
            exprlist141=exprlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprlist.add(exprlist141.getTree());
            string_literal142=(Token)input.LT(1);
            match(input,161,FOLLOW_161_in_for_stmt1954); if (failed) return retval;
            if ( backtracking==0 ) stream_161.add(string_literal142);

            pushFollow(FOLLOW_testlist_in_for_stmt1956);
            testlist143=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_testlist.add(testlist143.getTree());
            COLON144=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_for_stmt1958); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON144);

            pushFollow(FOLLOW_suite_in_for_stmt1962);
            body=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(body.getTree());
            // org/python/antlr/Python.g:399:57: ( 'else' COLON else_suite= suite )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==164) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // org/python/antlr/Python.g:399:58: 'else' COLON else_suite= suite
                    {
                    string_literal145=(Token)input.LT(1);
                    match(input,164,FOLLOW_164_in_for_stmt1965); if (failed) return retval;
                    if ( backtracking==0 ) stream_164.add(string_literal145);

                    COLON146=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_for_stmt1967); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON146);

                    pushFollow(FOLLOW_suite_in_for_stmt1971);
                    else_suite=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(else_suite.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: exprlist, testlist, else_suite, body
            // token labels: 
            // rule labels: body, retval, else_suite
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"token body",body!=null?body.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_else_suite=new RewriteRuleSubtreeStream(adaptor,"token else_suite",else_suite!=null?else_suite.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 400:5: -> ^( For ^( Target exprlist ) ^( Iter testlist ) ^( Body $body) ( ^( OrElse $else_suite) )? )
            {
                // org/python/antlr/Python.g:400:8: ^( For ^( Target exprlist ) ^( Iter testlist ) ^( Body $body) ( ^( OrElse $else_suite) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(For, "For"), root_1);

                // org/python/antlr/Python.g:400:14: ^( Target exprlist )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_exprlist.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:400:33: ^( Iter testlist )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Iter, "Iter"), root_2);

                adaptor.addChild(root_2, stream_testlist.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:400:50: ^( Body $body)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_body.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:400:64: ( ^( OrElse $else_suite) )?
                if ( stream_else_suite.hasNext() ) {
                    // org/python/antlr/Python.g:400:64: ^( OrElse $else_suite)
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                    adaptor.addChild(root_2, stream_else_suite.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_else_suite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end for_stmt

    public static class while_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start while_stmt
    // org/python/antlr/Python.g:403:1: while_stmt : 'while' test COLON body= suite ( 'else' COLON else_suite= suite )? -> ^( While ^( Test test ) ^( Body $body) ( ^( OrElse $else_suite) )? ) ;
    public final while_stmt_return while_stmt() throws RecognitionException {
        while_stmt_return retval = new while_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal147=null;
        Token COLON149=null;
        Token string_literal150=null;
        Token COLON151=null;
        suite_return body = null;

        suite_return else_suite = null;

        test_return test148 = null;


        CommonTree string_literal147_tree=null;
        CommonTree COLON149_tree=null;
        CommonTree string_literal150_tree=null;
        CommonTree COLON151_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // org/python/antlr/Python.g:403:13: ( 'while' test COLON body= suite ( 'else' COLON else_suite= suite )? -> ^( While ^( Test test ) ^( Body $body) ( ^( OrElse $else_suite) )? ) )
            // org/python/antlr/Python.g:403:13: 'while' test COLON body= suite ( 'else' COLON else_suite= suite )?
            {
            string_literal147=(Token)input.LT(1);
            match(input,165,FOLLOW_165_in_while_stmt2019); if (failed) return retval;
            if ( backtracking==0 ) stream_165.add(string_literal147);

            pushFollow(FOLLOW_test_in_while_stmt2021);
            test148=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test148.getTree());
            COLON149=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_while_stmt2023); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON149);

            pushFollow(FOLLOW_suite_in_while_stmt2027);
            body=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(body.getTree());
            // org/python/antlr/Python.g:403:43: ( 'else' COLON else_suite= suite )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==164) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // org/python/antlr/Python.g:403:44: 'else' COLON else_suite= suite
                    {
                    string_literal150=(Token)input.LT(1);
                    match(input,164,FOLLOW_164_in_while_stmt2030); if (failed) return retval;
                    if ( backtracking==0 ) stream_164.add(string_literal150);

                    COLON151=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_while_stmt2032); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON151);

                    pushFollow(FOLLOW_suite_in_while_stmt2036);
                    else_suite=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(else_suite.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: else_suite, body, test
            // token labels: 
            // rule labels: body, retval, else_suite
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"token body",body!=null?body.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_else_suite=new RewriteRuleSubtreeStream(adaptor,"token else_suite",else_suite!=null?else_suite.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 404:5: -> ^( While ^( Test test ) ^( Body $body) ( ^( OrElse $else_suite) )? )
            {
                // org/python/antlr/Python.g:404:8: ^( While ^( Test test ) ^( Body $body) ( ^( OrElse $else_suite) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(While, "While"), root_1);

                // org/python/antlr/Python.g:404:16: ^( Test test )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Test, "Test"), root_2);

                adaptor.addChild(root_2, stream_test.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:404:29: ^( Body $body)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_body.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:404:43: ( ^( OrElse $else_suite) )?
                if ( stream_else_suite.hasNext() ) {
                    // org/python/antlr/Python.g:404:43: ^( OrElse $else_suite)
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                    adaptor.addChild(root_2, stream_else_suite.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_else_suite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end while_stmt

    public static class if_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start if_stmt
    // org/python/antlr/Python.g:407:1: if_stmt : 'if' test COLON body= suite ( 'elif' test COLON elif_suite= suite )* ( 'else' COLON else_suite= suite )? -> ^( If ^( Test test ) ^( Body $body) ( ^( Elif $elif_suite) )* ( ^( OrElse $else_suite) )? ) ;
    public final if_stmt_return if_stmt() throws RecognitionException {
        if_stmt_return retval = new if_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal152=null;
        Token COLON154=null;
        Token string_literal155=null;
        Token COLON157=null;
        Token string_literal158=null;
        Token COLON159=null;
        suite_return body = null;

        suite_return elif_suite = null;

        suite_return else_suite = null;

        test_return test153 = null;

        test_return test156 = null;


        CommonTree string_literal152_tree=null;
        CommonTree COLON154_tree=null;
        CommonTree string_literal155_tree=null;
        CommonTree COLON157_tree=null;
        CommonTree string_literal158_tree=null;
        CommonTree COLON159_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // org/python/antlr/Python.g:407:10: ( 'if' test COLON body= suite ( 'elif' test COLON elif_suite= suite )* ( 'else' COLON else_suite= suite )? -> ^( If ^( Test test ) ^( Body $body) ( ^( Elif $elif_suite) )* ( ^( OrElse $else_suite) )? ) )
            // org/python/antlr/Python.g:407:10: 'if' test COLON body= suite ( 'elif' test COLON elif_suite= suite )* ( 'else' COLON else_suite= suite )?
            {
            string_literal152=(Token)input.LT(1);
            match(input,166,FOLLOW_166_in_if_stmt2078); if (failed) return retval;
            if ( backtracking==0 ) stream_166.add(string_literal152);

            pushFollow(FOLLOW_test_in_if_stmt2080);
            test153=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test153.getTree());
            COLON154=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_if_stmt2082); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON154);

            pushFollow(FOLLOW_suite_in_if_stmt2086);
            body=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(body.getTree());
            // org/python/antlr/Python.g:407:37: ( 'elif' test COLON elif_suite= suite )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==167) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // org/python/antlr/Python.g:407:38: 'elif' test COLON elif_suite= suite
            	    {
            	    string_literal155=(Token)input.LT(1);
            	    match(input,167,FOLLOW_167_in_if_stmt2089); if (failed) return retval;
            	    if ( backtracking==0 ) stream_167.add(string_literal155);

            	    pushFollow(FOLLOW_test_in_if_stmt2091);
            	    test156=test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_test.add(test156.getTree());
            	    COLON157=(Token)input.LT(1);
            	    match(input,COLON,FOLLOW_COLON_in_if_stmt2093); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COLON.add(COLON157);

            	    pushFollow(FOLLOW_suite_in_if_stmt2097);
            	    elif_suite=suite();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_suite.add(elif_suite.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);

            // org/python/antlr/Python.g:407:75: ( 'else' COLON else_suite= suite )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==164) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // org/python/antlr/Python.g:407:76: 'else' COLON else_suite= suite
                    {
                    string_literal158=(Token)input.LT(1);
                    match(input,164,FOLLOW_164_in_if_stmt2102); if (failed) return retval;
                    if ( backtracking==0 ) stream_164.add(string_literal158);

                    COLON159=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_if_stmt2104); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON159);

                    pushFollow(FOLLOW_suite_in_if_stmt2108);
                    else_suite=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(else_suite.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: test, body, else_suite, elif_suite
            // token labels: 
            // rule labels: body, retval, elif_suite, else_suite
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"token body",body!=null?body.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_elif_suite=new RewriteRuleSubtreeStream(adaptor,"token elif_suite",elif_suite!=null?elif_suite.tree:null);
            RewriteRuleSubtreeStream stream_else_suite=new RewriteRuleSubtreeStream(adaptor,"token else_suite",else_suite!=null?else_suite.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 408:5: -> ^( If ^( Test test ) ^( Body $body) ( ^( Elif $elif_suite) )* ( ^( OrElse $else_suite) )? )
            {
                // org/python/antlr/Python.g:408:8: ^( If ^( Test test ) ^( Body $body) ( ^( Elif $elif_suite) )* ( ^( OrElse $else_suite) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(If, "If"), root_1);

                // org/python/antlr/Python.g:408:13: ^( Test test )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Test, "Test"), root_2);

                adaptor.addChild(root_2, stream_test.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:408:26: ^( Body $body)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_body.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:408:40: ( ^( Elif $elif_suite) )*
                while ( stream_elif_suite.hasNext() ) {
                    // org/python/antlr/Python.g:408:40: ^( Elif $elif_suite)
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Elif, "Elif"), root_2);

                    adaptor.addChild(root_2, stream_elif_suite.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_elif_suite.reset();
                // org/python/antlr/Python.g:408:61: ( ^( OrElse $else_suite) )?
                if ( stream_else_suite.hasNext() ) {
                    // org/python/antlr/Python.g:408:61: ^( OrElse $else_suite)
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                    adaptor.addChild(root_2, stream_else_suite.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_else_suite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end if_stmt

    public static class with_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start with_stmt
    // org/python/antlr/Python.g:411:1: with_stmt : 'with' context= exprlist ( 'as' args= exprlist )? COLON body= suite -> ^( With ^( Context $context) ^( Target $args) ^( Body $body) ) ;
    public final with_stmt_return with_stmt() throws RecognitionException {
        with_stmt_return retval = new with_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal160=null;
        Token string_literal161=null;
        Token COLON162=null;
        exprlist_return context = null;

        exprlist_return args = null;

        suite_return body = null;


        CommonTree string_literal160_tree=null;
        CommonTree string_literal161_tree=null;
        CommonTree COLON162_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        try {
            // org/python/antlr/Python.g:411:12: ( 'with' context= exprlist ( 'as' args= exprlist )? COLON body= suite -> ^( With ^( Context $context) ^( Target $args) ^( Body $body) ) )
            // org/python/antlr/Python.g:411:12: 'with' context= exprlist ( 'as' args= exprlist )? COLON body= suite
            {
            string_literal160=(Token)input.LT(1);
            match(input,168,FOLLOW_168_in_with_stmt2158); if (failed) return retval;
            if ( backtracking==0 ) stream_168.add(string_literal160);

            pushFollow(FOLLOW_exprlist_in_with_stmt2162);
            context=exprlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprlist.add(context.getTree());
            // org/python/antlr/Python.g:411:36: ( 'as' args= exprlist )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==158) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // org/python/antlr/Python.g:411:37: 'as' args= exprlist
                    {
                    string_literal161=(Token)input.LT(1);
                    match(input,158,FOLLOW_158_in_with_stmt2165); if (failed) return retval;
                    if ( backtracking==0 ) stream_158.add(string_literal161);

                    pushFollow(FOLLOW_exprlist_in_with_stmt2169);
                    args=exprlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_exprlist.add(args.getTree());

                    }
                    break;

            }

            COLON162=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_with_stmt2173); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON162);

            pushFollow(FOLLOW_suite_in_with_stmt2177);
            body=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(body.getTree());

            // AST REWRITE
            // elements: body, args, context
            // token labels: 
            // rule labels: body, retval, args, context
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"token body",body!=null?body.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_args=new RewriteRuleSubtreeStream(adaptor,"token args",args!=null?args.tree:null);
            RewriteRuleSubtreeStream stream_context=new RewriteRuleSubtreeStream(adaptor,"token context",context!=null?context.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 412:5: -> ^( With ^( Context $context) ^( Target $args) ^( Body $body) )
            {
                // org/python/antlr/Python.g:412:8: ^( With ^( Context $context) ^( Target $args) ^( Body $body) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(With, "With"), root_1);

                // org/python/antlr/Python.g:412:15: ^( Context $context)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Context, "Context"), root_2);

                adaptor.addChild(root_2, stream_context.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:412:35: ^( Target $args)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_args.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:412:51: ^( Body $body)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_body.next());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end with_stmt

    public static class try_stmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start try_stmt
    // org/python/antlr/Python.g:420:1: try_stmt : 'try' COLON try_suite= suite ( except_clauses ( 'else' COLON else_suite= suite )? ( 'finally' COLON finally_suite= suite )? | ( 'finally' COLON finally_suite= suite ) ) -> ^( Try $try_suite ( ^( Except except_clauses ) )? ( ^( OrElse $else_suite) )? ( ^( Finally $finally_suite) )? ) ;
    public final try_stmt_return try_stmt() throws RecognitionException {
        try_stmt_return retval = new try_stmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal163=null;
        Token COLON164=null;
        Token string_literal166=null;
        Token COLON167=null;
        Token string_literal168=null;
        Token COLON169=null;
        Token string_literal170=null;
        Token COLON171=null;
        suite_return try_suite = null;

        suite_return else_suite = null;

        suite_return finally_suite = null;

        except_clauses_return except_clauses165 = null;


        CommonTree string_literal163_tree=null;
        CommonTree COLON164_tree=null;
        CommonTree string_literal166_tree=null;
        CommonTree COLON167_tree=null;
        CommonTree string_literal168_tree=null;
        CommonTree COLON169_tree=null;
        CommonTree string_literal170_tree=null;
        CommonTree COLON171_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleSubtreeStream stream_except_clauses=new RewriteRuleSubtreeStream(adaptor,"rule except_clauses");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // org/python/antlr/Python.g:421:9: ( 'try' COLON try_suite= suite ( except_clauses ( 'else' COLON else_suite= suite )? ( 'finally' COLON finally_suite= suite )? | ( 'finally' COLON finally_suite= suite ) ) -> ^( Try $try_suite ( ^( Except except_clauses ) )? ( ^( OrElse $else_suite) )? ( ^( Finally $finally_suite) )? ) )
            // org/python/antlr/Python.g:421:9: 'try' COLON try_suite= suite ( except_clauses ( 'else' COLON else_suite= suite )? ( 'finally' COLON finally_suite= suite )? | ( 'finally' COLON finally_suite= suite ) )
            {
            string_literal163=(Token)input.LT(1);
            match(input,169,FOLLOW_169_in_try_stmt2229); if (failed) return retval;
            if ( backtracking==0 ) stream_169.add(string_literal163);

            COLON164=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_try_stmt2231); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON164);

            pushFollow(FOLLOW_suite_in_try_stmt2235);
            try_suite=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(try_suite.getTree());
            // org/python/antlr/Python.g:422:9: ( except_clauses ( 'else' COLON else_suite= suite )? ( 'finally' COLON finally_suite= suite )? | ( 'finally' COLON finally_suite= suite ) )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==171) ) {
                alt49=1;
            }
            else if ( (LA49_0==170) ) {
                alt49=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("422:9: ( except_clauses ( 'else' COLON else_suite= suite )? ( 'finally' COLON finally_suite= suite )? | ( 'finally' COLON finally_suite= suite ) )", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // org/python/antlr/Python.g:422:10: except_clauses ( 'else' COLON else_suite= suite )? ( 'finally' COLON finally_suite= suite )?
                    {
                    pushFollow(FOLLOW_except_clauses_in_try_stmt2246);
                    except_clauses165=except_clauses();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_except_clauses.add(except_clauses165.getTree());
                    // org/python/antlr/Python.g:423:9: ( 'else' COLON else_suite= suite )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==164) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // org/python/antlr/Python.g:423:10: 'else' COLON else_suite= suite
                            {
                            string_literal166=(Token)input.LT(1);
                            match(input,164,FOLLOW_164_in_try_stmt2257); if (failed) return retval;
                            if ( backtracking==0 ) stream_164.add(string_literal166);

                            COLON167=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_try_stmt2259); if (failed) return retval;
                            if ( backtracking==0 ) stream_COLON.add(COLON167);

                            pushFollow(FOLLOW_suite_in_try_stmt2263);
                            else_suite=suite();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_suite.add(else_suite.getTree());

                            }
                            break;

                    }

                    // org/python/antlr/Python.g:424:9: ( 'finally' COLON finally_suite= suite )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==170) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // org/python/antlr/Python.g:424:10: 'finally' COLON finally_suite= suite
                            {
                            string_literal168=(Token)input.LT(1);
                            match(input,170,FOLLOW_170_in_try_stmt2276); if (failed) return retval;
                            if ( backtracking==0 ) stream_170.add(string_literal168);

                            COLON169=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_try_stmt2278); if (failed) return retval;
                            if ( backtracking==0 ) stream_COLON.add(COLON169);

                            pushFollow(FOLLOW_suite_in_try_stmt2282);
                            finally_suite=suite();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_suite.add(finally_suite.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:426:11: ( 'finally' COLON finally_suite= suite )
                    {
                    // org/python/antlr/Python.g:426:11: ( 'finally' COLON finally_suite= suite )
                    // org/python/antlr/Python.g:426:12: 'finally' COLON finally_suite= suite
                    {
                    string_literal170=(Token)input.LT(1);
                    match(input,170,FOLLOW_170_in_try_stmt2306); if (failed) return retval;
                    if ( backtracking==0 ) stream_170.add(string_literal170);

                    COLON171=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_try_stmt2308); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON171);

                    pushFollow(FOLLOW_suite_in_try_stmt2312);
                    finally_suite=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(finally_suite.getTree());

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: else_suite, try_suite, except_clauses, finally_suite
            // token labels: 
            // rule labels: retval, else_suite, try_suite, finally_suite
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_else_suite=new RewriteRuleSubtreeStream(adaptor,"token else_suite",else_suite!=null?else_suite.tree:null);
            RewriteRuleSubtreeStream stream_try_suite=new RewriteRuleSubtreeStream(adaptor,"token try_suite",try_suite!=null?try_suite.tree:null);
            RewriteRuleSubtreeStream stream_finally_suite=new RewriteRuleSubtreeStream(adaptor,"token finally_suite",finally_suite!=null?finally_suite.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 428:5: -> ^( Try $try_suite ( ^( Except except_clauses ) )? ( ^( OrElse $else_suite) )? ( ^( Finally $finally_suite) )? )
            {
                // org/python/antlr/Python.g:428:8: ^( Try $try_suite ( ^( Except except_clauses ) )? ( ^( OrElse $else_suite) )? ( ^( Finally $finally_suite) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Try, "Try"), root_1);

                adaptor.addChild(root_1, stream_try_suite.next());
                // org/python/antlr/Python.g:428:25: ( ^( Except except_clauses ) )?
                if ( stream_except_clauses.hasNext() ) {
                    // org/python/antlr/Python.g:428:25: ^( Except except_clauses )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Except, "Except"), root_2);

                    adaptor.addChild(root_2, stream_except_clauses.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_except_clauses.reset();
                // org/python/antlr/Python.g:428:51: ( ^( OrElse $else_suite) )?
                if ( stream_else_suite.hasNext() ) {
                    // org/python/antlr/Python.g:428:51: ^( OrElse $else_suite)
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(OrElse, "OrElse"), root_2);

                    adaptor.addChild(root_2, stream_else_suite.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_else_suite.reset();
                // org/python/antlr/Python.g:428:74: ( ^( Finally $finally_suite) )?
                if ( stream_finally_suite.hasNext() ) {
                    // org/python/antlr/Python.g:428:74: ^( Finally $finally_suite)
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Finally, "Finally"), root_2);

                    adaptor.addChild(root_2, stream_finally_suite.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_finally_suite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end try_stmt

    public static class except_clauses_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start except_clauses
    // org/python/antlr/Python.g:442:1: except_clauses : ( ( ( except_clause COLON except_suite= suite )+ ( 'except' COLON except_last= suite )? ) -> ^( Except $except_suite) ( ^( Except $except_last) )? | ( 'except' COLON except_notest= suite ) -> ^( Except $except_notest) );
    public final except_clauses_return except_clauses() throws RecognitionException {
        except_clauses_return retval = new except_clauses_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COLON173=null;
        Token string_literal174=null;
        Token COLON175=null;
        Token string_literal176=null;
        Token COLON177=null;
        suite_return except_suite = null;

        suite_return except_last = null;

        suite_return except_notest = null;

        except_clause_return except_clause172 = null;


        CommonTree COLON173_tree=null;
        CommonTree string_literal174_tree=null;
        CommonTree COLON175_tree=null;
        CommonTree string_literal176_tree=null;
        CommonTree COLON177_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleSubtreeStream stream_except_clause=new RewriteRuleSubtreeStream(adaptor,"rule except_clause");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        try {
            // org/python/antlr/Python.g:443:7: ( ( ( except_clause COLON except_suite= suite )+ ( 'except' COLON except_last= suite )? ) -> ^( Except $except_suite) ( ^( Except $except_last) )? | ( 'except' COLON except_notest= suite ) -> ^( Except $except_notest) )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==171) ) {
                int LA52_1 = input.LA(2);

                if ( (LA52_1==COLON) ) {
                    alt52=2;
                }
                else if ( (LA52_1==NAME||LA52_1==LPAREN||(LA52_1>=PLUS && LA52_1<=MINUS)||(LA52_1>=TILDE && LA52_1<=LBRACK)||LA52_1==LCURLY||(LA52_1>=BACKQUOTE && LA52_1<=STRING)||LA52_1==174||LA52_1==176) ) {
                    alt52=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("442:1: except_clauses : ( ( ( except_clause COLON except_suite= suite )+ ( 'except' COLON except_last= suite )? ) -> ^( Except $except_suite) ( ^( Except $except_last) )? | ( 'except' COLON except_notest= suite ) -> ^( Except $except_notest) );", 52, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("442:1: except_clauses : ( ( ( except_clause COLON except_suite= suite )+ ( 'except' COLON except_last= suite )? ) -> ^( Except $except_suite) ( ^( Except $except_last) )? | ( 'except' COLON except_notest= suite ) -> ^( Except $except_notest) );", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // org/python/antlr/Python.g:443:7: ( ( except_clause COLON except_suite= suite )+ ( 'except' COLON except_last= suite )? )
                    {
                    // org/python/antlr/Python.g:443:7: ( ( except_clause COLON except_suite= suite )+ ( 'except' COLON except_last= suite )? )
                    // org/python/antlr/Python.g:443:8: ( except_clause COLON except_suite= suite )+ ( 'except' COLON except_last= suite )?
                    {
                    // org/python/antlr/Python.g:443:8: ( except_clause COLON except_suite= suite )+
                    int cnt50=0;
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==171) ) {
                            int LA50_1 = input.LA(2);

                            if ( (LA50_1==NAME||LA50_1==LPAREN||(LA50_1>=PLUS && LA50_1<=MINUS)||(LA50_1>=TILDE && LA50_1<=LBRACK)||LA50_1==LCURLY||(LA50_1>=BACKQUOTE && LA50_1<=STRING)||LA50_1==174||LA50_1==176) ) {
                                alt50=1;
                            }


                        }


                        switch (alt50) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:443:9: except_clause COLON except_suite= suite
                    	    {
                    	    pushFollow(FOLLOW_except_clause_in_except_clauses2379);
                    	    except_clause172=except_clause();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_except_clause.add(except_clause172.getTree());
                    	    COLON173=(Token)input.LT(1);
                    	    match(input,COLON,FOLLOW_COLON_in_except_clauses2381); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COLON.add(COLON173);

                    	    pushFollow(FOLLOW_suite_in_except_clauses2385);
                    	    except_suite=suite();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_suite.add(except_suite.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt50 >= 1 ) break loop50;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(50, input);
                                throw eee;
                        }
                        cnt50++;
                    } while (true);

                    // org/python/antlr/Python.g:443:50: ( 'except' COLON except_last= suite )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==171) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // org/python/antlr/Python.g:443:51: 'except' COLON except_last= suite
                            {
                            string_literal174=(Token)input.LT(1);
                            match(input,171,FOLLOW_171_in_except_clauses2390); if (failed) return retval;
                            if ( backtracking==0 ) stream_171.add(string_literal174);

                            COLON175=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_except_clauses2392); if (failed) return retval;
                            if ( backtracking==0 ) stream_COLON.add(COLON175);

                            pushFollow(FOLLOW_suite_in_except_clauses2396);
                            except_last=suite();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_suite.add(except_last.getTree());

                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: except_suite, except_last
                    // token labels: 
                    // rule labels: retval, except_suite, except_last
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_except_suite=new RewriteRuleSubtreeStream(adaptor,"token except_suite",except_suite!=null?except_suite.tree:null);
                    RewriteRuleSubtreeStream stream_except_last=new RewriteRuleSubtreeStream(adaptor,"token except_last",except_last!=null?except_last.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 444:5: -> ^( Except $except_suite) ( ^( Except $except_last) )?
                    {
                        // org/python/antlr/Python.g:444:8: ^( Except $except_suite)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Except, "Except"), root_1);

                        adaptor.addChild(root_1, stream_except_suite.next());

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:444:32: ( ^( Except $except_last) )?
                        if ( stream_except_last.hasNext() ) {
                            // org/python/antlr/Python.g:444:32: ^( Except $except_last)
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Except, "Except"), root_1);

                            adaptor.addChild(root_1, stream_except_last.next());

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_except_last.reset();

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:445:7: ( 'except' COLON except_notest= suite )
                    {
                    // org/python/antlr/Python.g:445:7: ( 'except' COLON except_notest= suite )
                    // org/python/antlr/Python.g:445:8: 'except' COLON except_notest= suite
                    {
                    string_literal176=(Token)input.LT(1);
                    match(input,171,FOLLOW_171_in_except_clauses2431); if (failed) return retval;
                    if ( backtracking==0 ) stream_171.add(string_literal176);

                    COLON177=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_except_clauses2433); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLON.add(COLON177);

                    pushFollow(FOLLOW_suite_in_except_clauses2437);
                    except_notest=suite();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_suite.add(except_notest.getTree());

                    }


                    // AST REWRITE
                    // elements: except_notest
                    // token labels: 
                    // rule labels: retval, except_notest
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_except_notest=new RewriteRuleSubtreeStream(adaptor,"token except_notest",except_notest!=null?except_notest.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 445:44: -> ^( Except $except_notest)
                    {
                        // org/python/antlr/Python.g:445:47: ^( Except $except_notest)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Except, "Except"), root_1);

                        adaptor.addChild(root_1, stream_except_notest.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end except_clauses

    public static class except_clause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start except_clause
    // org/python/antlr/Python.g:448:1: except_clause : 'except' ( test ( COMMA test )* ) ;
    public final except_clause_return except_clause() throws RecognitionException {
        except_clause_return retval = new except_clause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal178=null;
        Token COMMA180=null;
        test_return test179 = null;

        test_return test181 = null;


        CommonTree string_literal178_tree=null;
        CommonTree COMMA180_tree=null;

        try {
            // org/python/antlr/Python.g:448:16: ( 'except' ( test ( COMMA test )* ) )
            // org/python/antlr/Python.g:448:16: 'except' ( test ( COMMA test )* )
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal178=(Token)input.LT(1);
            match(input,171,FOLLOW_171_in_except_clause2459); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal178_tree = (CommonTree)adaptor.create(string_literal178);
            adaptor.addChild(root_0, string_literal178_tree);
            }
            // org/python/antlr/Python.g:448:25: ( test ( COMMA test )* )
            // org/python/antlr/Python.g:448:26: test ( COMMA test )*
            {
            pushFollow(FOLLOW_test_in_except_clause2462);
            test179=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, test179.getTree());
            // org/python/antlr/Python.g:448:31: ( COMMA test )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==COMMA) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // org/python/antlr/Python.g:448:32: COMMA test
            	    {
            	    COMMA180=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_except_clause2465); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMA180_tree = (CommonTree)adaptor.create(COMMA180);
            	    adaptor.addChild(root_0, COMMA180_tree);
            	    }
            	    pushFollow(FOLLOW_test_in_except_clause2467);
            	    test181=test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, test181.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end except_clause

    public static class suite_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start suite
    // org/python/antlr/Python.g:451:1: suite : ( simple_stmt | NEWLINE INDENT ( stmt )+ DEDENT -> stmt );
    public final suite_return suite() throws RecognitionException {
        suite_return retval = new suite_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NEWLINE183=null;
        Token INDENT184=null;
        Token DEDENT186=null;
        simple_stmt_return simple_stmt182 = null;

        stmt_return stmt185 = null;


        CommonTree NEWLINE183_tree=null;
        CommonTree INDENT184_tree=null;
        CommonTree DEDENT186_tree=null;
        RewriteRuleTokenStream stream_DEDENT=new RewriteRuleTokenStream(adaptor,"token DEDENT");
        RewriteRuleTokenStream stream_NEWLINE=new RewriteRuleTokenStream(adaptor,"token NEWLINE");
        RewriteRuleTokenStream stream_INDENT=new RewriteRuleTokenStream(adaptor,"token INDENT");
        RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
        try {
            // org/python/antlr/Python.g:451:11: ( simple_stmt | NEWLINE INDENT ( stmt )+ DEDENT -> stmt )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==NAME||LA55_0==LPAREN||(LA55_0>=PLUS && LA55_0<=MINUS)||(LA55_0>=TILDE && LA55_0<=LBRACK)||LA55_0==LCURLY||(LA55_0>=BACKQUOTE && LA55_0<=STRING)||(LA55_0>=148 && LA55_0<=157)||(LA55_0>=159 && LA55_0<=160)||LA55_0==162) ) {
                alt55=1;
            }
            else if ( (LA55_0==NEWLINE) ) {
                alt55=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("451:1: suite : ( simple_stmt | NEWLINE INDENT ( stmt )+ DEDENT -> stmt );", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // org/python/antlr/Python.g:451:11: simple_stmt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_suite2482);
                    simple_stmt182=simple_stmt();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, simple_stmt182.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:452:4: NEWLINE INDENT ( stmt )+ DEDENT
                    {
                    NEWLINE183=(Token)input.LT(1);
                    match(input,NEWLINE,FOLLOW_NEWLINE_in_suite2487); if (failed) return retval;
                    if ( backtracking==0 ) stream_NEWLINE.add(NEWLINE183);

                    INDENT184=(Token)input.LT(1);
                    match(input,INDENT,FOLLOW_INDENT_in_suite2489); if (failed) return retval;
                    if ( backtracking==0 ) stream_INDENT.add(INDENT184);

                    // org/python/antlr/Python.g:452:19: ( stmt )+
                    int cnt54=0;
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==NAME||(LA54_0>=ATSIGN && LA54_0<=LPAREN)||(LA54_0>=PLUS && LA54_0<=MINUS)||(LA54_0>=TILDE && LA54_0<=LBRACK)||LA54_0==LCURLY||(LA54_0>=BACKQUOTE && LA54_0<=STRING)||(LA54_0>=147 && LA54_0<=157)||(LA54_0>=159 && LA54_0<=160)||(LA54_0>=162 && LA54_0<=163)||(LA54_0>=165 && LA54_0<=166)||(LA54_0>=168 && LA54_0<=169)||LA54_0==177) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:452:20: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_suite2492);
                    	    stmt185=stmt();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_stmt.add(stmt185.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt54 >= 1 ) break loop54;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(54, input);
                                throw eee;
                        }
                        cnt54++;
                    } while (true);

                    DEDENT186=(Token)input.LT(1);
                    match(input,DEDENT,FOLLOW_DEDENT_in_suite2496); if (failed) return retval;
                    if ( backtracking==0 ) stream_DEDENT.add(DEDENT186);


                    // AST REWRITE
                    // elements: stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 452:34: -> stmt
                    {
                        adaptor.addChild(root_0, stream_stmt.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end suite

    public static class test_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start test
    // org/python/antlr/Python.g:456:1: test : ( and_test ( 'or' and_test )* | lambdef );
    public final test_return test() throws RecognitionException {
        test_return retval = new test_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal188=null;
        and_test_return and_test187 = null;

        and_test_return and_test189 = null;

        lambdef_return lambdef190 = null;


        CommonTree string_literal188_tree=null;

        try {
            // org/python/antlr/Python.g:456:7: ( and_test ( 'or' and_test )* | lambdef )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==NAME||LA57_0==LPAREN||(LA57_0>=PLUS && LA57_0<=MINUS)||(LA57_0>=TILDE && LA57_0<=LBRACK)||LA57_0==LCURLY||(LA57_0>=BACKQUOTE && LA57_0<=STRING)||LA57_0==174) ) {
                alt57=1;
            }
            else if ( (LA57_0==176) ) {
                alt57=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("456:1: test : ( and_test ( 'or' and_test )* | lambdef );", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // org/python/antlr/Python.g:456:7: and_test ( 'or' and_test )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_and_test_in_test2510);
                    and_test187=and_test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, and_test187.getTree());
                    // org/python/antlr/Python.g:456:16: ( 'or' and_test )*
                    loop56:
                    do {
                        int alt56=2;
                        int LA56_0 = input.LA(1);

                        if ( (LA56_0==172) ) {
                            alt56=1;
                        }


                        switch (alt56) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:456:17: 'or' and_test
                    	    {
                    	    string_literal188=(Token)input.LT(1);
                    	    match(input,172,FOLLOW_172_in_test2513); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    string_literal188_tree = (CommonTree)adaptor.create(string_literal188);
                    	    adaptor.addChild(root_0, string_literal188_tree);
                    	    }
                    	    pushFollow(FOLLOW_and_test_in_test2515);
                    	    and_test189=and_test();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, and_test189.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop56;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:457:4: lambdef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambdef_in_test2522);
                    lambdef190=lambdef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, lambdef190.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end test

    public static class and_test_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start and_test
    // org/python/antlr/Python.g:460:1: and_test : not_test ( 'and' not_test )* ;
    public final and_test_return and_test() throws RecognitionException {
        and_test_return retval = new and_test_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal192=null;
        not_test_return not_test191 = null;

        not_test_return not_test193 = null;


        CommonTree string_literal192_tree=null;

        try {
            // org/python/antlr/Python.g:461:4: ( not_test ( 'and' not_test )* )
            // org/python/antlr/Python.g:461:4: not_test ( 'and' not_test )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_not_test_in_and_test2533);
            not_test191=not_test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, not_test191.getTree());
            // org/python/antlr/Python.g:461:13: ( 'and' not_test )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==173) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // org/python/antlr/Python.g:461:14: 'and' not_test
            	    {
            	    string_literal192=(Token)input.LT(1);
            	    match(input,173,FOLLOW_173_in_and_test2536); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    string_literal192_tree = (CommonTree)adaptor.create(string_literal192);
            	    adaptor.addChild(root_0, string_literal192_tree);
            	    }
            	    pushFollow(FOLLOW_not_test_in_and_test2538);
            	    not_test193=not_test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, not_test193.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end and_test

    public static class not_test_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start not_test
    // org/python/antlr/Python.g:464:1: not_test : ( 'not' not_test | comparison );
    public final not_test_return not_test() throws RecognitionException {
        not_test_return retval = new not_test_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal194=null;
        not_test_return not_test195 = null;

        comparison_return comparison196 = null;


        CommonTree string_literal194_tree=null;

        try {
            // org/python/antlr/Python.g:465:4: ( 'not' not_test | comparison )
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==174) ) {
                alt59=1;
            }
            else if ( (LA59_0==NAME||LA59_0==LPAREN||(LA59_0>=PLUS && LA59_0<=MINUS)||(LA59_0>=TILDE && LA59_0<=LBRACK)||LA59_0==LCURLY||(LA59_0>=BACKQUOTE && LA59_0<=STRING)) ) {
                alt59=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("464:1: not_test : ( 'not' not_test | comparison );", 59, 0, input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // org/python/antlr/Python.g:465:4: 'not' not_test
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal194=(Token)input.LT(1);
                    match(input,174,FOLLOW_174_in_not_test2551); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal194_tree = (CommonTree)adaptor.create(string_literal194);
                    adaptor.addChild(root_0, string_literal194_tree);
                    }
                    pushFollow(FOLLOW_not_test_in_not_test2553);
                    not_test195=not_test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, not_test195.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:466:4: comparison
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_comparison_in_not_test2558);
                    comparison196=comparison();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, comparison196.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end not_test

    public static class comparison_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start comparison
    // org/python/antlr/Python.g:470:1: comparison : expr ( comp_op expr )* ;
    public final comparison_return comparison() throws RecognitionException {
        comparison_return retval = new comparison_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expr_return expr197 = null;

        comp_op_return comp_op198 = null;

        expr_return expr199 = null;



        try {
            // org/python/antlr/Python.g:471:7: ( expr ( comp_op expr )* )
            // org/python/antlr/Python.g:471:7: expr ( comp_op expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_comparison2573);
            expr197=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr197.getTree());
            // org/python/antlr/Python.g:471:12: ( comp_op expr )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==161) ) {
                    switch ( input.LA(2) ) {
                    case PLUS:
                    case MINUS:
                    case TILDE:
                        {
                        switch ( input.LA(3) ) {
                        case PLUS:
                        case MINUS:
                        case TILDE:
                            {
                            int LA60_15 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case LPAREN:
                            {
                            int LA60_16 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case LBRACK:
                            {
                            int LA60_17 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case LCURLY:
                            {
                            int LA60_18 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case BACKQUOTE:
                            {
                            int LA60_19 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case NAME:
                            {
                            int LA60_20 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case INT:
                            {
                            int LA60_21 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case LONGINT:
                            {
                            int LA60_22 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case FLOAT:
                            {
                            int LA60_23 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case COMPLEX:
                            {
                            int LA60_24 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;
                        case STRING:
                            {
                            int LA60_25 = input.LA(4);

                            if ( (synpred91()) ) {
                                alt60=1;
                            }


                            }
                            break;

                        }

                        }
                        break;
                    case LPAREN:
                        {
                        int LA60_5 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case LBRACK:
                        {
                        int LA60_6 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case LCURLY:
                        {
                        int LA60_7 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case BACKQUOTE:
                        {
                        int LA60_8 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case NAME:
                        {
                        int LA60_9 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case INT:
                        {
                        int LA60_10 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case LONGINT:
                        {
                        int LA60_11 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case FLOAT:
                        {
                        int LA60_12 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case COMPLEX:
                        {
                        int LA60_13 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;
                    case STRING:
                        {
                        int LA60_14 = input.LA(3);

                        if ( (synpred91()) ) {
                            alt60=1;
                        }


                        }
                        break;

                    }

                }
                else if ( ((LA60_0>=LESS && LA60_0<=NOTEQUAL)||(LA60_0>=174 && LA60_0<=175)) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // org/python/antlr/Python.g:471:13: comp_op expr
            	    {
            	    pushFollow(FOLLOW_comp_op_in_comparison2576);
            	    comp_op198=comp_op();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, comp_op198.getTree());
            	    pushFollow(FOLLOW_expr_in_comparison2578);
            	    expr199=expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, expr199.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end comparison

    public static class comp_op_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start comp_op
    // org/python/antlr/Python.g:480:1: comp_op : ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | 'in' | 'not' 'in' | 'is' | 'is' 'not' );
    public final comp_op_return comp_op() throws RecognitionException {
        comp_op_return retval = new comp_op_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LESS200=null;
        Token GREATER201=null;
        Token EQUAL202=null;
        Token GREATEREQUAL203=null;
        Token LESSEQUAL204=null;
        Token ALT_NOTEQUAL205=null;
        Token NOTEQUAL206=null;
        Token string_literal207=null;
        Token string_literal208=null;
        Token string_literal209=null;
        Token string_literal210=null;
        Token string_literal211=null;
        Token string_literal212=null;

        CommonTree LESS200_tree=null;
        CommonTree GREATER201_tree=null;
        CommonTree EQUAL202_tree=null;
        CommonTree GREATEREQUAL203_tree=null;
        CommonTree LESSEQUAL204_tree=null;
        CommonTree ALT_NOTEQUAL205_tree=null;
        CommonTree NOTEQUAL206_tree=null;
        CommonTree string_literal207_tree=null;
        CommonTree string_literal208_tree=null;
        CommonTree string_literal209_tree=null;
        CommonTree string_literal210_tree=null;
        CommonTree string_literal211_tree=null;
        CommonTree string_literal212_tree=null;

        try {
            // org/python/antlr/Python.g:480:10: ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | 'in' | 'not' 'in' | 'is' | 'is' 'not' )
            int alt61=11;
            switch ( input.LA(1) ) {
            case LESS:
                {
                alt61=1;
                }
                break;
            case GREATER:
                {
                alt61=2;
                }
                break;
            case EQUAL:
                {
                alt61=3;
                }
                break;
            case GREATEREQUAL:
                {
                alt61=4;
                }
                break;
            case LESSEQUAL:
                {
                alt61=5;
                }
                break;
            case ALT_NOTEQUAL:
                {
                alt61=6;
                }
                break;
            case NOTEQUAL:
                {
                alt61=7;
                }
                break;
            case 161:
                {
                alt61=8;
                }
                break;
            case 174:
                {
                alt61=9;
                }
                break;
            case 175:
                {
                int LA61_10 = input.LA(2);

                if ( (LA61_10==174) ) {
                    alt61=11;
                }
                else if ( (LA61_10==NAME||LA61_10==LPAREN||(LA61_10>=PLUS && LA61_10<=MINUS)||(LA61_10>=TILDE && LA61_10<=LBRACK)||LA61_10==LCURLY||(LA61_10>=BACKQUOTE && LA61_10<=STRING)) ) {
                    alt61=10;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("480:1: comp_op : ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | 'in' | 'not' 'in' | 'is' | 'is' 'not' );", 61, 10, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("480:1: comp_op : ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | 'in' | 'not' 'in' | 'is' | 'is' 'not' );", 61, 0, input);

                throw nvae;
            }

            switch (alt61) {
                case 1 :
                    // org/python/antlr/Python.g:480:10: LESS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESS200=(Token)input.LT(1);
                    match(input,LESS,FOLLOW_LESS_in_comp_op2591); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LESS200_tree = (CommonTree)adaptor.create(LESS200);
                    adaptor.addChild(root_0, LESS200_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:481:3: GREATER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER201=(Token)input.LT(1);
                    match(input,GREATER,FOLLOW_GREATER_in_comp_op2595); if (failed) return retval;
                    if ( backtracking==0 ) {
                    GREATER201_tree = (CommonTree)adaptor.create(GREATER201);
                    adaptor.addChild(root_0, GREATER201_tree);
                    }

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:482:3: EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EQUAL202=(Token)input.LT(1);
                    match(input,EQUAL,FOLLOW_EQUAL_in_comp_op2599); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQUAL202_tree = (CommonTree)adaptor.create(EQUAL202);
                    adaptor.addChild(root_0, EQUAL202_tree);
                    }

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:483:3: GREATEREQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATEREQUAL203=(Token)input.LT(1);
                    match(input,GREATEREQUAL,FOLLOW_GREATEREQUAL_in_comp_op2603); if (failed) return retval;
                    if ( backtracking==0 ) {
                    GREATEREQUAL203_tree = (CommonTree)adaptor.create(GREATEREQUAL203);
                    adaptor.addChild(root_0, GREATEREQUAL203_tree);
                    }

                    }
                    break;
                case 5 :
                    // org/python/antlr/Python.g:484:3: LESSEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESSEQUAL204=(Token)input.LT(1);
                    match(input,LESSEQUAL,FOLLOW_LESSEQUAL_in_comp_op2607); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LESSEQUAL204_tree = (CommonTree)adaptor.create(LESSEQUAL204);
                    adaptor.addChild(root_0, LESSEQUAL204_tree);
                    }

                    }
                    break;
                case 6 :
                    // org/python/antlr/Python.g:485:3: ALT_NOTEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ALT_NOTEQUAL205=(Token)input.LT(1);
                    match(input,ALT_NOTEQUAL,FOLLOW_ALT_NOTEQUAL_in_comp_op2611); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ALT_NOTEQUAL205_tree = (CommonTree)adaptor.create(ALT_NOTEQUAL205);
                    adaptor.addChild(root_0, ALT_NOTEQUAL205_tree);
                    }

                    }
                    break;
                case 7 :
                    // org/python/antlr/Python.g:486:3: NOTEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOTEQUAL206=(Token)input.LT(1);
                    match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_comp_op2615); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NOTEQUAL206_tree = (CommonTree)adaptor.create(NOTEQUAL206);
                    adaptor.addChild(root_0, NOTEQUAL206_tree);
                    }

                    }
                    break;
                case 8 :
                    // org/python/antlr/Python.g:487:3: 'in'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal207=(Token)input.LT(1);
                    match(input,161,FOLLOW_161_in_comp_op2619); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal207_tree = (CommonTree)adaptor.create(string_literal207);
                    adaptor.addChild(root_0, string_literal207_tree);
                    }

                    }
                    break;
                case 9 :
                    // org/python/antlr/Python.g:488:3: 'not' 'in'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal208=(Token)input.LT(1);
                    match(input,174,FOLLOW_174_in_comp_op2623); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal208_tree = (CommonTree)adaptor.create(string_literal208);
                    adaptor.addChild(root_0, string_literal208_tree);
                    }
                    string_literal209=(Token)input.LT(1);
                    match(input,161,FOLLOW_161_in_comp_op2625); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal209_tree = (CommonTree)adaptor.create(string_literal209);
                    adaptor.addChild(root_0, string_literal209_tree);
                    }

                    }
                    break;
                case 10 :
                    // org/python/antlr/Python.g:489:3: 'is'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal210=(Token)input.LT(1);
                    match(input,175,FOLLOW_175_in_comp_op2629); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal210_tree = (CommonTree)adaptor.create(string_literal210);
                    adaptor.addChild(root_0, string_literal210_tree);
                    }

                    }
                    break;
                case 11 :
                    // org/python/antlr/Python.g:490:3: 'is' 'not'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal211=(Token)input.LT(1);
                    match(input,175,FOLLOW_175_in_comp_op2633); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal211_tree = (CommonTree)adaptor.create(string_literal211);
                    adaptor.addChild(root_0, string_literal211_tree);
                    }
                    string_literal212=(Token)input.LT(1);
                    match(input,174,FOLLOW_174_in_comp_op2635); if (failed) return retval;
                    if ( backtracking==0 ) {
                    string_literal212_tree = (CommonTree)adaptor.create(string_literal212);
                    adaptor.addChild(root_0, string_literal212_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end comp_op

    public static class expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expr
    // org/python/antlr/Python.g:497:1: expr : xor_expr ( VBAR xor_expr )* ;
    public final expr_return expr() throws RecognitionException {
        expr_return retval = new expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token VBAR214=null;
        xor_expr_return xor_expr213 = null;

        xor_expr_return xor_expr215 = null;


        CommonTree VBAR214_tree=null;

        try {
            // org/python/antlr/Python.g:497:7: ( xor_expr ( VBAR xor_expr )* )
            // org/python/antlr/Python.g:497:7: xor_expr ( VBAR xor_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_xor_expr_in_expr2652);
            xor_expr213=xor_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, xor_expr213.getTree());
            // org/python/antlr/Python.g:497:16: ( VBAR xor_expr )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==VBAR) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // org/python/antlr/Python.g:497:17: VBAR xor_expr
            	    {
            	    VBAR214=(Token)input.LT(1);
            	    match(input,VBAR,FOLLOW_VBAR_in_expr2655); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    VBAR214_tree = (CommonTree)adaptor.create(VBAR214);
            	    root_0 = (CommonTree)adaptor.becomeRoot(VBAR214_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_xor_expr_in_expr2658);
            	    xor_expr215=xor_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, xor_expr215.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr

    public static class xor_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start xor_expr
    // org/python/antlr/Python.g:500:1: xor_expr : and_expr ( CIRCUMFLEX and_expr )* ;
    public final xor_expr_return xor_expr() throws RecognitionException {
        xor_expr_return retval = new xor_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CIRCUMFLEX217=null;
        and_expr_return and_expr216 = null;

        and_expr_return and_expr218 = null;


        CommonTree CIRCUMFLEX217_tree=null;

        try {
            // org/python/antlr/Python.g:500:11: ( and_expr ( CIRCUMFLEX and_expr )* )
            // org/python/antlr/Python.g:500:11: and_expr ( CIRCUMFLEX and_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_and_expr_in_xor_expr2669);
            and_expr216=and_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, and_expr216.getTree());
            // org/python/antlr/Python.g:500:20: ( CIRCUMFLEX and_expr )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==CIRCUMFLEX) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // org/python/antlr/Python.g:500:21: CIRCUMFLEX and_expr
            	    {
            	    CIRCUMFLEX217=(Token)input.LT(1);
            	    match(input,CIRCUMFLEX,FOLLOW_CIRCUMFLEX_in_xor_expr2672); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    CIRCUMFLEX217_tree = (CommonTree)adaptor.create(CIRCUMFLEX217);
            	    root_0 = (CommonTree)adaptor.becomeRoot(CIRCUMFLEX217_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_and_expr_in_xor_expr2675);
            	    and_expr218=and_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, and_expr218.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end xor_expr

    public static class and_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start and_expr
    // org/python/antlr/Python.g:503:1: and_expr : shift_expr ( AMPER shift_expr )* ;
    public final and_expr_return and_expr() throws RecognitionException {
        and_expr_return retval = new and_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AMPER220=null;
        shift_expr_return shift_expr219 = null;

        shift_expr_return shift_expr221 = null;


        CommonTree AMPER220_tree=null;

        try {
            // org/python/antlr/Python.g:503:11: ( shift_expr ( AMPER shift_expr )* )
            // org/python/antlr/Python.g:503:11: shift_expr ( AMPER shift_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shift_expr_in_and_expr2686);
            shift_expr219=shift_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, shift_expr219.getTree());
            // org/python/antlr/Python.g:503:22: ( AMPER shift_expr )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==AMPER) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // org/python/antlr/Python.g:503:23: AMPER shift_expr
            	    {
            	    AMPER220=(Token)input.LT(1);
            	    match(input,AMPER,FOLLOW_AMPER_in_and_expr2689); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    AMPER220_tree = (CommonTree)adaptor.create(AMPER220);
            	    root_0 = (CommonTree)adaptor.becomeRoot(AMPER220_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_shift_expr_in_and_expr2692);
            	    shift_expr221=shift_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, shift_expr221.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end and_expr

    public static class shift_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start shift_expr
    // org/python/antlr/Python.g:506:1: shift_expr : arith_expr ( ( LEFTSHIFT | RIGHTSHIFT ) arith_expr )* ;
    public final shift_expr_return shift_expr() throws RecognitionException {
        shift_expr_return retval = new shift_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set223=null;
        arith_expr_return arith_expr222 = null;

        arith_expr_return arith_expr224 = null;


        CommonTree set223_tree=null;

        try {
            // org/python/antlr/Python.g:506:13: ( arith_expr ( ( LEFTSHIFT | RIGHTSHIFT ) arith_expr )* )
            // org/python/antlr/Python.g:506:13: arith_expr ( ( LEFTSHIFT | RIGHTSHIFT ) arith_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arith_expr_in_shift_expr2703);
            arith_expr222=arith_expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, arith_expr222.getTree());
            // org/python/antlr/Python.g:506:24: ( ( LEFTSHIFT | RIGHTSHIFT ) arith_expr )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==RIGHTSHIFT||LA65_0==LEFTSHIFT) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // org/python/antlr/Python.g:506:25: ( LEFTSHIFT | RIGHTSHIFT ) arith_expr
            	    {
            	    set223=(Token)input.LT(1);
            	    if ( input.LA(1)==RIGHTSHIFT||input.LA(1)==LEFTSHIFT ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set223), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_shift_expr2706);    throw mse;
            	    }

            	    pushFollow(FOLLOW_arith_expr_in_shift_expr2713);
            	    arith_expr224=arith_expr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, arith_expr224.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end shift_expr

    public static class arith_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arith_expr
    // org/python/antlr/Python.g:509:1: arith_expr : term ( ( PLUS | MINUS ) term )* ;
    public final arith_expr_return arith_expr() throws RecognitionException {
        arith_expr_return retval = new arith_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set226=null;
        term_return term225 = null;

        term_return term227 = null;


        CommonTree set226_tree=null;

        try {
            // org/python/antlr/Python.g:509:13: ( term ( ( PLUS | MINUS ) term )* )
            // org/python/antlr/Python.g:509:13: term ( ( PLUS | MINUS ) term )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_term_in_arith_expr2724);
            term225=term();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, term225.getTree());
            // org/python/antlr/Python.g:509:18: ( ( PLUS | MINUS ) term )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( ((LA66_0>=PLUS && LA66_0<=MINUS)) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // org/python/antlr/Python.g:509:19: ( PLUS | MINUS ) term
            	    {
            	    set226=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set226), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_arith_expr2727);    throw mse;
            	    }

            	    pushFollow(FOLLOW_term_in_arith_expr2734);
            	    term227=term();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, term227.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end arith_expr

    public static class term_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start term
    // org/python/antlr/Python.g:513:1: term : factor ( ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor )* ;
    public final term_return term() throws RecognitionException {
        term_return retval = new term_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set229=null;
        factor_return factor228 = null;

        factor_return factor230 = null;


        CommonTree set229_tree=null;

        try {
            // org/python/antlr/Python.g:513:7: ( factor ( ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor )* )
            // org/python/antlr/Python.g:513:7: factor ( ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_factor_in_term2747);
            factor228=factor();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, factor228.getTree());
            // org/python/antlr/Python.g:513:14: ( ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==STAR||(LA67_0>=SLASH && LA67_0<=DOUBLESLASH)) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // org/python/antlr/Python.g:513:15: ( STAR | SLASH | PERCENT | DOUBLESLASH ) factor
            	    {
            	    set229=(Token)input.LT(1);
            	    if ( input.LA(1)==STAR||(input.LA(1)>=SLASH && input.LA(1)<=DOUBLESLASH) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set229), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_term2750);    throw mse;
            	    }

            	    pushFollow(FOLLOW_factor_in_term2768);
            	    factor230=factor();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, factor230.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end term

    public static class factor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start factor
    // org/python/antlr/Python.g:516:1: factor : ( ( PLUS | MINUS | TILDE ) factor | power );
    public final factor_return factor() throws RecognitionException {
        factor_return retval = new factor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set231=null;
        factor_return factor232 = null;

        power_return power233 = null;


        CommonTree set231_tree=null;

        try {
            // org/python/antlr/Python.g:517:4: ( ( PLUS | MINUS | TILDE ) factor | power )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=PLUS && LA68_0<=MINUS)||LA68_0==TILDE) ) {
                alt68=1;
            }
            else if ( (LA68_0==NAME||LA68_0==LPAREN||LA68_0==LBRACK||LA68_0==LCURLY||(LA68_0>=BACKQUOTE && LA68_0<=STRING)) ) {
                alt68=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("516:1: factor : ( ( PLUS | MINUS | TILDE ) factor | power );", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // org/python/antlr/Python.g:517:4: ( PLUS | MINUS | TILDE ) factor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    set231=(Token)input.LT(1);
                    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS)||input.LA(1)==TILDE ) {
                        input.consume();
                        if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set231), root_0);
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_factor2781);    throw mse;
                    }

                    pushFollow(FOLLOW_factor_in_factor2790);
                    factor232=factor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, factor232.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:518:4: power
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_power_in_factor2795);
                    power233=power();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, power233.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end factor

    public static class power_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start power
    // org/python/antlr/Python.g:521:1: power : (t= trailer -> trailer ) ( options {greedy=true; } : DOUBLESTAR factor )? ;
    public final power_return power() throws RecognitionException {
        power_return retval = new power_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOUBLESTAR234=null;
        trailer_return t = null;

        factor_return factor235 = null;


        CommonTree DOUBLESTAR234_tree=null;
        RewriteRuleTokenStream stream_DOUBLESTAR=new RewriteRuleTokenStream(adaptor,"token DOUBLESTAR");
        RewriteRuleSubtreeStream stream_trailer=new RewriteRuleSubtreeStream(adaptor,"rule trailer");
        RewriteRuleSubtreeStream stream_factor=new RewriteRuleSubtreeStream(adaptor,"rule factor");
        try {
            // org/python/antlr/Python.g:522:4: ( (t= trailer -> trailer ) ( options {greedy=true; } : DOUBLESTAR factor )? )
            // org/python/antlr/Python.g:522:4: (t= trailer -> trailer ) ( options {greedy=true; } : DOUBLESTAR factor )?
            {
            // org/python/antlr/Python.g:522:4: (t= trailer -> trailer )
            // org/python/antlr/Python.g:522:5: t= trailer
            {
            pushFollow(FOLLOW_trailer_in_power2809);
            t=trailer();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_trailer.add(t.getTree());

            // AST REWRITE
            // elements: trailer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 522:14: -> trailer
            {
                adaptor.addChild(root_0, stream_trailer.next());

            }

            }

            }

            // org/python/antlr/Python.g:522:25: ( options {greedy=true; } : DOUBLESTAR factor )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==DOUBLESTAR) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // org/python/antlr/Python.g:522:49: DOUBLESTAR factor
                    {
                    DOUBLESTAR234=(Token)input.LT(1);
                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_power2822); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR234);

                    pushFollow(FOLLOW_factor_in_power2824);
                    factor235=factor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_factor.add(factor235.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end power

    public static class atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atom
    // org/python/antlr/Python.g:525:1: atom : ( LPAREN ( exprlist )? RPAREN -> ( exprlist )? | LBRACK ( listmaker )? RBRACK -> ^( List ( listmaker )? ) | LCURLY ( dictmaker )? RCURLY -> ^( Dict ( dictmaker )? ) | BACKQUOTE testlist BACKQUOTE | NAME -> ^( Name ^( Id NAME ) ) | INT -> ^( Num ^( N INT ) ) | LONGINT | FLOAT | COMPLEX | ( STRING )+ -> ^( Str ^( S STRING ) ) );
    public final atom_return atom() throws RecognitionException {
        atom_return retval = new atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN236=null;
        Token RPAREN238=null;
        Token LBRACK239=null;
        Token RBRACK241=null;
        Token LCURLY242=null;
        Token RCURLY244=null;
        Token BACKQUOTE245=null;
        Token BACKQUOTE247=null;
        Token NAME248=null;
        Token INT249=null;
        Token LONGINT250=null;
        Token FLOAT251=null;
        Token COMPLEX252=null;
        Token STRING253=null;
        exprlist_return exprlist237 = null;

        listmaker_return listmaker240 = null;

        dictmaker_return dictmaker243 = null;

        testlist_return testlist246 = null;


        CommonTree LPAREN236_tree=null;
        CommonTree RPAREN238_tree=null;
        CommonTree LBRACK239_tree=null;
        CommonTree RBRACK241_tree=null;
        CommonTree LCURLY242_tree=null;
        CommonTree RCURLY244_tree=null;
        CommonTree BACKQUOTE245_tree=null;
        CommonTree BACKQUOTE247_tree=null;
        CommonTree NAME248_tree=null;
        CommonTree INT249_tree=null;
        CommonTree LONGINT250_tree=null;
        CommonTree FLOAT251_tree=null;
        CommonTree COMPLEX252_tree=null;
        CommonTree STRING253_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_INT=new RewriteRuleTokenStream(adaptor,"token INT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_dictmaker=new RewriteRuleSubtreeStream(adaptor,"rule dictmaker");
        RewriteRuleSubtreeStream stream_listmaker=new RewriteRuleSubtreeStream(adaptor,"rule listmaker");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        try {
            // org/python/antlr/Python.g:526:7: ( LPAREN ( exprlist )? RPAREN -> ( exprlist )? | LBRACK ( listmaker )? RBRACK -> ^( List ( listmaker )? ) | LCURLY ( dictmaker )? RCURLY -> ^( Dict ( dictmaker )? ) | BACKQUOTE testlist BACKQUOTE | NAME -> ^( Name ^( Id NAME ) ) | INT -> ^( Num ^( N INT ) ) | LONGINT | FLOAT | COMPLEX | ( STRING )+ -> ^( Str ^( S STRING ) ) )
            int alt74=10;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt74=1;
                }
                break;
            case LBRACK:
                {
                alt74=2;
                }
                break;
            case LCURLY:
                {
                alt74=3;
                }
                break;
            case BACKQUOTE:
                {
                alt74=4;
                }
                break;
            case NAME:
                {
                alt74=5;
                }
                break;
            case INT:
                {
                alt74=6;
                }
                break;
            case LONGINT:
                {
                alt74=7;
                }
                break;
            case FLOAT:
                {
                alt74=8;
                }
                break;
            case COMPLEX:
                {
                alt74=9;
                }
                break;
            case STRING:
                {
                alt74=10;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("525:1: atom : ( LPAREN ( exprlist )? RPAREN -> ( exprlist )? | LBRACK ( listmaker )? RBRACK -> ^( List ( listmaker )? ) | LCURLY ( dictmaker )? RCURLY -> ^( Dict ( dictmaker )? ) | BACKQUOTE testlist BACKQUOTE | NAME -> ^( Name ^( Id NAME ) ) | INT -> ^( Num ^( N INT ) ) | LONGINT | FLOAT | COMPLEX | ( STRING )+ -> ^( Str ^( S STRING ) ) );", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // org/python/antlr/Python.g:526:7: LPAREN ( exprlist )? RPAREN
                    {
                    LPAREN236=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_atom2841); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN236);

                    // org/python/antlr/Python.g:526:14: ( exprlist )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==NAME||LA70_0==LPAREN||(LA70_0>=PLUS && LA70_0<=MINUS)||(LA70_0>=TILDE && LA70_0<=LBRACK)||LA70_0==LCURLY||(LA70_0>=BACKQUOTE && LA70_0<=STRING)) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // org/python/antlr/Python.g:526:15: exprlist
                            {
                            pushFollow(FOLLOW_exprlist_in_atom2844);
                            exprlist237=exprlist();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_exprlist.add(exprlist237.getTree());

                            }
                            break;

                    }

                    RPAREN238=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_atom2848); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN238);


                    // AST REWRITE
                    // elements: exprlist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 526:33: -> ( exprlist )?
                    {
                        // org/python/antlr/Python.g:526:36: ( exprlist )?
                        if ( stream_exprlist.hasNext() ) {
                            adaptor.addChild(root_0, stream_exprlist.next());

                        }
                        stream_exprlist.reset();

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:527:4: LBRACK ( listmaker )? RBRACK
                    {
                    LBRACK239=(Token)input.LT(1);
                    match(input,LBRACK,FOLLOW_LBRACK_in_atom2858); if (failed) return retval;
                    if ( backtracking==0 ) stream_LBRACK.add(LBRACK239);

                    // org/python/antlr/Python.g:527:11: ( listmaker )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==NAME||LA71_0==LPAREN||(LA71_0>=PLUS && LA71_0<=MINUS)||(LA71_0>=TILDE && LA71_0<=LBRACK)||LA71_0==LCURLY||(LA71_0>=BACKQUOTE && LA71_0<=STRING)) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // org/python/antlr/Python.g:527:12: listmaker
                            {
                            pushFollow(FOLLOW_listmaker_in_atom2861);
                            listmaker240=listmaker();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_listmaker.add(listmaker240.getTree());

                            }
                            break;

                    }

                    RBRACK241=(Token)input.LT(1);
                    match(input,RBRACK,FOLLOW_RBRACK_in_atom2865); if (failed) return retval;
                    if ( backtracking==0 ) stream_RBRACK.add(RBRACK241);


                    // AST REWRITE
                    // elements: listmaker
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 527:31: -> ^( List ( listmaker )? )
                    {
                        // org/python/antlr/Python.g:527:34: ^( List ( listmaker )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(List, "List"), root_1);

                        // org/python/antlr/Python.g:527:41: ( listmaker )?
                        if ( stream_listmaker.hasNext() ) {
                            adaptor.addChild(root_1, stream_listmaker.next());

                        }
                        stream_listmaker.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:528:4: LCURLY ( dictmaker )? RCURLY
                    {
                    LCURLY242=(Token)input.LT(1);
                    match(input,LCURLY,FOLLOW_LCURLY_in_atom2879); if (failed) return retval;
                    if ( backtracking==0 ) stream_LCURLY.add(LCURLY242);

                    // org/python/antlr/Python.g:528:11: ( dictmaker )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==NAME||LA72_0==LPAREN||(LA72_0>=PLUS && LA72_0<=MINUS)||(LA72_0>=TILDE && LA72_0<=LBRACK)||LA72_0==LCURLY||(LA72_0>=BACKQUOTE && LA72_0<=STRING)||LA72_0==174||LA72_0==176) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // org/python/antlr/Python.g:528:12: dictmaker
                            {
                            pushFollow(FOLLOW_dictmaker_in_atom2882);
                            dictmaker243=dictmaker();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_dictmaker.add(dictmaker243.getTree());

                            }
                            break;

                    }

                    RCURLY244=(Token)input.LT(1);
                    match(input,RCURLY,FOLLOW_RCURLY_in_atom2886); if (failed) return retval;
                    if ( backtracking==0 ) stream_RCURLY.add(RCURLY244);


                    // AST REWRITE
                    // elements: dictmaker
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 528:31: -> ^( Dict ( dictmaker )? )
                    {
                        // org/python/antlr/Python.g:528:34: ^( Dict ( dictmaker )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Dict, "Dict"), root_1);

                        // org/python/antlr/Python.g:528:41: ( dictmaker )?
                        if ( stream_dictmaker.hasNext() ) {
                            adaptor.addChild(root_1, stream_dictmaker.next());

                        }
                        stream_dictmaker.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:529:4: BACKQUOTE testlist BACKQUOTE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BACKQUOTE245=(Token)input.LT(1);
                    match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom2901); if (failed) return retval;
                    if ( backtracking==0 ) {
                    BACKQUOTE245_tree = (CommonTree)adaptor.create(BACKQUOTE245);
                    adaptor.addChild(root_0, BACKQUOTE245_tree);
                    }
                    pushFollow(FOLLOW_testlist_in_atom2903);
                    testlist246=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, testlist246.getTree());
                    BACKQUOTE247=(Token)input.LT(1);
                    match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom2905); if (failed) return retval;
                    if ( backtracking==0 ) {
                    BACKQUOTE247_tree = (CommonTree)adaptor.create(BACKQUOTE247);
                    adaptor.addChild(root_0, BACKQUOTE247_tree);
                    }

                    }
                    break;
                case 5 :
                    // org/python/antlr/Python.g:530:4: NAME
                    {
                    NAME248=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_atom2910); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(NAME248);


                    // AST REWRITE
                    // elements: NAME
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 530:9: -> ^( Name ^( Id NAME ) )
                    {
                        // org/python/antlr/Python.g:530:12: ^( Name ^( Id NAME ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_1);

                        // org/python/antlr/Python.g:530:19: ^( Id NAME )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Id, "Id"), root_2);

                        adaptor.addChild(root_2, stream_NAME.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 6 :
                    // org/python/antlr/Python.g:531:4: INT
                    {
                    INT249=(Token)input.LT(1);
                    match(input,INT,FOLLOW_INT_in_atom2927); if (failed) return retval;
                    if ( backtracking==0 ) stream_INT.add(INT249);


                    // AST REWRITE
                    // elements: INT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 531:8: -> ^( Num ^( N INT ) )
                    {
                        // org/python/antlr/Python.g:531:11: ^( Num ^( N INT ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Num, "Num"), root_1);

                        // org/python/antlr/Python.g:531:17: ^( N INT )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(N, "N"), root_2);

                        adaptor.addChild(root_2, stream_INT.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 7 :
                    // org/python/antlr/Python.g:532:8: LONGINT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LONGINT250=(Token)input.LT(1);
                    match(input,LONGINT,FOLLOW_LONGINT_in_atom2948); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LONGINT250_tree = (CommonTree)adaptor.create(LONGINT250);
                    adaptor.addChild(root_0, LONGINT250_tree);
                    }

                    }
                    break;
                case 8 :
                    // org/python/antlr/Python.g:533:4: FLOAT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FLOAT251=(Token)input.LT(1);
                    match(input,FLOAT,FOLLOW_FLOAT_in_atom2953); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FLOAT251_tree = (CommonTree)adaptor.create(FLOAT251);
                    adaptor.addChild(root_0, FLOAT251_tree);
                    }

                    }
                    break;
                case 9 :
                    // org/python/antlr/Python.g:534:8: COMPLEX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COMPLEX252=(Token)input.LT(1);
                    match(input,COMPLEX,FOLLOW_COMPLEX_in_atom2962); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COMPLEX252_tree = (CommonTree)adaptor.create(COMPLEX252);
                    adaptor.addChild(root_0, COMPLEX252_tree);
                    }

                    }
                    break;
                case 10 :
                    // org/python/antlr/Python.g:535:4: ( STRING )+
                    {
                    // org/python/antlr/Python.g:535:4: ( STRING )+
                    int cnt73=0;
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==STRING) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:535:5: STRING
                    	    {
                    	    STRING253=(Token)input.LT(1);
                    	    match(input,STRING,FOLLOW_STRING_in_atom2968); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_STRING.add(STRING253);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt73 >= 1 ) break loop73;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(73, input);
                                throw eee;
                        }
                        cnt73++;
                    } while (true);


                    // AST REWRITE
                    // elements: STRING
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 535:14: -> ^( Str ^( S STRING ) )
                    {
                        // org/python/antlr/Python.g:535:17: ^( Str ^( S STRING ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Str, "Str"), root_1);

                        // org/python/antlr/Python.g:535:23: ^( S STRING )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(S, "S"), root_2);

                        adaptor.addChild(root_2, stream_STRING.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end atom

    public static class listmaker_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start listmaker
    // org/python/antlr/Python.g:538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );
    public final listmaker_return listmaker() throws RecognitionException {
        listmaker_return retval = new listmaker_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA255=null;
        Token COMMA257=null;
        Token COMMA259=null;
        expr_return expr254 = null;

        expr_return expr256 = null;

        expr_return expr258 = null;

        listcomp_return listcomp260 = null;

        expr_return expr261 = null;


        CommonTree COMMA255_tree=null;
        CommonTree COMMA257_tree=null;
        CommonTree COMMA259_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/python/antlr/Python.g:539:9: ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr )
            int alt77=4;
            switch ( input.LA(1) ) {
            case PLUS:
            case MINUS:
            case TILDE:
                {
                int LA77_1 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 1, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA77_2 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 2, input);

                    throw nvae;
                }
                }
                break;
            case LBRACK:
                {
                int LA77_3 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 3, input);

                    throw nvae;
                }
                }
                break;
            case LCURLY:
                {
                int LA77_4 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 4, input);

                    throw nvae;
                }
                }
                break;
            case BACKQUOTE:
                {
                int LA77_5 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 5, input);

                    throw nvae;
                }
                }
                break;
            case NAME:
                {
                int LA77_6 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 6, input);

                    throw nvae;
                }
                }
                break;
            case INT:
                {
                int LA77_7 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 7, input);

                    throw nvae;
                }
                }
                break;
            case LONGINT:
                {
                int LA77_8 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 8, input);

                    throw nvae;
                }
                }
                break;
            case FLOAT:
                {
                int LA77_9 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 9, input);

                    throw nvae;
                }
                }
                break;
            case COMPLEX:
                {
                int LA77_10 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 10, input);

                    throw nvae;
                }
                }
                break;
            case STRING:
                {
                int LA77_11 = input.LA(2);

                if ( (synpred132()) ) {
                    alt77=1;
                }
                else if ( (synpred133()) ) {
                    alt77=2;
                }
                else if ( (synpred134()) ) {
                    alt77=3;
                }
                else if ( (true) ) {
                    alt77=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 11, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("538:1: listmaker : ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ( expr )+ | expr COMMA -> expr | listcomp | expr -> expr );", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // org/python/antlr/Python.g:539:9: expr ( options {k=2; } : COMMA expr )+ ( COMMA )?
                    {
                    pushFollow(FOLLOW_expr_in_listmaker2999);
                    expr254=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr254.getTree());
                    // org/python/antlr/Python.g:539:14: ( options {k=2; } : COMMA expr )+
                    int cnt75=0;
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( (LA75_0==COMMA) ) {
                            int LA75_1 = input.LA(2);

                            if ( (LA75_1==NAME||LA75_1==LPAREN||(LA75_1>=PLUS && LA75_1<=MINUS)||(LA75_1>=TILDE && LA75_1<=LBRACK)||LA75_1==LCURLY||(LA75_1>=BACKQUOTE && LA75_1<=STRING)) ) {
                                alt75=1;
                            }


                        }


                        switch (alt75) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:539:30: COMMA expr
                    	    {
                    	    COMMA255=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_listmaker3009); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA255);

                    	    pushFollow(FOLLOW_expr_in_listmaker3011);
                    	    expr256=expr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_expr.add(expr256.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt75 >= 1 ) break loop75;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(75, input);
                                throw eee;
                        }
                        cnt75++;
                    } while (true);

                    // org/python/antlr/Python.g:539:43: ( COMMA )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==COMMA) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // org/python/antlr/Python.g:539:44: COMMA
                            {
                            COMMA257=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_listmaker3016); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA257);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 539:52: -> ( expr )+
                    {
                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_0, stream_expr.next());

                        }
                        stream_expr.reset();

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:540:9: expr COMMA
                    {
                    pushFollow(FOLLOW_expr_in_listmaker3033);
                    expr258=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr258.getTree());
                    COMMA259=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_listmaker3035); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA259);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 540:20: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.next());

                    }

                    }

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:541:9: listcomp
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_listcomp_in_listmaker3049);
                    listcomp260=listcomp();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, listcomp260.getTree());

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:542:9: expr
                    {
                    pushFollow(FOLLOW_expr_in_listmaker3059);
                    expr261=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr261.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 542:14: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end listmaker

    public static class listcomp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start listcomp
    // org/python/antlr/Python.g:545:1: listcomp : expr list_for -> ^( ListComp ^( Target expr ) list_for ) ;
    public final listcomp_return listcomp() throws RecognitionException {
        listcomp_return retval = new listcomp_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expr_return expr262 = null;

        list_for_return list_for263 = null;


        RewriteRuleSubtreeStream stream_list_for=new RewriteRuleSubtreeStream(adaptor,"rule list_for");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/python/antlr/Python.g:546:8: ( expr list_for -> ^( ListComp ^( Target expr ) list_for ) )
            // org/python/antlr/Python.g:546:8: expr list_for
            {
            pushFollow(FOLLOW_expr_in_listcomp3078);
            expr262=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr262.getTree());
            pushFollow(FOLLOW_list_for_in_listcomp3080);
            list_for263=list_for();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_list_for.add(list_for263.getTree());

            // AST REWRITE
            // elements: list_for, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 547:5: -> ^( ListComp ^( Target expr ) list_for )
            {
                // org/python/antlr/Python.g:547:8: ^( ListComp ^( Target expr ) list_for )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ListComp, "ListComp"), root_1);

                // org/python/antlr/Python.g:547:19: ^( Target expr )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_expr.next());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_list_for.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end listcomp

    public static class genexp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start genexp
    // org/python/antlr/Python.g:550:1: genexp : expr list_for -> ^( Gen ^( Target expr ) list_for ) ;
    public final genexp_return genexp() throws RecognitionException {
        genexp_return retval = new genexp_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expr_return expr264 = null;

        list_for_return list_for265 = null;


        RewriteRuleSubtreeStream stream_list_for=new RewriteRuleSubtreeStream(adaptor,"rule list_for");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/python/antlr/Python.g:551:7: ( expr list_for -> ^( Gen ^( Target expr ) list_for ) )
            // org/python/antlr/Python.g:551:7: expr list_for
            {
            pushFollow(FOLLOW_expr_in_genexp3115);
            expr264=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr264.getTree());
            pushFollow(FOLLOW_list_for_in_genexp3117);
            list_for265=list_for();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_list_for.add(list_for265.getTree());

            // AST REWRITE
            // elements: expr, list_for
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 552:5: -> ^( Gen ^( Target expr ) list_for )
            {
                // org/python/antlr/Python.g:552:8: ^( Gen ^( Target expr ) list_for )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Gen, "Gen"), root_1);

                // org/python/antlr/Python.g:552:14: ^( Target expr )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                adaptor.addChild(root_2, stream_expr.next());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_list_for.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end genexp

    public static class lambdef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lambdef
    // org/python/antlr/Python.g:555:1: lambdef : 'lambda' ( varargslist )? COLON test ;
    public final lambdef_return lambdef() throws RecognitionException {
        lambdef_return retval = new lambdef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal266=null;
        Token COLON268=null;
        varargslist_return varargslist267 = null;

        test_return test269 = null;


        CommonTree string_literal266_tree=null;
        CommonTree COLON268_tree=null;

        try {
            // org/python/antlr/Python.g:555:10: ( 'lambda' ( varargslist )? COLON test )
            // org/python/antlr/Python.g:555:10: 'lambda' ( varargslist )? COLON test
            {
            root_0 = (CommonTree)adaptor.nil();

            string_literal266=(Token)input.LT(1);
            match(input,176,FOLLOW_176_in_lambdef3151); if (failed) return retval;
            if ( backtracking==0 ) {
            string_literal266_tree = (CommonTree)adaptor.create(string_literal266);
            adaptor.addChild(root_0, string_literal266_tree);
            }
            // org/python/antlr/Python.g:555:19: ( varargslist )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==NAME||LA78_0==LPAREN||(LA78_0>=STAR && LA78_0<=DOUBLESTAR)) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // org/python/antlr/Python.g:555:20: varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_lambdef3154);
                    varargslist267=varargslist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, varargslist267.getTree());

                    }
                    break;

            }

            COLON268=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_lambdef3158); if (failed) return retval;
            if ( backtracking==0 ) {
            COLON268_tree = (CommonTree)adaptor.create(COLON268);
            adaptor.addChild(root_0, COLON268_tree);
            }
            pushFollow(FOLLOW_test_in_lambdef3160);
            test269=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, test269.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lambdef

    public static class trailer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start trailer
    // org/python/antlr/Python.g:576:1: trailer : (a= atom -> atom ) ( ( LPAREN arglist RPAREN -> ^( Call ^( Func ^( ^( Ctx ^( Load ) ) ) ) arglist ) ) | LBRACK subscriptlist RBRACK -> ^( Subscript subscriptlist ) )* ( options {backtrack=true; } : DOT tr= trailer -> ^( Attribute ^( Value $tr $a) ) )? ;
    public final trailer_return trailer() throws RecognitionException {
        trailer_return retval = new trailer_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN270=null;
        Token RPAREN272=null;
        Token LBRACK273=null;
        Token RBRACK275=null;
        Token DOT276=null;
        atom_return a = null;

        trailer_return tr = null;

        arglist_return arglist271 = null;

        subscriptlist_return subscriptlist274 = null;


        CommonTree LPAREN270_tree=null;
        CommonTree RPAREN272_tree=null;
        CommonTree LBRACK273_tree=null;
        CommonTree RBRACK275_tree=null;
        CommonTree DOT276_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_arglist=new RewriteRuleSubtreeStream(adaptor,"rule arglist");
        RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
        RewriteRuleSubtreeStream stream_trailer=new RewriteRuleSubtreeStream(adaptor,"rule trailer");
        RewriteRuleSubtreeStream stream_subscriptlist=new RewriteRuleSubtreeStream(adaptor,"rule subscriptlist");
        try {
            // org/python/antlr/Python.g:576:12: ( (a= atom -> atom ) ( ( LPAREN arglist RPAREN -> ^( Call ^( Func ^( ^( Ctx ^( Load ) ) ) ) arglist ) ) | LBRACK subscriptlist RBRACK -> ^( Subscript subscriptlist ) )* ( options {backtrack=true; } : DOT tr= trailer -> ^( Attribute ^( Value $tr $a) ) )? )
            // org/python/antlr/Python.g:576:12: (a= atom -> atom ) ( ( LPAREN arglist RPAREN -> ^( Call ^( Func ^( ^( Ctx ^( Load ) ) ) ) arglist ) ) | LBRACK subscriptlist RBRACK -> ^( Subscript subscriptlist ) )* ( options {backtrack=true; } : DOT tr= trailer -> ^( Attribute ^( Value $tr $a) ) )?
            {
            // org/python/antlr/Python.g:576:12: (a= atom -> atom )
            // org/python/antlr/Python.g:576:13: a= atom
            {
            pushFollow(FOLLOW_atom_in_trailer3180);
            a=atom();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_atom.add(a.getTree());

            // AST REWRITE
            // elements: atom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 576:20: -> atom
            {
                adaptor.addChild(root_0, stream_atom.next());

            }

            }

            }

            // org/python/antlr/Python.g:577:5: ( ( LPAREN arglist RPAREN -> ^( Call ^( Func ^( ^( Ctx ^( Load ) ) ) ) arglist ) ) | LBRACK subscriptlist RBRACK -> ^( Subscript subscriptlist ) )*
            loop79:
            do {
                int alt79=3;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==LPAREN) ) {
                    alt79=1;
                }
                else if ( (LA79_0==LBRACK) ) {
                    alt79=2;
                }


                switch (alt79) {
            	case 1 :
            	    // org/python/antlr/Python.g:577:6: ( LPAREN arglist RPAREN -> ^( Call ^( Func ^( ^( Ctx ^( Load ) ) ) ) arglist ) )
            	    {
            	    // org/python/antlr/Python.g:577:6: ( LPAREN arglist RPAREN -> ^( Call ^( Func ^( ^( Ctx ^( Load ) ) ) ) arglist ) )
            	    // org/python/antlr/Python.g:577:8: LPAREN arglist RPAREN
            	    {
            	    LPAREN270=(Token)input.LT(1);
            	    match(input,LPAREN,FOLLOW_LPAREN_in_trailer3194); if (failed) return retval;
            	    if ( backtracking==0 ) stream_LPAREN.add(LPAREN270);

            	    pushFollow(FOLLOW_arglist_in_trailer3196);
            	    arglist271=arglist();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_arglist.add(arglist271.getTree());
            	    RPAREN272=(Token)input.LT(1);
            	    match(input,RPAREN,FOLLOW_RPAREN_in_trailer3198); if (failed) return retval;
            	    if ( backtracking==0 ) stream_RPAREN.add(RPAREN272);


            	    // AST REWRITE
            	    // elements: arglist
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    if ( backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 577:30: -> ^( Call ^( Func ^( ^( Ctx ^( Load ) ) ) ) arglist )
            	    {
            	        // org/python/antlr/Python.g:577:33: ^( Call ^( Func ^( ^( Ctx ^( Load ) ) ) ) arglist )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Call, "Call"), root_1);

            	        // org/python/antlr/Python.g:577:40: ^( Func ^( ^( Ctx ^( Load ) ) ) )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Func, "Func"), root_2);

            	        // org/python/antlr/Python.g:577:47: ^( ^( Ctx ^( Load ) ) )
            	        {
            	        CommonTree root_3 = (CommonTree)adaptor.nil();
            	        root_3 = (CommonTree)adaptor.becomeRoot(((CommonTree)a.tree), root_3);

            	        // org/python/antlr/Python.g:577:59: ^( Ctx ^( Load ) )
            	        {
            	        CommonTree root_4 = (CommonTree)adaptor.nil();
            	        root_4 = (CommonTree)adaptor.becomeRoot(adaptor.create(Ctx, "Ctx"), root_4);

            	        // org/python/antlr/Python.g:577:65: ^( Load )
            	        {
            	        CommonTree root_5 = (CommonTree)adaptor.nil();
            	        root_5 = (CommonTree)adaptor.becomeRoot(adaptor.create(Load, "Load"), root_5);

            	        adaptor.addChild(root_4, root_5);
            	        }

            	        adaptor.addChild(root_3, root_4);
            	        }

            	        adaptor.addChild(root_2, root_3);
            	        }

            	        adaptor.addChild(root_1, root_2);
            	        }
            	        adaptor.addChild(root_1, stream_arglist.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    }

            	    }


            	    }
            	    break;
            	case 2 :
            	    // org/python/antlr/Python.g:578:9: LBRACK subscriptlist RBRACK
            	    {
            	    LBRACK273=(Token)input.LT(1);
            	    match(input,LBRACK,FOLLOW_LBRACK_in_trailer3233); if (failed) return retval;
            	    if ( backtracking==0 ) stream_LBRACK.add(LBRACK273);

            	    pushFollow(FOLLOW_subscriptlist_in_trailer3235);
            	    subscriptlist274=subscriptlist();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_subscriptlist.add(subscriptlist274.getTree());
            	    RBRACK275=(Token)input.LT(1);
            	    match(input,RBRACK,FOLLOW_RBRACK_in_trailer3237); if (failed) return retval;
            	    if ( backtracking==0 ) stream_RBRACK.add(RBRACK275);


            	    // AST REWRITE
            	    // elements: subscriptlist
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    if ( backtracking==0 ) {
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 578:37: -> ^( Subscript subscriptlist )
            	    {
            	        // org/python/antlr/Python.g:578:40: ^( Subscript subscriptlist )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Subscript, "Subscript"), root_1);

            	        adaptor.addChild(root_1, stream_subscriptlist.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }

            	    }

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            // org/python/antlr/Python.g:585:2: ( options {backtrack=true; } : DOT tr= trailer -> ^( Attribute ^( Value $tr $a) ) )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==DOT) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // org/python/antlr/Python.g:585:30: DOT tr= trailer
                    {
                    DOT276=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_trailer3301); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOT.add(DOT276);

                    pushFollow(FOLLOW_trailer_in_trailer3305);
                    tr=trailer();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_trailer.add(tr.getTree());
			if(tr.getTree()!=null) System.out.println("tr.getTree() = "+((CommonTree) tr.getTree()).toStringTree());
                    // AST REWRITE
                    // elements: a, tr
                    // token labels: 
                    // rule labels: retval, tr, a
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_tr=new RewriteRuleSubtreeStream(adaptor,"token tr",tr!=null?tr.tree:null);
                    RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"token a",a!=null?a.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 585:45: -> ^( Attribute ^( Value $tr $a) )
                    {
                        // org/python/antlr/Python.g:585:48: ^( Attribute ^( Value $tr $a) )
                        { System.out.println("Avant");
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Attribute, "Attribute"), root_1);

                        // org/python/antlr/Python.g:585:60: ^( Value $tr $a)
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Value, "Value"), root_2);

			System.out.println("Token = "+((CommonTree) stream_tr.next()).toStringTree());
			
                        adaptor.addChild(root_2, stream_tr.next());
                        adaptor.addChild(root_2, stream_a.next());
		
                        adaptor.addChild(root_1, root_2); System.out.println("Apres");
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end trailer

    public static class dotted_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dotted_expr
    // org/python/antlr/Python.g:589:1: dotted_expr : ;
    public final dotted_expr_return dotted_expr() throws RecognitionException {
        dotted_expr_return retval = new dotted_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        try {
            // org/python/antlr/Python.g:596:2: ()
            // org/python/antlr/Python.g:596:2: 
            {
            root_0 = (CommonTree)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dotted_expr

    public static class subscriptlist_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start subscriptlist
    // org/python/antlr/Python.g:598:1: subscriptlist : subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )? ;
    public final subscriptlist_return subscriptlist() throws RecognitionException {
        subscriptlist_return retval = new subscriptlist_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA278=null;
        Token COMMA280=null;
        subscript_return subscript277 = null;

        subscript_return subscript279 = null;


        CommonTree COMMA278_tree=null;
        CommonTree COMMA280_tree=null;

        try {
            // org/python/antlr/Python.g:599:9: ( subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )? )
            // org/python/antlr/Python.g:599:9: subscript ( options {greedy=true; } : COMMA subscript )* ( COMMA )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_subscript_in_subscriptlist3365);
            subscript277=subscript();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, subscript277.getTree());
            // org/python/antlr/Python.g:599:19: ( options {greedy=true; } : COMMA subscript )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==COMMA) ) {
                    int LA81_1 = input.LA(2);

                    if ( ((LA81_1>=NAME && LA81_1<=COLON)||LA81_1==LPAREN||LA81_1==DOT||(LA81_1>=PLUS && LA81_1<=MINUS)||(LA81_1>=TILDE && LA81_1<=LBRACK)||LA81_1==LCURLY||(LA81_1>=BACKQUOTE && LA81_1<=STRING)||LA81_1==174||LA81_1==176) ) {
                        alt81=1;
                    }


                }


                switch (alt81) {
            	case 1 :
            	    // org/python/antlr/Python.g:599:43: COMMA subscript
            	    {
            	    COMMA278=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_subscriptlist3375); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMA278_tree = (CommonTree)adaptor.create(COMMA278);
            	    adaptor.addChild(root_0, COMMA278_tree);
            	    }
            	    pushFollow(FOLLOW_subscript_in_subscriptlist3377);
            	    subscript279=subscript();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, subscript279.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            // org/python/antlr/Python.g:599:61: ( COMMA )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==COMMA) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // org/python/antlr/Python.g:599:62: COMMA
                    {
                    COMMA280=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_subscriptlist3382); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COMMA280_tree = (CommonTree)adaptor.create(COMMA280);
                    adaptor.addChild(root_0, COMMA280_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subscriptlist

    public static class subscript_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start subscript
    // org/python/antlr/Python.g:602:1: subscript : ( DOT DOT DOT | test ( COLON ( test )? ( sliceop )? )? | COLON ( test )? ( sliceop )? );
    public final subscript_return subscript() throws RecognitionException {
        subscript_return retval = new subscript_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT281=null;
        Token DOT282=null;
        Token DOT283=null;
        Token COLON285=null;
        Token COLON288=null;
        test_return test284 = null;

        test_return test286 = null;

        sliceop_return sliceop287 = null;

        test_return test289 = null;

        sliceop_return sliceop290 = null;


        CommonTree DOT281_tree=null;
        CommonTree DOT282_tree=null;
        CommonTree DOT283_tree=null;
        CommonTree COLON285_tree=null;
        CommonTree COLON288_tree=null;

        try {
            // org/python/antlr/Python.g:603:4: ( DOT DOT DOT | test ( COLON ( test )? ( sliceop )? )? | COLON ( test )? ( sliceop )? )
            int alt88=3;
            switch ( input.LA(1) ) {
            case DOT:
                {
                alt88=1;
                }
                break;
            case NAME:
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case 174:
            case 176:
                {
                alt88=2;
                }
                break;
            case COLON:
                {
                alt88=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("602:1: subscript : ( DOT DOT DOT | test ( COLON ( test )? ( sliceop )? )? | COLON ( test )? ( sliceop )? );", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // org/python/antlr/Python.g:603:4: DOT DOT DOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DOT281=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_subscript3395); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DOT281_tree = (CommonTree)adaptor.create(DOT281);
                    adaptor.addChild(root_0, DOT281_tree);
                    }
                    DOT282=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_subscript3397); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DOT282_tree = (CommonTree)adaptor.create(DOT282);
                    adaptor.addChild(root_0, DOT282_tree);
                    }
                    DOT283=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_subscript3399); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DOT283_tree = (CommonTree)adaptor.create(DOT283);
                    adaptor.addChild(root_0, DOT283_tree);
                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:604:7: test ( COLON ( test )? ( sliceop )? )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_subscript3407);
                    test284=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, test284.getTree());
                    // org/python/antlr/Python.g:604:12: ( COLON ( test )? ( sliceop )? )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==COLON) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // org/python/antlr/Python.g:604:13: COLON ( test )? ( sliceop )?
                            {
                            COLON285=(Token)input.LT(1);
                            match(input,COLON,FOLLOW_COLON_in_subscript3410); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COLON285_tree = (CommonTree)adaptor.create(COLON285);
                            adaptor.addChild(root_0, COLON285_tree);
                            }
                            // org/python/antlr/Python.g:604:19: ( test )?
                            int alt83=2;
                            int LA83_0 = input.LA(1);

                            if ( (LA83_0==NAME||LA83_0==LPAREN||(LA83_0>=PLUS && LA83_0<=MINUS)||(LA83_0>=TILDE && LA83_0<=LBRACK)||LA83_0==LCURLY||(LA83_0>=BACKQUOTE && LA83_0<=STRING)||LA83_0==174||LA83_0==176) ) {
                                alt83=1;
                            }
                            switch (alt83) {
                                case 1 :
                                    // org/python/antlr/Python.g:604:20: test
                                    {
                                    pushFollow(FOLLOW_test_in_subscript3413);
                                    test286=test();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) adaptor.addChild(root_0, test286.getTree());

                                    }
                                    break;

                            }

                            // org/python/antlr/Python.g:604:27: ( sliceop )?
                            int alt84=2;
                            int LA84_0 = input.LA(1);

                            if ( (LA84_0==COLON) ) {
                                alt84=1;
                            }
                            switch (alt84) {
                                case 1 :
                                    // org/python/antlr/Python.g:604:28: sliceop
                                    {
                                    pushFollow(FOLLOW_sliceop_in_subscript3418);
                                    sliceop287=sliceop();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) adaptor.addChild(root_0, sliceop287.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:605:7: COLON ( test )? ( sliceop )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COLON288=(Token)input.LT(1);
                    match(input,COLON,FOLLOW_COLON_in_subscript3430); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLON288_tree = (CommonTree)adaptor.create(COLON288);
                    adaptor.addChild(root_0, COLON288_tree);
                    }
                    // org/python/antlr/Python.g:605:13: ( test )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==NAME||LA86_0==LPAREN||(LA86_0>=PLUS && LA86_0<=MINUS)||(LA86_0>=TILDE && LA86_0<=LBRACK)||LA86_0==LCURLY||(LA86_0>=BACKQUOTE && LA86_0<=STRING)||LA86_0==174||LA86_0==176) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // org/python/antlr/Python.g:605:14: test
                            {
                            pushFollow(FOLLOW_test_in_subscript3433);
                            test289=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, test289.getTree());

                            }
                            break;

                    }

                    // org/python/antlr/Python.g:605:21: ( sliceop )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==COLON) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // org/python/antlr/Python.g:605:22: sliceop
                            {
                            pushFollow(FOLLOW_sliceop_in_subscript3438);
                            sliceop290=sliceop();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, sliceop290.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subscript

    public static class sliceop_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sliceop
    // org/python/antlr/Python.g:608:1: sliceop : COLON ( test )? ;
    public final sliceop_return sliceop() throws RecognitionException {
        sliceop_return retval = new sliceop_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COLON291=null;
        test_return test292 = null;


        CommonTree COLON291_tree=null;

        try {
            // org/python/antlr/Python.g:608:10: ( COLON ( test )? )
            // org/python/antlr/Python.g:608:10: COLON ( test )?
            {
            root_0 = (CommonTree)adaptor.nil();

            COLON291=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_sliceop3452); if (failed) return retval;
            if ( backtracking==0 ) {
            COLON291_tree = (CommonTree)adaptor.create(COLON291);
            adaptor.addChild(root_0, COLON291_tree);
            }
            // org/python/antlr/Python.g:608:16: ( test )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==NAME||LA89_0==LPAREN||(LA89_0>=PLUS && LA89_0<=MINUS)||(LA89_0>=TILDE && LA89_0<=LBRACK)||LA89_0==LCURLY||(LA89_0>=BACKQUOTE && LA89_0<=STRING)||LA89_0==174||LA89_0==176) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // org/python/antlr/Python.g:608:17: test
                    {
                    pushFollow(FOLLOW_test_in_sliceop3455);
                    test292=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, test292.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sliceop

    public static class exprlist_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exprlist
    // org/python/antlr/Python.g:611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );
    public final exprlist_return exprlist() throws RecognitionException {
        exprlist_return retval = new exprlist_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA296=null;
        Token COMMA298=null;
        Token COMMA300=null;
        expr_return expr293 = null;

        list_for_return list_for294 = null;

        expr_return expr295 = null;

        expr_return expr297 = null;

        expr_return expr299 = null;

        expr_return expr301 = null;


        CommonTree COMMA296_tree=null;
        CommonTree COMMA298_tree=null;
        CommonTree COMMA300_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_list_for=new RewriteRuleSubtreeStream(adaptor,"rule list_for");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/python/antlr/Python.g:613:7: ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr )
            int alt92=4;
            switch ( input.LA(1) ) {
            case PLUS:
            case MINUS:
            case TILDE:
                {
                int LA92_1 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 1, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA92_2 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 2, input);

                    throw nvae;
                }
                }
                break;
            case LBRACK:
                {
                int LA92_3 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 3, input);

                    throw nvae;
                }
                }
                break;
            case LCURLY:
                {
                int LA92_4 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 4, input);

                    throw nvae;
                }
                }
                break;
            case BACKQUOTE:
                {
                int LA92_5 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 5, input);

                    throw nvae;
                }
                }
                break;
            case NAME:
                {
                int LA92_6 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 6, input);

                    throw nvae;
                }
                }
                break;
            case INT:
                {
                int LA92_7 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 7, input);

                    throw nvae;
                }
                }
                break;
            case LONGINT:
                {
                int LA92_8 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 8, input);

                    throw nvae;
                }
                }
                break;
            case FLOAT:
                {
                int LA92_9 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 9, input);

                    throw nvae;
                }
                }
                break;
            case COMPLEX:
                {
                int LA92_10 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 10, input);

                    throw nvae;
                }
                }
                break;
            case STRING:
                {
                int LA92_11 = input.LA(2);

                if ( (synpred149()) ) {
                    alt92=1;
                }
                else if ( (synpred152()) ) {
                    alt92=2;
                }
                else if ( (synpred153()) ) {
                    alt92=3;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 11, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("611:1: exprlist : ( expr list_for -> ^( Gen ^( Target expr ) list_for ) | expr ( options {k=2; } : COMMA expr )+ ( COMMA )? -> ^( Tuple ( expr )+ ) | expr COMMA -> ^( Tuple expr ) | expr );", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // org/python/antlr/Python.g:613:7: expr list_for
                    {
                    pushFollow(FOLLOW_expr_in_exprlist3473);
                    expr293=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr293.getTree());
                    pushFollow(FOLLOW_list_for_in_exprlist3475);
                    list_for294=list_for();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_list_for.add(list_for294.getTree());

                    // AST REWRITE
                    // elements: list_for, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 613:21: -> ^( Gen ^( Target expr ) list_for )
                    {
                        // org/python/antlr/Python.g:613:24: ^( Gen ^( Target expr ) list_for )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Gen, "Gen"), root_1);

                        // org/python/antlr/Python.g:613:30: ^( Target expr )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Target, "Target"), root_2);

                        adaptor.addChild(root_2, stream_expr.next());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_list_for.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:614:7: expr ( options {k=2; } : COMMA expr )+ ( COMMA )?
                    {
                    pushFollow(FOLLOW_expr_in_exprlist3497);
                    expr295=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr295.getTree());
                    // org/python/antlr/Python.g:614:12: ( options {k=2; } : COMMA expr )+
                    int cnt90=0;
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==COMMA) ) {
                            int LA90_1 = input.LA(2);

                            if ( (LA90_1==NAME||LA90_1==LPAREN||(LA90_1>=PLUS && LA90_1<=MINUS)||(LA90_1>=TILDE && LA90_1<=LBRACK)||LA90_1==LCURLY||(LA90_1>=BACKQUOTE && LA90_1<=STRING)) ) {
                                alt90=1;
                            }


                        }


                        switch (alt90) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:614:28: COMMA expr
                    	    {
                    	    COMMA296=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_exprlist3507); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA296);

                    	    pushFollow(FOLLOW_expr_in_exprlist3509);
                    	    expr297=expr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_expr.add(expr297.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt90 >= 1 ) break loop90;
                    	    if (backtracking>0) {failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(90, input);
                                throw eee;
                        }
                        cnt90++;
                    } while (true);

                    // org/python/antlr/Python.g:614:41: ( COMMA )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==COMMA) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // org/python/antlr/Python.g:614:42: COMMA
                            {
                            COMMA298=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_exprlist3514); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA298);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 614:50: -> ^( Tuple ( expr )+ )
                    {
                        // org/python/antlr/Python.g:614:53: ^( Tuple ( expr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Tuple, "Tuple"), root_1);

                        if ( !(stream_expr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_expr.next());

                        }
                        stream_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:615:7: expr COMMA
                    {
                    pushFollow(FOLLOW_expr_in_exprlist3533);
                    expr299=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr299.getTree());
                    COMMA300=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_exprlist3535); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA300);


                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 615:18: -> ^( Tuple expr )
                    {
                        // org/python/antlr/Python.g:615:21: ^( Tuple expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Tuple, "Tuple"), root_1);

                        adaptor.addChild(root_1, stream_expr.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:616:7: expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_exprlist3552);
                    expr301=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr301.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exprlist

    public static class testlist_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start testlist
    // org/python/antlr/Python.g:619:1: testlist : test ( options {k=2; } : COMMA test )* ( COMMA )? -> ( test )* ;
    public final testlist_return testlist() throws RecognitionException {
        testlist_return retval = new testlist_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA303=null;
        Token COMMA305=null;
        test_return test302 = null;

        test_return test304 = null;


        CommonTree COMMA303_tree=null;
        CommonTree COMMA305_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // org/python/antlr/Python.g:620:7: ( test ( options {k=2; } : COMMA test )* ( COMMA )? -> ( test )* )
            // org/python/antlr/Python.g:620:7: test ( options {k=2; } : COMMA test )* ( COMMA )?
            {
            pushFollow(FOLLOW_test_in_testlist3566);
            test302=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test302.getTree());
            // org/python/antlr/Python.g:620:12: ( options {k=2; } : COMMA test )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==COMMA) ) {
                    int LA93_1 = input.LA(2);

                    if ( (LA93_1==NAME||LA93_1==LPAREN||(LA93_1>=PLUS && LA93_1<=MINUS)||(LA93_1>=TILDE && LA93_1<=LBRACK)||LA93_1==LCURLY||(LA93_1>=INT && LA93_1<=STRING)||LA93_1==174||LA93_1==176) ) {
                        alt93=1;
                    }
                    else if ( (LA93_1==BACKQUOTE) ) {
                        int LA93_31 = input.LA(3);

                        if ( (synpred154()) ) {
                            alt93=1;
                        }


                    }


                }


                switch (alt93) {
            	case 1 :
            	    // org/python/antlr/Python.g:620:29: COMMA test
            	    {
            	    COMMA303=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_testlist3577); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA303);

            	    pushFollow(FOLLOW_test_in_testlist3579);
            	    test304=test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_test.add(test304.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            // org/python/antlr/Python.g:620:42: ( COMMA )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==COMMA) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // org/python/antlr/Python.g:620:43: COMMA
                    {
                    COMMA305=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_testlist3584); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA305);


                    }
                    break;

            }


            // AST REWRITE
            // elements: test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 620:51: -> ( test )*
            {
                // org/python/antlr/Python.g:620:54: ( test )*
                while ( stream_test.hasNext() ) {
                    adaptor.addChild(root_0, stream_test.next());

                }
                stream_test.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end testlist

    public static class dictmaker_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dictmaker
    // org/python/antlr/Python.g:623:1: dictmaker : test COLON test ( options {k=2; } : COMMA test COLON test )* ( COMMA )? -> ( test )* ;
    public final dictmaker_return dictmaker() throws RecognitionException {
        dictmaker_return retval = new dictmaker_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COLON307=null;
        Token COMMA309=null;
        Token COLON311=null;
        Token COMMA313=null;
        test_return test306 = null;

        test_return test308 = null;

        test_return test310 = null;

        test_return test312 = null;


        CommonTree COLON307_tree=null;
        CommonTree COMMA309_tree=null;
        CommonTree COLON311_tree=null;
        CommonTree COMMA313_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // org/python/antlr/Python.g:624:7: ( test COLON test ( options {k=2; } : COMMA test COLON test )* ( COMMA )? -> ( test )* )
            // org/python/antlr/Python.g:624:7: test COLON test ( options {k=2; } : COMMA test COLON test )* ( COMMA )?
            {
            pushFollow(FOLLOW_test_in_dictmaker3608);
            test306=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test306.getTree());
            COLON307=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_dictmaker3610); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON307);

            pushFollow(FOLLOW_test_in_dictmaker3612);
            test308=test();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_test.add(test308.getTree());
            // org/python/antlr/Python.g:625:9: ( options {k=2; } : COMMA test COLON test )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==COMMA) ) {
                    int LA95_1 = input.LA(2);

                    if ( (LA95_1==NAME||LA95_1==LPAREN||(LA95_1>=PLUS && LA95_1<=MINUS)||(LA95_1>=TILDE && LA95_1<=LBRACK)||LA95_1==LCURLY||(LA95_1>=BACKQUOTE && LA95_1<=STRING)||LA95_1==174||LA95_1==176) ) {
                        alt95=1;
                    }


                }


                switch (alt95) {
            	case 1 :
            	    // org/python/antlr/Python.g:625:25: COMMA test COLON test
            	    {
            	    COMMA309=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_dictmaker3630); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMA.add(COMMA309);

            	    pushFollow(FOLLOW_test_in_dictmaker3632);
            	    test310=test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_test.add(test310.getTree());
            	    COLON311=(Token)input.LT(1);
            	    match(input,COLON,FOLLOW_COLON_in_dictmaker3634); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COLON.add(COLON311);

            	    pushFollow(FOLLOW_test_in_dictmaker3636);
            	    test312=test();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_test.add(test312.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);

            // org/python/antlr/Python.g:625:49: ( COMMA )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==COMMA) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // org/python/antlr/Python.g:625:50: COMMA
                    {
                    COMMA313=(Token)input.LT(1);
                    match(input,COMMA,FOLLOW_COMMA_in_dictmaker3641); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMA.add(COMMA313);


                    }
                    break;

            }


            // AST REWRITE
            // elements: test
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 626:5: -> ( test )*
            {
                // org/python/antlr/Python.g:626:8: ( test )*
                while ( stream_test.hasNext() ) {
                    adaptor.addChild(root_0, stream_test.next());

                }
                stream_test.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dictmaker

    public static class classdef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start classdef
    // org/python/antlr/Python.g:629:1: classdef : 'class' NAME ( LPAREN testlist RPAREN )? COLON suite -> ^( ClassDef ^( Name NAME ) ^( Bases ( testlist )? ) ^( Body suite ) ) ;
    public final classdef_return classdef() throws RecognitionException {
        classdef_return retval = new classdef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal314=null;
        Token NAME315=null;
        Token LPAREN316=null;
        Token RPAREN318=null;
        Token COLON319=null;
        testlist_return testlist317 = null;

        suite_return suite320 = null;


        CommonTree string_literal314_tree=null;
        CommonTree NAME315_tree=null;
        CommonTree LPAREN316_tree=null;
        CommonTree RPAREN318_tree=null;
        CommonTree COLON319_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_suite=new RewriteRuleSubtreeStream(adaptor,"rule suite");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // org/python/antlr/Python.g:630:7: ( 'class' NAME ( LPAREN testlist RPAREN )? COLON suite -> ^( ClassDef ^( Name NAME ) ^( Bases ( testlist )? ) ^( Body suite ) ) )
            // org/python/antlr/Python.g:630:7: 'class' NAME ( LPAREN testlist RPAREN )? COLON suite
            {
            string_literal314=(Token)input.LT(1);
            match(input,177,FOLLOW_177_in_classdef3669); if (failed) return retval;
            if ( backtracking==0 ) stream_177.add(string_literal314);

            NAME315=(Token)input.LT(1);
            match(input,NAME,FOLLOW_NAME_in_classdef3671); if (failed) return retval;
            if ( backtracking==0 ) stream_NAME.add(NAME315);

            // org/python/antlr/Python.g:630:20: ( LPAREN testlist RPAREN )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==LPAREN) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // org/python/antlr/Python.g:630:21: LPAREN testlist RPAREN
                    {
                    LPAREN316=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_classdef3674); if (failed) return retval;
                    if ( backtracking==0 ) stream_LPAREN.add(LPAREN316);

                    pushFollow(FOLLOW_testlist_in_classdef3676);
                    testlist317=testlist();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_testlist.add(testlist317.getTree());
                    RPAREN318=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_classdef3678); if (failed) return retval;
                    if ( backtracking==0 ) stream_RPAREN.add(RPAREN318);


                    }
                    break;

            }

            COLON319=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_classdef3682); if (failed) return retval;
            if ( backtracking==0 ) stream_COLON.add(COLON319);

            pushFollow(FOLLOW_suite_in_classdef3684);
            suite320=suite();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_suite.add(suite320.getTree());

            // AST REWRITE
            // elements: testlist, suite, NAME
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 631:5: -> ^( ClassDef ^( Name NAME ) ^( Bases ( testlist )? ) ^( Body suite ) )
            {
                // org/python/antlr/Python.g:631:8: ^( ClassDef ^( Name NAME ) ^( Bases ( testlist )? ) ^( Body suite ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(ClassDef, "ClassDef"), root_1);

                // org/python/antlr/Python.g:631:19: ^( Name NAME )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Name, "Name"), root_2);

                adaptor.addChild(root_2, stream_NAME.next());

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:631:32: ^( Bases ( testlist )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Bases, "Bases"), root_2);

                // org/python/antlr/Python.g:631:40: ( testlist )?
                if ( stream_testlist.hasNext() ) {
                    adaptor.addChild(root_2, stream_testlist.next());

                }
                stream_testlist.reset();

                adaptor.addChild(root_1, root_2);
                }
                // org/python/antlr/Python.g:631:51: ^( Body suite )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(Body, "Body"), root_2);

                adaptor.addChild(root_2, stream_suite.next());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end classdef

    public static class arglist_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start arglist
    // org/python/antlr/Python.g:637:1: arglist : ( argument ( COMMA argument )* ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )? -> ^( Args ( argument )* ) ^( Keywords ) ^( StarArgs ( $starargs)? ) ^( KWArgs ( $kwargs)? ) | STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? -> ^( StarArgs $starargs) ^( KWArgs ( $kwargs)? ) | DOUBLESTAR kwargs= test -> ^( KWArgs $kwargs) | -> ^( Args ) ^( Keywords ) ^( StarArgs ) ^( KWArgs ) );
    public final arglist_return arglist() throws RecognitionException {
        arglist_return retval = new arglist_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA322=null;
        Token COMMA324=null;
        Token STAR325=null;
        Token COMMA326=null;
        Token DOUBLESTAR327=null;
        Token DOUBLESTAR328=null;
        Token STAR329=null;
        Token COMMA330=null;
        Token DOUBLESTAR331=null;
        Token DOUBLESTAR332=null;
        test_return starargs = null;

        test_return kwargs = null;

        argument_return argument321 = null;

        argument_return argument323 = null;


        CommonTree COMMA322_tree=null;
        CommonTree COMMA324_tree=null;
        CommonTree STAR325_tree=null;
        CommonTree COMMA326_tree=null;
        CommonTree DOUBLESTAR327_tree=null;
        CommonTree DOUBLESTAR328_tree=null;
        CommonTree STAR329_tree=null;
        CommonTree COMMA330_tree=null;
        CommonTree DOUBLESTAR331_tree=null;
        CommonTree DOUBLESTAR332_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOUBLESTAR=new RewriteRuleTokenStream(adaptor,"token DOUBLESTAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_argument=new RewriteRuleSubtreeStream(adaptor,"rule argument");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        try {
            // org/python/antlr/Python.g:638:8: ( argument ( COMMA argument )* ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )? -> ^( Args ( argument )* ) ^( Keywords ) ^( StarArgs ( $starargs)? ) ^( KWArgs ( $kwargs)? ) | STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? -> ^( StarArgs $starargs) ^( KWArgs ( $kwargs)? ) | DOUBLESTAR kwargs= test -> ^( KWArgs $kwargs) | -> ^( Args ) ^( Keywords ) ^( StarArgs ) ^( KWArgs ) )
            int alt103=4;
            switch ( input.LA(1) ) {
            case NAME:
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
                {
                alt103=1;
                }
                break;
            case STAR:
                {
                alt103=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt103=3;
                }
                break;
            case RPAREN:
                {
                alt103=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("637:1: arglist : ( argument ( COMMA argument )* ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )? -> ^( Args ( argument )* ) ^( Keywords ) ^( StarArgs ( $starargs)? ) ^( KWArgs ( $kwargs)? ) | STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? -> ^( StarArgs $starargs) ^( KWArgs ( $kwargs)? ) | DOUBLESTAR kwargs= test -> ^( KWArgs $kwargs) | -> ^( Args ) ^( Keywords ) ^( StarArgs ) ^( KWArgs ) );", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // org/python/antlr/Python.g:638:8: argument ( COMMA argument )* ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )?
                    {
                    pushFollow(FOLLOW_argument_in_arglist3735);
                    argument321=argument();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_argument.add(argument321.getTree());
                    // org/python/antlr/Python.g:638:17: ( COMMA argument )*
                    loop98:
                    do {
                        int alt98=2;
                        int LA98_0 = input.LA(1);

                        if ( (LA98_0==COMMA) ) {
                            int LA98_1 = input.LA(2);

                            if ( (LA98_1==NAME||LA98_1==LPAREN||(LA98_1>=PLUS && LA98_1<=MINUS)||(LA98_1>=TILDE && LA98_1<=LBRACK)||LA98_1==LCURLY||(LA98_1>=BACKQUOTE && LA98_1<=STRING)) ) {
                                alt98=1;
                            }


                        }


                        switch (alt98) {
                    	case 1 :
                    	    // org/python/antlr/Python.g:638:18: COMMA argument
                    	    {
                    	    COMMA322=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_arglist3738); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMA.add(COMMA322);

                    	    pushFollow(FOLLOW_argument_in_arglist3740);
                    	    argument323=argument();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_argument.add(argument323.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop98;
                        }
                    } while (true);

                    // org/python/antlr/Python.g:639:9: ( COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )? )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==COMMA) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // org/python/antlr/Python.g:639:11: COMMA ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )?
                            {
                            COMMA324=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_arglist3754); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA324);

                            // org/python/antlr/Python.g:640:11: ( STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )? | DOUBLESTAR kwargs= test )?
                            int alt100=3;
                            int LA100_0 = input.LA(1);

                            if ( (LA100_0==STAR) ) {
                                alt100=1;
                            }
                            else if ( (LA100_0==DOUBLESTAR) ) {
                                alt100=2;
                            }
                            switch (alt100) {
                                case 1 :
                                    // org/python/antlr/Python.g:640:13: STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )?
                                    {
                                    STAR325=(Token)input.LT(1);
                                    match(input,STAR,FOLLOW_STAR_in_arglist3768); if (failed) return retval;
                                    if ( backtracking==0 ) stream_STAR.add(STAR325);

                                    pushFollow(FOLLOW_test_in_arglist3772);
                                    starargs=test();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_test.add(starargs.getTree());
                                    // org/python/antlr/Python.g:640:32: ( COMMA DOUBLESTAR kwargs= test )?
                                    int alt99=2;
                                    int LA99_0 = input.LA(1);

                                    if ( (LA99_0==COMMA) ) {
                                        alt99=1;
                                    }
                                    switch (alt99) {
                                        case 1 :
                                            // org/python/antlr/Python.g:640:33: COMMA DOUBLESTAR kwargs= test
                                            {
                                            COMMA326=(Token)input.LT(1);
                                            match(input,COMMA,FOLLOW_COMMA_in_arglist3775); if (failed) return retval;
                                            if ( backtracking==0 ) stream_COMMA.add(COMMA326);

                                            DOUBLESTAR327=(Token)input.LT(1);
                                            match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist3777); if (failed) return retval;
                                            if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR327);

                                            pushFollow(FOLLOW_test_in_arglist3781);
                                            kwargs=test();
                                            _fsp--;
                                            if (failed) return retval;
                                            if ( backtracking==0 ) stream_test.add(kwargs.getTree());

                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // org/python/antlr/Python.g:641:13: DOUBLESTAR kwargs= test
                                    {
                                    DOUBLESTAR328=(Token)input.LT(1);
                                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist3797); if (failed) return retval;
                                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR328);

                                    pushFollow(FOLLOW_test_in_arglist3801);
                                    kwargs=test();
                                    _fsp--;
                                    if (failed) return retval;
                                    if ( backtracking==0 ) stream_test.add(kwargs.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: kwargs, argument, starargs
                    // token labels: 
                    // rule labels: retval, kwargs, starargs
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_kwargs=new RewriteRuleSubtreeStream(adaptor,"token kwargs",kwargs!=null?kwargs.tree:null);
                    RewriteRuleSubtreeStream stream_starargs=new RewriteRuleSubtreeStream(adaptor,"token starargs",starargs!=null?starargs.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 643:12: -> ^( Args ( argument )* ) ^( Keywords ) ^( StarArgs ( $starargs)? ) ^( KWArgs ( $kwargs)? )
                    {
                        // org/python/antlr/Python.g:643:15: ^( Args ( argument )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Args, "Args"), root_1);

                        // org/python/antlr/Python.g:643:22: ( argument )*
                        while ( stream_argument.hasNext() ) {
                            adaptor.addChild(root_1, stream_argument.next());

                        }
                        stream_argument.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:643:33: ^( Keywords )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Keywords, "Keywords"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:643:45: ^( StarArgs ( $starargs)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                        // org/python/antlr/Python.g:643:56: ( $starargs)?
                        if ( stream_starargs.hasNext() ) {
                            adaptor.addChild(root_1, stream_starargs.next());

                        }
                        stream_starargs.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:643:68: ^( KWArgs ( $kwargs)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                        // org/python/antlr/Python.g:643:77: ( $kwargs)?
                        if ( stream_kwargs.hasNext() ) {
                            adaptor.addChild(root_1, stream_kwargs.next());

                        }
                        stream_kwargs.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:644:9: STAR starargs= test ( COMMA DOUBLESTAR kwargs= test )?
                    {
                    STAR329=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_arglist3865); if (failed) return retval;
                    if ( backtracking==0 ) stream_STAR.add(STAR329);

                    pushFollow(FOLLOW_test_in_arglist3869);
                    starargs=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(starargs.getTree());
                    // org/python/antlr/Python.g:644:28: ( COMMA DOUBLESTAR kwargs= test )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==COMMA) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // org/python/antlr/Python.g:644:29: COMMA DOUBLESTAR kwargs= test
                            {
                            COMMA330=(Token)input.LT(1);
                            match(input,COMMA,FOLLOW_COMMA_in_arglist3872); if (failed) return retval;
                            if ( backtracking==0 ) stream_COMMA.add(COMMA330);

                            DOUBLESTAR331=(Token)input.LT(1);
                            match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist3874); if (failed) return retval;
                            if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR331);

                            pushFollow(FOLLOW_test_in_arglist3878);
                            kwargs=test();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_test.add(kwargs.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: kwargs, starargs
                    // token labels: 
                    // rule labels: retval, kwargs, starargs
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_kwargs=new RewriteRuleSubtreeStream(adaptor,"token kwargs",kwargs!=null?kwargs.tree:null);
                    RewriteRuleSubtreeStream stream_starargs=new RewriteRuleSubtreeStream(adaptor,"token starargs",starargs!=null?starargs.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 644:60: -> ^( StarArgs $starargs) ^( KWArgs ( $kwargs)? )
                    {
                        // org/python/antlr/Python.g:644:63: ^( StarArgs $starargs)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                        adaptor.addChild(root_1, stream_starargs.next());

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:644:85: ^( KWArgs ( $kwargs)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                        // org/python/antlr/Python.g:644:94: ( $kwargs)?
                        if ( stream_kwargs.hasNext() ) {
                            adaptor.addChild(root_1, stream_kwargs.next());

                        }
                        stream_kwargs.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // org/python/antlr/Python.g:645:9: DOUBLESTAR kwargs= test
                    {
                    DOUBLESTAR332=(Token)input.LT(1);
                    match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist3907); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOUBLESTAR.add(DOUBLESTAR332);

                    pushFollow(FOLLOW_test_in_arglist3911);
                    kwargs=test();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_test.add(kwargs.getTree());

                    // AST REWRITE
                    // elements: kwargs
                    // token labels: 
                    // rule labels: retval, kwargs
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_kwargs=new RewriteRuleSubtreeStream(adaptor,"token kwargs",kwargs!=null?kwargs.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 645:32: -> ^( KWArgs $kwargs)
                    {
                        // org/python/antlr/Python.g:645:35: ^( KWArgs $kwargs)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                        adaptor.addChild(root_1, stream_kwargs.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // org/python/antlr/Python.g:646:7: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 646:7: -> ^( Args ) ^( Keywords ) ^( StarArgs ) ^( KWArgs )
                    {
                        // org/python/antlr/Python.g:646:10: ^( Args )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Args, "Args"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:646:18: ^( Keywords )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Keywords, "Keywords"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:646:30: ^( StarArgs )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(StarArgs, "StarArgs"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        // org/python/antlr/Python.g:646:42: ^( KWArgs )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(KWArgs, "KWArgs"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end arglist

    public static class argument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start argument
    // org/python/antlr/Python.g:650:1: argument : ( NAME ASSIGN expr -> ^( Keyword NAME expr ) | expr -> expr );
    public final argument_return argument() throws RecognitionException {
        argument_return retval = new argument_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NAME333=null;
        Token ASSIGN334=null;
        expr_return expr335 = null;

        expr_return expr336 = null;


        CommonTree NAME333_tree=null;
        CommonTree ASSIGN334_tree=null;
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/python/antlr/Python.g:651:7: ( NAME ASSIGN expr -> ^( Keyword NAME expr ) | expr -> expr )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==NAME) ) {
                int LA104_1 = input.LA(2);

                if ( (LA104_1==ASSIGN) ) {
                    alt104=1;
                }
                else if ( (LA104_1==EOF||(LA104_1>=LPAREN && LA104_1<=DOUBLESTAR)||(LA104_1>=RIGHTSHIFT && LA104_1<=DOT)||(LA104_1>=VBAR && LA104_1<=DOUBLESLASH)||LA104_1==LBRACK) ) {
                    alt104=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("650:1: argument : ( NAME ASSIGN expr -> ^( Keyword NAME expr ) | expr -> expr );", 104, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA104_0==LPAREN||(LA104_0>=PLUS && LA104_0<=MINUS)||(LA104_0>=TILDE && LA104_0<=LBRACK)||LA104_0==LCURLY||(LA104_0>=BACKQUOTE && LA104_0<=STRING)) ) {
                alt104=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("650:1: argument : ( NAME ASSIGN expr -> ^( Keyword NAME expr ) | expr -> expr );", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    // org/python/antlr/Python.g:651:7: NAME ASSIGN expr
                    {
                    NAME333=(Token)input.LT(1);
                    match(input,NAME,FOLLOW_NAME_in_argument3963); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAME.add(NAME333);

                    ASSIGN334=(Token)input.LT(1);
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_argument3965); if (failed) return retval;
                    if ( backtracking==0 ) stream_ASSIGN.add(ASSIGN334);

                    pushFollow(FOLLOW_expr_in_argument3967);
                    expr335=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr335.getTree());

                    // AST REWRITE
                    // elements: NAME, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 651:24: -> ^( Keyword NAME expr )
                    {
                        // org/python/antlr/Python.g:651:27: ^( Keyword NAME expr )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Keyword, "Keyword"), root_1);

                        adaptor.addChild(root_1, stream_NAME.next());
                        adaptor.addChild(root_1, stream_expr.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:652:7: expr
                    {
                    pushFollow(FOLLOW_expr_in_argument3985);
                    expr336=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_expr.add(expr336.getTree());

                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 652:12: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.next());

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end argument

    public static class list_iter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start list_iter
    // org/python/antlr/Python.g:655:1: list_iter : ( list_for | list_if );
    public final list_iter_return list_iter() throws RecognitionException {
        list_iter_return retval = new list_iter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        list_for_return list_for337 = null;

        list_if_return list_if338 = null;



        try {
            // org/python/antlr/Python.g:656:7: ( list_for | list_if )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==163) ) {
                alt105=1;
            }
            else if ( (LA105_0==166) ) {
                alt105=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("655:1: list_iter : ( list_for | list_if );", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // org/python/antlr/Python.g:656:7: list_for
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_for_in_list_iter4007);
                    list_for337=list_for();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, list_for337.getTree());

                    }
                    break;
                case 2 :
                    // org/python/antlr/Python.g:657:4: list_if
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_if_in_list_iter4012);
                    list_if338=list_if();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, list_if338.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end list_iter

    public static class list_for_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start list_for
    // org/python/antlr/Python.g:660:1: list_for : 'for' exprlist 'in' testlist ( list_iter )? -> ^( For exprlist ) ^( Iter testlist ( list_iter )? ) ;
    public final list_for_return list_for() throws RecognitionException {
        list_for_return retval = new list_for_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal339=null;
        Token string_literal341=null;
        exprlist_return exprlist340 = null;

        testlist_return testlist342 = null;

        list_iter_return list_iter343 = null;


        CommonTree string_literal339_tree=null;
        CommonTree string_literal341_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_list_iter=new RewriteRuleSubtreeStream(adaptor,"rule list_iter");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        RewriteRuleSubtreeStream stream_testlist=new RewriteRuleSubtreeStream(adaptor,"rule testlist");
        try {
            // org/python/antlr/Python.g:660:11: ( 'for' exprlist 'in' testlist ( list_iter )? -> ^( For exprlist ) ^( Iter testlist ( list_iter )? ) )
            // org/python/antlr/Python.g:660:11: 'for' exprlist 'in' testlist ( list_iter )?
            {
            string_literal339=(Token)input.LT(1);
            match(input,163,FOLLOW_163_in_list_for4021); if (failed) return retval;
            if ( backtracking==0 ) stream_163.add(string_literal339);

            pushFollow(FOLLOW_exprlist_in_list_for4023);
            exprlist340=exprlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprlist.add(exprlist340.getTree());
            string_literal341=(Token)input.LT(1);
            match(input,161,FOLLOW_161_in_list_for4025); if (failed) return retval;
            if ( backtracking==0 ) stream_161.add(string_literal341);

            pushFollow(FOLLOW_testlist_in_list_for4027);
            testlist342=testlist();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_testlist.add(testlist342.getTree());
            // org/python/antlr/Python.g:660:40: ( list_iter )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==163||LA106_0==166) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // org/python/antlr/Python.g:660:41: list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_for4030);
                    list_iter343=list_iter();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_list_iter.add(list_iter343.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: list_iter, exprlist, testlist
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 661:5: -> ^( For exprlist ) ^( Iter testlist ( list_iter )? )
            {
                // org/python/antlr/Python.g:661:8: ^( For exprlist )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(For, "For"), root_1);

                adaptor.addChild(root_1, stream_exprlist.next());

                adaptor.addChild(root_0, root_1);
                }
                // org/python/antlr/Python.g:661:24: ^( Iter testlist ( list_iter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(Iter, "Iter"), root_1);

                adaptor.addChild(root_1, stream_testlist.next());
                // org/python/antlr/Python.g:661:40: ( list_iter )?
                if ( stream_list_iter.hasNext() ) {
                    adaptor.addChild(root_1, stream_list_iter.next());

                }
                stream_list_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end list_for

    public static class list_if_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start list_if
    // org/python/antlr/Python.g:664:1: list_if : 'if' expr ( list_iter )? -> ^( If expr ( list_iter )? ) ;
    public final list_if_return list_if() throws RecognitionException {
        list_if_return retval = new list_if_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal344=null;
        expr_return expr345 = null;

        list_iter_return list_iter346 = null;


        CommonTree string_literal344_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleSubtreeStream stream_list_iter=new RewriteRuleSubtreeStream(adaptor,"rule list_iter");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // org/python/antlr/Python.g:664:10: ( 'if' expr ( list_iter )? -> ^( If expr ( list_iter )? ) )
            // org/python/antlr/Python.g:664:10: 'if' expr ( list_iter )?
            {
            string_literal344=(Token)input.LT(1);
            match(input,166,FOLLOW_166_in_list_if4062); if (failed) return retval;
            if ( backtracking==0 ) stream_166.add(string_literal344);

            pushFollow(FOLLOW_expr_in_list_if4064);
            expr345=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr345.getTree());
            // org/python/antlr/Python.g:664:20: ( list_iter )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==163||LA107_0==166) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // org/python/antlr/Python.g:664:21: list_iter
                    {
                    pushFollow(FOLLOW_list_iter_in_list_if4067);
                    list_iter346=list_iter();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_list_iter.add(list_iter346.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: list_iter, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 665:5: -> ^( If expr ( list_iter )? )
            {
                // org/python/antlr/Python.g:665:8: ^( If expr ( list_iter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(If, "If"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                // org/python/antlr/Python.g:665:18: ( list_iter )?
                if ( stream_list_iter.hasNext() ) {
                    adaptor.addChild(root_1, stream_list_iter.next());

                }
                stream_list_iter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end list_if

    public static class long_integer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start long_integer
    // org/python/antlr/Python.g:763:1: long_integer : LONGINT -> ^( LONG_INTEGER LONGINT ) ;
    public final long_integer_return long_integer() throws RecognitionException {
        long_integer_return retval = new long_integer_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LONGINT347=null;

        CommonTree LONGINT347_tree=null;
        RewriteRuleTokenStream stream_LONGINT=new RewriteRuleTokenStream(adaptor,"token LONGINT");

        try {
            // org/python/antlr/Python.g:764:9: ( LONGINT -> ^( LONG_INTEGER LONGINT ) )
            // org/python/antlr/Python.g:764:9: LONGINT
            {
            LONGINT347=(Token)input.LT(1);
            match(input,LONGINT,FOLLOW_LONGINT_in_long_integer4566); if (failed) return retval;
            if ( backtracking==0 ) stream_LONGINT.add(LONGINT347);


            // AST REWRITE
            // elements: LONGINT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 764:17: -> ^( LONG_INTEGER LONGINT )
            {
                // org/python/antlr/Python.g:764:20: ^( LONG_INTEGER LONGINT )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(LONG_INTEGER, "LONG_INTEGER"), root_1);

                adaptor.addChild(root_1, stream_LONGINT.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end long_integer

    // $ANTLR start synpred91
    public final void synpred91_fragment() throws RecognitionException {   
        // org/python/antlr/Python.g:471:13: ( comp_op expr )
        // org/python/antlr/Python.g:471:13: comp_op expr
        {
        pushFollow(FOLLOW_comp_op_in_synpred912576);
        comp_op();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_expr_in_synpred912578);
        expr();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred91

    // $ANTLR start synpred132
    public final void synpred132_fragment() throws RecognitionException {   
        // org/python/antlr/Python.g:539:9: ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? )
        // org/python/antlr/Python.g:539:9: expr ( options {k=2; } : COMMA expr )+ ( COMMA )?
        {
        pushFollow(FOLLOW_expr_in_synpred1322999);
        expr();
        _fsp--;
        if (failed) return ;
        // org/python/antlr/Python.g:539:14: ( options {k=2; } : COMMA expr )+
        int cnt130=0;
        loop130:
        do {
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==COMMA) ) {
                int LA130_1 = input.LA(2);

                if ( (LA130_1==NAME||LA130_1==LPAREN||(LA130_1>=PLUS && LA130_1<=MINUS)||(LA130_1>=TILDE && LA130_1<=LBRACK)||LA130_1==LCURLY||(LA130_1>=BACKQUOTE && LA130_1<=STRING)) ) {
                    alt130=1;
                }


            }


            switch (alt130) {
        	case 1 :
        	    // org/python/antlr/Python.g:539:30: COMMA expr
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred1323009); if (failed) return ;
        	    pushFollow(FOLLOW_expr_in_synpred1323011);
        	    expr();
        	    _fsp--;
        	    if (failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt130 >= 1 ) break loop130;
        	    if (backtracking>0) {failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(130, input);
                    throw eee;
            }
            cnt130++;
        } while (true);

        // org/python/antlr/Python.g:539:43: ( COMMA )?
        int alt131=2;
        int LA131_0 = input.LA(1);

        if ( (LA131_0==COMMA) ) {
            alt131=1;
        }
        switch (alt131) {
            case 1 :
                // org/python/antlr/Python.g:539:44: COMMA
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred1323016); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred132

    // $ANTLR start synpred133
    public final void synpred133_fragment() throws RecognitionException {   
        // org/python/antlr/Python.g:540:9: ( expr COMMA )
        // org/python/antlr/Python.g:540:9: expr COMMA
        {
        pushFollow(FOLLOW_expr_in_synpred1333033);
        expr();
        _fsp--;
        if (failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred1333035); if (failed) return ;

        }
    }
    // $ANTLR end synpred133

    // $ANTLR start synpred134
    public final void synpred134_fragment() throws RecognitionException {   
        // org/python/antlr/Python.g:541:9: ( listcomp )
        // org/python/antlr/Python.g:541:9: listcomp
        {
        pushFollow(FOLLOW_listcomp_in_synpred1343049);
        listcomp();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred134

    // $ANTLR start synpred149
    public final void synpred149_fragment() throws RecognitionException {   
        // org/python/antlr/Python.g:613:7: ( expr list_for )
        // org/python/antlr/Python.g:613:7: expr list_for
        {
        pushFollow(FOLLOW_expr_in_synpred1493473);
        expr();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_list_for_in_synpred1493475);
        list_for();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred149

    // $ANTLR start synpred152
    public final void synpred152_fragment() throws RecognitionException {   
        // org/python/antlr/Python.g:614:7: ( expr ( options {k=2; } : COMMA expr )+ ( COMMA )? )
        // org/python/antlr/Python.g:614:7: expr ( options {k=2; } : COMMA expr )+ ( COMMA )?
        {
        pushFollow(FOLLOW_expr_in_synpred1523497);
        expr();
        _fsp--;
        if (failed) return ;
        // org/python/antlr/Python.g:614:12: ( options {k=2; } : COMMA expr )+
        int cnt137=0;
        loop137:
        do {
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==COMMA) ) {
                int LA137_1 = input.LA(2);

                if ( (LA137_1==NAME||LA137_1==LPAREN||(LA137_1>=PLUS && LA137_1<=MINUS)||(LA137_1>=TILDE && LA137_1<=LBRACK)||LA137_1==LCURLY||(LA137_1>=BACKQUOTE && LA137_1<=STRING)) ) {
                    alt137=1;
                }


            }


            switch (alt137) {
        	case 1 :
        	    // org/python/antlr/Python.g:614:28: COMMA expr
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred1523507); if (failed) return ;
        	    pushFollow(FOLLOW_expr_in_synpred1523509);
        	    expr();
        	    _fsp--;
        	    if (failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt137 >= 1 ) break loop137;
        	    if (backtracking>0) {failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(137, input);
                    throw eee;
            }
            cnt137++;
        } while (true);

        // org/python/antlr/Python.g:614:41: ( COMMA )?
        int alt138=2;
        int LA138_0 = input.LA(1);

        if ( (LA138_0==COMMA) ) {
            alt138=1;
        }
        switch (alt138) {
            case 1 :
                // org/python/antlr/Python.g:614:42: COMMA
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred1523514); if (failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred152

    // $ANTLR start synpred153
    public final void synpred153_fragment() throws RecognitionException {   
        // org/python/antlr/Python.g:615:7: ( expr COMMA )
        // org/python/antlr/Python.g:615:7: expr COMMA
        {
        pushFollow(FOLLOW_expr_in_synpred1533533);
        expr();
        _fsp--;
        if (failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred1533535); if (failed) return ;

        }
    }
    // $ANTLR end synpred153

    // $ANTLR start synpred154
    public final void synpred154_fragment() throws RecognitionException {   
        // org/python/antlr/Python.g:620:29: ( COMMA test )
        // org/python/antlr/Python.g:620:29: COMMA test
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred1543577); if (failed) return ;
        pushFollow(FOLLOW_test_in_synpred1543579);
        test();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred154

    public final boolean synpred152() {
        backtracking++;
        int start = input.mark();
        try {
            synpred152_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred154() {
        backtracking++;
        int start = input.mark();
        try {
            synpred154_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred133() {
        backtracking++;
        int start = input.mark();
        try {
            synpred133_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred153() {
        backtracking++;
        int start = input.mark();
        try {
            synpred153_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred134() {
        backtracking++;
        int start = input.mark();
        try {
            synpred134_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred149() {
        backtracking++;
        int start = input.mark();
        try {
            synpred149_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred91() {
        backtracking++;
        int start = input.mark();
        try {
            synpred91_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred132() {
        backtracking++;
        int start = input.mark();
        try {
            synpred132_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_file_input_in_module505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_single_input534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_single_input539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_single_input544 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NEWLINE_in_single_input546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_file_input563 = new BitSet(new long[]{0x0000000000000002L,0x300000001B000000L,0x0002036DBFF80FD6L});
    public static final BitSet FOLLOW_stmt_in_file_input567 = new BitSet(new long[]{0x0000000000000002L,0x300000001B000000L,0x0002036DBFF80FD6L});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input591 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_eval_input595 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input598 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_decorators_in_funcdef615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_147_in_funcdef617 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_funcdef619 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_parameters_in_funcdef621 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_funcdef623 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_funcdef625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATSIGN_in_decorators676 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_decorators678 = new BitSet(new long[]{0x0000000000000000L,0x0000000011000000L});
    public static final BitSet FOLLOW_parameters_in_decorators680 = new BitSet(new long[]{0x0000000000000000L,0x0000000011000000L});
    public static final BitSet FOLLOW_NEWLINE_in_decorators683 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_LPAREN_in_parameters734 = new BitSet(new long[]{0x0000000000000000L,0x00000001B2000000L});
    public static final BitSet FOLLOW_varargslist_in_parameters737 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameters741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defparameter_in_varargslist772 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_varargslist782 = new BitSet(new long[]{0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_defparameter_in_varargslist784 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_varargslist797 = new BitSet(new long[]{0x0000000000000002L,0x0000000180000000L});
    public static final BitSet FOLLOW_STAR_in_varargslist813 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist817 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_varargslist820 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist822 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist844 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_varargslist917 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist921 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_varargslist924 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist926 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist959 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_varargslist963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fpdef_in_defparameter994 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_defparameter997 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_defparameter999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_fpdef1028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_fpdef1056 = new BitSet(new long[]{0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_fplist_in_fpdef1058 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RPAREN_in_fpdef1060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fpdef_in_fplist1083 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_fplist1093 = new BitSet(new long[]{0x0000000000000000L,0x0000000012000000L});
    public static final BitSet FOLLOW_fpdef_in_fplist1095 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_fplist1100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_stmt1124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt1129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt1145 = new BitSet(new long[]{0x0000000000000000L,0x0000000401000000L});
    public static final BitSet FOLLOW_SEMI_in_simple_stmt1155 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt1157 = new BitSet(new long[]{0x0000000000000000L,0x0000000401000000L});
    public static final BitSet FOLLOW_SEMI_in_simple_stmt1162 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NEWLINE_in_simple_stmt1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_stmt_in_small_stmt1184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_print_stmt_in_small_stmt1189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_del_stmt_in_small_stmt1194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pass_stmt_in_small_stmt1199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flow_stmt_in_small_stmt1204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_stmt_in_small_stmt1209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_stmt_in_small_stmt1214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exec_stmt_in_small_stmt1219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_stmt_in_small_stmt1224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprlist_in_expr_stmt1245 = new BitSet(new long[]{0x0000000000000002L,0x00007FFA00000000L});
    public static final BitSet FOLLOW_augassign_in_expr_stmt1256 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_exprlist_in_expr_stmt1260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSEQUAL_in_augassign1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUSEQUAL_in_augassign1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAREQUAL_in_augassign1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHEQUAL_in_augassign1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTEQUAL_in_augassign1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPEREQUAL_in_augassign1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VBAREQUAL_in_augassign1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CIRCUMFLEXEQUAL_in_augassign1404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFTSHIFTEQUAL_in_augassign1409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHTSHIFTEQUAL_in_augassign1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAREQUAL_in_augassign1419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESLASHEQUAL_in_augassign1424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_augassign1433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_print_stmt1458 = new BitSet(new long[]{0x0000000000000002L,0x3000800012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_print_stmt1468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_print_stmt1478 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_print_stmt1480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_del_stmt1510 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_exprlist_in_del_stmt1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_pass_stmt1521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_flow_stmt1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_flow_stmt1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_flow_stmt1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_stmt_in_flow_stmt1551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_stmt_in_flow_stmt1556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_break_stmt1565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_continue_stmt1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_return_stmt1583 = new BitSet(new long[]{0x0000000000000002L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_return_stmt1586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_yield_stmt1611 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_yield_stmt1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_raise_stmt1634 = new BitSet(new long[]{0x0000000000000002L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_raise_stmt1637 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt1640 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_raise_stmt1642 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt1645 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_raise_stmt1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_import_stmt1671 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_import_as_name_in_import_stmt1673 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_import_stmt1676 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_import_as_name_in_import_stmt1678 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_157_in_import_stmt1704 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_dotted_name_in_import_stmt1706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_import_stmt1708 = new BitSet(new long[]{0x0000000000000000L,0x0000000082000000L});
    public static final BitSet FOLLOW_STAR_in_import_stmt1719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_name_in_import_stmt1723 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_import_stmt1726 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_import_as_name_in_import_stmt1728 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_dotted_name_in_import_as_name1749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_import_as_name1752 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_import_as_name1756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dotted_name_in_dotted_as_name1788 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name1791 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_name1804 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_DOT_in_dotted_name1807 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_dotted_name1809 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_159_in_global_stmt1833 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_global_stmt1835 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_global_stmt1838 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_global_stmt1840 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_160_in_exec_stmt1851 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_exec_stmt1853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_exec_stmt1856 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_exec_stmt1858 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_exec_stmt1861 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_exec_stmt1863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_assert_stmt1876 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_assert_stmt1878 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_assert_stmt1881 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_assert_stmt1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_compound_stmt1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_compound_stmt1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_compound_stmt1910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_stmt_in_compound_stmt1920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_compound_stmt1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcdef_in_compound_stmt1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classdef_in_compound_stmt1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_for_stmt1950 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_exprlist_in_for_stmt1952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_for_stmt1954 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_for_stmt1956 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_for_stmt1958 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_for_stmt1962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_for_stmt1965 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_for_stmt1967 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_for_stmt1971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_while_stmt2019 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_while_stmt2021 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_while_stmt2023 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_while_stmt2027 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_while_stmt2030 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_while_stmt2032 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_while_stmt2036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_if_stmt2078 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_if_stmt2080 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_if_stmt2082 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_if_stmt2086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_167_in_if_stmt2089 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_if_stmt2091 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_if_stmt2093 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_if_stmt2097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_164_in_if_stmt2102 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_if_stmt2104 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_if_stmt2108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_with_stmt2158 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_exprlist_in_with_stmt2162 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_with_stmt2165 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_exprlist_in_with_stmt2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_with_stmt2173 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_with_stmt2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_try_stmt2229 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt2231 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_try_stmt2235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_except_clauses_in_try_stmt2246 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000041000000000L});
    public static final BitSet FOLLOW_164_in_try_stmt2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt2259 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_try_stmt2263 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_try_stmt2276 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt2278 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_try_stmt2282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_try_stmt2306 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt2308 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_try_stmt2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_except_clause_in_except_clauses2379 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_except_clauses2381 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_except_clauses2385 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_171_in_except_clauses2390 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_except_clauses2392 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_except_clauses2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_except_clauses2431 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_except_clauses2433 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_except_clauses2437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_except_clause2459 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_except_clause2462 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_except_clause2465 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_except_clause2467 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_simple_stmt_in_suite2482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_suite2487 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_INDENT_in_suite2489 = new BitSet(new long[]{0x0000000000000000L,0x300000001A000000L,0x0002036DBFF80FD6L});
    public static final BitSet FOLLOW_stmt_in_suite2492 = new BitSet(new long[]{0x0000000000000020L,0x300000001A000000L,0x0002036DBFF80FD6L});
    public static final BitSet FOLLOW_DEDENT_in_suite2496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_test_in_test2510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_test2513 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000400000000FD6L});
    public static final BitSet FOLLOW_and_test_in_test2515 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_lambdef_in_test2522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_test_in_and_test2533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_and_test2536 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000400000000FD6L});
    public static final BitSet FOLLOW_not_test_in_and_test2538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_174_in_not_test2551 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000400000000FD6L});
    public static final BitSet FOLLOW_not_test_in_not_test2553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comparison_in_not_test2558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_comparison2573 = new BitSet(new long[]{0x0000000000000002L,0x00FE000000000000L,0x0000C00200000000L});
    public static final BitSet FOLLOW_comp_op_in_comparison2576 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_comparison2578 = new BitSet(new long[]{0x0000000000000002L,0x00FE000000000000L,0x0000C00200000000L});
    public static final BitSet FOLLOW_LESS_in_comp_op2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_comp_op2595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_comp_op2599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATEREQUAL_in_comp_op2603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSEQUAL_in_comp_op2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALT_NOTEQUAL_in_comp_op2611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_comp_op2615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_comp_op2619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_comp_op2623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_comp_op2625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_comp_op2629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_comp_op2633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_comp_op2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xor_expr_in_expr2652 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_VBAR_in_expr2655 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_xor_expr_in_expr2658 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr2669 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_CIRCUMFLEX_in_xor_expr2672 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr2675 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr2686 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_AMPER_in_and_expr2689 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr2692 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr2703 = new BitSet(new long[]{0x0000000000000002L,0x0800800000000000L});
    public static final BitSet FOLLOW_set_in_shift_expr2706 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr2713 = new BitSet(new long[]{0x0000000000000002L,0x0800800000000000L});
    public static final BitSet FOLLOW_term_in_arith_expr2724 = new BitSet(new long[]{0x0000000000000002L,0x3000000000000000L});
    public static final BitSet FOLLOW_set_in_arith_expr2727 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_term_in_arith_expr2734 = new BitSet(new long[]{0x0000000000000002L,0x3000000000000000L});
    public static final BitSet FOLLOW_factor_in_term2747 = new BitSet(new long[]{0x0000000000000002L,0xC000000080000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_term2750 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_factor_in_term2768 = new BitSet(new long[]{0x0000000000000002L,0xC000000080000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_factor2781 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_factor_in_factor2790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_power_in_factor2795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trailer_in_power2809 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_power2822 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_factor_in_power2824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atom2841 = new BitSet(new long[]{0x0000000000000000L,0x3000000032000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_exprlist_in_atom2844 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RPAREN_in_atom2848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_atom2858 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FDEL});
    public static final BitSet FOLLOW_listmaker_in_atom2861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_atom2865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_atom2879 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FF6L});
    public static final BitSet FOLLOW_dictmaker_in_atom2882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RCURLY_in_atom2886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom2901 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_atom2903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom2905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_atom2910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_atom2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINT_in_atom2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_atom2953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEX_in_atom2962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_atom2968 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expr_in_listmaker2999 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_listmaker3009 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_listmaker3011 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_listmaker3016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_listmaker3033 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_listmaker3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listcomp_in_listmaker3049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_listmaker3059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_listcomp3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_list_for_in_listcomp3080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_genexp3115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_list_for_in_genexp3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_lambdef3151 = new BitSet(new long[]{0x0000000000000000L,0x0000000196000000L});
    public static final BitSet FOLLOW_varargslist_in_lambdef3154 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_lambdef3158 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_lambdef3160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_trailer3180 = new BitSet(new long[]{0x0000000000000002L,0x0001000010000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_trailer3194 = new BitSet(new long[]{0x0000000000000000L,0x30000001B2000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_arglist_in_trailer3196 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RPAREN_in_trailer3198 = new BitSet(new long[]{0x0000000000000002L,0x0001000010000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LBRACK_in_trailer3233 = new BitSet(new long[]{0x0000000000000000L,0x3001000016000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_subscriptlist_in_trailer3235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACK_in_trailer3237 = new BitSet(new long[]{0x0000000000000002L,0x0001000010000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_trailer3301 = new BitSet(new long[]{0x0000000000000000L,0x0000000012000000L,0x0000000000000FD4L});
    public static final BitSet FOLLOW_trailer_in_trailer3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist3365 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist3375 = new BitSet(new long[]{0x0000000000000000L,0x3001000016000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist3377 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist3382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_subscript3395 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_DOT_in_subscript3397 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_DOT_in_subscript3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_subscript3407 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_subscript3410 = new BitSet(new long[]{0x0000000000000002L,0x3000000016000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_subscript3413 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_sliceop_in_subscript3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_subscript3430 = new BitSet(new long[]{0x0000000000000002L,0x3000000016000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_subscript3433 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_sliceop_in_subscript3438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_sliceop3452 = new BitSet(new long[]{0x0000000000000002L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_sliceop3455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist3473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_list_for_in_exprlist3475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist3497 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_exprlist3507 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_exprlist3509 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_exprlist3514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist3533 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_exprlist3535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist3552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist3566 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_testlist3577 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_testlist3579 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_testlist3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_dictmaker3608 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_dictmaker3610 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_dictmaker3612 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_dictmaker3630 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_dictmaker3632 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_dictmaker3634 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_dictmaker3636 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_dictmaker3641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_classdef3669 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_NAME_in_classdef3671 = new BitSet(new long[]{0x0000000000000000L,0x0000000014000000L});
    public static final BitSet FOLLOW_LPAREN_in_classdef3674 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_classdef3676 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_RPAREN_in_classdef3678 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_classdef3682 = new BitSet(new long[]{0x0000000000000000L,0x3000000013000000L,0x00000005BFF00FD6L});
    public static final BitSet FOLLOW_suite_in_classdef3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arglist3735 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_arglist3738 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_argument_in_arglist3740 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_arglist3754 = new BitSet(new long[]{0x0000000000000002L,0x0000000180000000L});
    public static final BitSet FOLLOW_STAR_in_arglist3768 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_arglist3772 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_arglist3775 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist3777 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_arglist3781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist3797 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_arglist3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_arglist3865 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_arglist3869 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_arglist3872 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist3874 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_arglist3878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist3907 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_arglist3911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_argument3963 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGN_in_argument3965 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_argument3967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_argument3985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_for_in_list_iter4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_if_in_list_iter4012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_list_for4021 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_exprlist_in_list_for4023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_list_for4025 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_testlist_in_list_for4027 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004800000000L});
    public static final BitSet FOLLOW_list_iter_in_list_for4030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_list_if4062 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_list_if4064 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004800000000L});
    public static final BitSet FOLLOW_list_iter_in_list_if4067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINT_in_long_integer4566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comp_op_in_synpred912576 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_synpred912578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred1322999 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred1323009 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_synpred1323011 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred1323016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred1333033 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred1333035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listcomp_in_synpred1343049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred1493473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_list_for_in_synpred1493475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred1523497 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred1523507 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0000000000000FD6L});
    public static final BitSet FOLLOW_expr_in_synpred1523509 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred1523514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred1533533 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred1533535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred1543577 = new BitSet(new long[]{0x0000000000000000L,0x3000000012000000L,0x0001400000000FD6L});
    public static final BitSet FOLLOW_test_in_synpred1543579 = new BitSet(new long[]{0x0000000000000002L});

}